/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Fri Jul 19 14:25:16 2024.
 */

#ifndef CANI1_NONM_H
#define CANI1_NONM_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_FRAME_ID (0x67fu)
#define CANI1_NONM_ACM_CRASH_STAT_FRAME_ID (0x63u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_FRAME_ID (0x66u)
#define CANI1_NONM_VCU_E_TRACT_SYS_INFO_FRAME_ID (0x67u)
#define CANI1_NONM_RWSM_INFO_FRAME_ID (0x76u)
#define CANI1_NONM_BMS_STS_FRAME_ID (0x77u)
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_FRAME_ID (0x80u)
#define CANI1_NONM_EBCM_VEH_INFO_FRAME_ID (0xa0u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_FRAME_ID (0xd3u)
#define CANI1_NONM_ASU_SNSR_INFO_FRAME_ID (0xdfu)
#define CANI1_NONM_VCU_BATT_INFO_FRAME_ID (0x111u)
#define CANI1_NONM_VCU_CHARGING_INFO_FRAME_ID (0x117u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_FRAME_ID (0x11du)
#define CANI1_NONM_EBCM_STS_REQ_FRAME_ID (0x130u)
#define CANI1_NONM_ZCUR_LAMP_CMD_FRAME_ID (0x139u)
#define CANI1_NONM_SBM_LV_BAT_INFO_1_FRAME_ID (0x13du)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_FRAME_ID (0x13eu)
#define CANI1_NONM_VCU_CONSUMPTION_INFO_FRAME_ID (0x147u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FRAME_ID (0x15du)
#define CANI1_NONM_ZCUF_RLHS_LIGHT_INFO_FRAME_ID (0x16fu)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_FRAME_ID (0x173u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_FRAME_ID (0x179u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_FRAME_ID (0x17fu)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_FRAME_ID (0x183u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_FRAME_ID (0x189u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_FRAME_ID (0x18fu)
#define CANI1_NONM_TLML_REAR_LAMP_STS_FRAME_ID (0x193u)
#define CANI1_NONM_SLMFC_LAMP_STS_FRAME_ID (0x199u)
#define CANI1_NONM_SLMRC_LAMP_STS_FRAME_ID (0x19au)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_FRAME_ID (0x19fu)
#define CANI1_NONM_CCU_COMP_PWR_REQ_FRAME_ID (0x1a3u)
#define CANI1_NONM_CCU_TEMPERATURE_FBK_FRAME_ID (0x1a9u)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_FRAME_ID (0x1afu)
#define CANI1_NONM_ADAS_RVC_INFO_FRAME_ID (0x2e4u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_FRAME_ID (0x365u)
#define CANI1_NONM_ZCUR_IVI_STS_FRAME_ID (0x369u)
#define CANI1_NONM_CCU_FAULT_STS_FRAME_ID (0x373u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_FRAME_ID (0x379u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_FRAME_ID (0x37fu)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_FRAME_ID (0x383u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_FRAME_ID (0x38fu)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_FRAME_ID (0x393u)
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_FRAME_ID (0x399u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_FRAME_ID (0x39fu)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_FRAME_ID (0x3a3u)
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_FRAME_ID (0x3a9u)
#define CANI1_NONM_DCMD_CLOSURE_STS_FRAME_ID (0x3e3u)
#define CANI1_NONM_IVI_PSSNGR_SEAT_STORED_PROFILE_FRAME_ID (0x3e5u)
#define CANI1_NONM_VCU_STS_FRAME_ID (0x3e7u)
#define CANI1_NONM_DCMP_CLOSURE_STS_FRAME_ID (0x3e9u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_FRAME_ID (0x3efu)
#define CANI1_NONM_DCMRL_CLOSURE_STS_FRAME_ID (0x3f3u)
#define CANI1_NONM_ZCUF_WIPER_STS_FRAME_ID (0x3f9u)
#define CANI1_NONM_ZCUF_CLIM_STTG_TEMPERATURE_FBK_FRAME_ID (0x3ffu)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_FRAME_ID (0x403u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_FRAME_ID (0x463u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_FRAME_ID (0x465u)
#define CANI1_NONM_MFS_SWITCH_REQ_FRAME_ID (0x469u)
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_FRAME_ID (0x46bu)
#define CANI1_NONM_TBOX_DRVR_ID_INFO_FRAME_ID (0x474u)
#define CANI1_NONM_IVI_HVAC_CNTRL_FRAME_ID (0x475u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_FRAME_ID (0x47bu)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_FRAME_ID (0x485u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_FRAME_ID (0x48bu)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_FRAME_ID (0x495u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_FRAME_ID (0x49bu)
#define CANI1_NONM_TBOX_WARNING_FRAME_ID (0x583u)
#define CANI1_NONM_VCU_WARNING_FRAME_ID (0x584u)
#define CANI1_NONM_ZCUF_WARNING_FRAME_ID (0x585u)
#define CANI1_NONM_ACM_WARNING_FRAME_ID (0x590u)
#define CANI1_NONM_DCMRL_WARNING_FRAME_ID (0x591u)
#define CANI1_NONM_DCMRR_WARNING_FRAME_ID (0x592u)
#define CANI1_NONM_ASU_WARNING_FRAME_ID (0x593u)
#define CANI1_NONM_DCMP_WARNING_FRAME_ID (0x594u)
#define CANI1_NONM_BMS_WARNING_FRAME_ID (0x595u)
#define CANI1_NONM_DCMD_WARNING_FRAME_ID (0x596u)
#define CANI1_NONM_EBCM_WARNING_FRAME_ID (0x598u)
#define CANI1_NONM_OBC_WARNING_FRAME_ID (0x59au)
#define CANI1_NONM_EPS_RWA1_WARNING_FRAME_ID (0x59cu)
#define CANI1_NONM_EPS_SFA1_WARNING_FRAME_ID (0x59du)
#define CANI1_NONM_EPS_RWA2_WARNING_FRAME_ID (0x59eu)
#define CANI1_NONM_EPS_SFA2_WARNING_FRAME_ID (0x59fu)
#define CANI1_NONM_HDLML_WARNING_FRAME_ID (0x5a5u)
#define CANI1_NONM_HDLMR_WARNING_FRAME_ID (0x5a6u)
#define CANI1_NONM_SBM_WARNING_FRAME_ID (0x5a7u)
#define CANI1_NONM_CCU_WARNING_FRAME_ID (0x5a8u)
#define CANI1_NONM_MCU_F_WARNING_FRAME_ID (0x5acu)
#define CANI1_NONM_MCU_R_WARNING_FRAME_ID (0x5adu)
#define CANI1_NONM_MFS_WARNING_FRAME_ID (0x5aeu)
#define CANI1_NONM_DCDC_WARNING_FRAME_ID (0x5b1u)
#define CANI1_NONM_PSMD_WARNING_FRAME_ID (0x5b3u)
#define CANI1_NONM_PSMP_WARNING_FRAME_ID (0x5b4u)
#define CANI1_NONM_RWSM_WARNING_FRAME_ID (0x5b7u)
#define CANI1_NONM_ZCUR_WARNING_FRAME_ID (0x5b8u)
#define CANI1_NONM_TLML_WARNING_FRAME_ID (0x5c0u)
#define CANI1_NONM_TLMR_WARNING_FRAME_ID (0x5c1u)
#define CANI1_NONM_RLML_WARNING_FRAME_ID (0x5c2u)
#define CANI1_NONM_RLMR_WARNING_FRAME_ID (0x5c3u)
#define CANI1_NONM_SLMFC_WARNING_FRAME_ID (0x5c9u)
#define CANI1_NONM_SLMFL_WARNING_FRAME_ID (0x5cau)
#define CANI1_NONM_SLMFR_WARNING_FRAME_ID (0x5cbu)
#define CANI1_NONM_SLMRC_WARNING_FRAME_ID (0x5ccu)
#define CANI1_NONM_IVI_DIAG_RESP_FRAME_ID (0x602u)
#define CANI1_NONM_WLC_DIAG_RESP_FRAME_ID (0x632u)
#define CANI1_NONM_IVI_DIAG_REQ_FRAME_ID (0x682u)
#define CANI1_NONM_WLC_DIAG_REQ_FRAME_ID (0x6b2u)
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_FRAME_ID (0x6ffu)

/* Frame lengths in bytes. */
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_LENGTH (8u)
#define CANI1_NONM_ACM_CRASH_STAT_LENGTH (8u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_LENGTH (8u)
#define CANI1_NONM_VCU_E_TRACT_SYS_INFO_LENGTH (32u)
#define CANI1_NONM_RWSM_INFO_LENGTH (32u)
#define CANI1_NONM_BMS_STS_LENGTH (64u)
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_LENGTH (32u)
#define CANI1_NONM_EBCM_VEH_INFO_LENGTH (8u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_LENGTH (8u)
#define CANI1_NONM_ASU_SNSR_INFO_LENGTH (32u)
#define CANI1_NONM_VCU_BATT_INFO_LENGTH (32u)
#define CANI1_NONM_VCU_CHARGING_INFO_LENGTH (32u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_LENGTH (8u)
#define CANI1_NONM_EBCM_STS_REQ_LENGTH (8u)
#define CANI1_NONM_ZCUR_LAMP_CMD_LENGTH (32u)
#define CANI1_NONM_SBM_LV_BAT_INFO_1_LENGTH (8u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_LENGTH (32u)
#define CANI1_NONM_VCU_CONSUMPTION_INFO_LENGTH (12u)
#define CANI1_NONM_VCU_TO_VEH_INFO_LENGTH (32u)
#define CANI1_NONM_ZCUF_RLHS_LIGHT_INFO_LENGTH (8u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_LENGTH (32u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_LENGTH (32u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_LENGTH (32u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_LENGTH (32u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_LENGTH (32u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_LENGTH (32u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_LENGTH (32u)
#define CANI1_NONM_SLMFC_LAMP_STS_LENGTH (32u)
#define CANI1_NONM_SLMRC_LAMP_STS_LENGTH (32u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_LENGTH (32u)
#define CANI1_NONM_CCU_COMP_PWR_REQ_LENGTH (8u)
#define CANI1_NONM_CCU_TEMPERATURE_FBK_LENGTH (8u)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_LENGTH (8u)
#define CANI1_NONM_ADAS_RVC_INFO_LENGTH (32u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_LENGTH (32u)
#define CANI1_NONM_ZCUR_IVI_STS_LENGTH (32u)
#define CANI1_NONM_CCU_FAULT_STS_LENGTH (8u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_LENGTH (8u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_LENGTH (8u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_LENGTH (8u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_LENGTH (8u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_LENGTH (8u)
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_LENGTH (8u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_LENGTH (8u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_LENGTH (8u)
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_LENGTH (8u)
#define CANI1_NONM_DCMD_CLOSURE_STS_LENGTH (8u)
#define CANI1_NONM_IVI_PSSNGR_SEAT_STORED_PROFILE_LENGTH (8u)
#define CANI1_NONM_VCU_STS_LENGTH (32u)
#define CANI1_NONM_DCMP_CLOSURE_STS_LENGTH (8u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_LENGTH (8u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_LENGTH (8u)
#define CANI1_NONM_ZCUF_WIPER_STS_LENGTH (32u)
#define CANI1_NONM_ZCUF_CLIM_STTG_TEMPERATURE_FBK_LENGTH (8u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_LENGTH (8u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_LENGTH (8u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_LENGTH (8u)
#define CANI1_NONM_MFS_SWITCH_REQ_LENGTH (8u)
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_LENGTH (8u)
#define CANI1_NONM_TBOX_DRVR_ID_INFO_LENGTH (16u)
#define CANI1_NONM_IVI_HVAC_CNTRL_LENGTH (8u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_LENGTH (8u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_LENGTH (32u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_LENGTH (32u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_LENGTH (8u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LENGTH (32u)
#define CANI1_NONM_TBOX_WARNING_LENGTH (32u)
#define CANI1_NONM_VCU_WARNING_LENGTH (32u)
#define CANI1_NONM_ZCUF_WARNING_LENGTH (32u)
#define CANI1_NONM_ACM_WARNING_LENGTH (8u)
#define CANI1_NONM_DCMRL_WARNING_LENGTH (8u)
#define CANI1_NONM_DCMRR_WARNING_LENGTH (8u)
#define CANI1_NONM_ASU_WARNING_LENGTH (32u)
#define CANI1_NONM_DCMP_WARNING_LENGTH (8u)
#define CANI1_NONM_BMS_WARNING_LENGTH (32u)
#define CANI1_NONM_DCMD_WARNING_LENGTH (8u)
#define CANI1_NONM_EBCM_WARNING_LENGTH (32u)
#define CANI1_NONM_OBC_WARNING_LENGTH (32u)
#define CANI1_NONM_EPS_RWA1_WARNING_LENGTH (32u)
#define CANI1_NONM_EPS_SFA1_WARNING_LENGTH (32u)
#define CANI1_NONM_EPS_RWA2_WARNING_LENGTH (32u)
#define CANI1_NONM_EPS_SFA2_WARNING_LENGTH (32u)
#define CANI1_NONM_HDLML_WARNING_LENGTH (32u)
#define CANI1_NONM_HDLMR_WARNING_LENGTH (32u)
#define CANI1_NONM_SBM_WARNING_LENGTH (32u)
#define CANI1_NONM_CCU_WARNING_LENGTH (8u)
#define CANI1_NONM_MCU_F_WARNING_LENGTH (32u)
#define CANI1_NONM_MCU_R_WARNING_LENGTH (32u)
#define CANI1_NONM_MFS_WARNING_LENGTH (8u)
#define CANI1_NONM_DCDC_WARNING_LENGTH (32u)
#define CANI1_NONM_PSMD_WARNING_LENGTH (8u)
#define CANI1_NONM_PSMP_WARNING_LENGTH (8u)
#define CANI1_NONM_RWSM_WARNING_LENGTH (32u)
#define CANI1_NONM_ZCUR_WARNING_LENGTH (32u)
#define CANI1_NONM_TLML_WARNING_LENGTH (32u)
#define CANI1_NONM_TLMR_WARNING_LENGTH (32u)
#define CANI1_NONM_RLML_WARNING_LENGTH (32u)
#define CANI1_NONM_RLMR_WARNING_LENGTH (32u)
#define CANI1_NONM_SLMFC_WARNING_LENGTH (32u)
#define CANI1_NONM_SLMFL_WARNING_LENGTH (32u)
#define CANI1_NONM_SLMFR_WARNING_LENGTH (32u)
#define CANI1_NONM_SLMRC_WARNING_LENGTH (32u)
#define CANI1_NONM_IVI_DIAG_RESP_LENGTH (64u)
#define CANI1_NONM_WLC_DIAG_RESP_LENGTH (8u)
#define CANI1_NONM_IVI_DIAG_REQ_LENGTH (64u)
#define CANI1_NONM_WLC_DIAG_REQ_LENGTH (8u)
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_LENGTH (8u)

/* Extended or standard frame types. */
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_IS_EXTENDED (0)
#define CANI1_NONM_ACM_CRASH_STAT_IS_EXTENDED (0)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_IS_EXTENDED (0)
#define CANI1_NONM_VCU_E_TRACT_SYS_INFO_IS_EXTENDED (0)
#define CANI1_NONM_RWSM_INFO_IS_EXTENDED (0)
#define CANI1_NONM_BMS_STS_IS_EXTENDED (0)
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_IS_EXTENDED (0)
#define CANI1_NONM_EBCM_VEH_INFO_IS_EXTENDED (0)
#define CANI1_NONM_ZCUF_CLAMP_INFO_IS_EXTENDED (0)
#define CANI1_NONM_ASU_SNSR_INFO_IS_EXTENDED (0)
#define CANI1_NONM_VCU_BATT_INFO_IS_EXTENDED (0)
#define CANI1_NONM_VCU_CHARGING_INFO_IS_EXTENDED (0)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_IS_EXTENDED (0)
#define CANI1_NONM_EBCM_STS_REQ_IS_EXTENDED (0)
#define CANI1_NONM_ZCUR_LAMP_CMD_IS_EXTENDED (0)
#define CANI1_NONM_SBM_LV_BAT_INFO_1_IS_EXTENDED (0)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_IS_EXTENDED (0)
#define CANI1_NONM_VCU_CONSUMPTION_INFO_IS_EXTENDED (0)
#define CANI1_NONM_VCU_TO_VEH_INFO_IS_EXTENDED (0)
#define CANI1_NONM_ZCUF_RLHS_LIGHT_INFO_IS_EXTENDED (0)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_IS_EXTENDED (0)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_IS_EXTENDED (0)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_IS_EXTENDED (0)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_IS_EXTENDED (0)
#define CANI1_NONM_RLML_REAR_LAMP_STS_IS_EXTENDED (0)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_IS_EXTENDED (0)
#define CANI1_NONM_TLML_REAR_LAMP_STS_IS_EXTENDED (0)
#define CANI1_NONM_SLMFC_LAMP_STS_IS_EXTENDED (0)
#define CANI1_NONM_SLMRC_LAMP_STS_IS_EXTENDED (0)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_IS_EXTENDED (0)
#define CANI1_NONM_CCU_COMP_PWR_REQ_IS_EXTENDED (0)
#define CANI1_NONM_CCU_TEMPERATURE_FBK_IS_EXTENDED (0)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_IS_EXTENDED (0)
#define CANI1_NONM_ADAS_RVC_INFO_IS_EXTENDED (0)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_IS_EXTENDED (0)
#define CANI1_NONM_ZCUR_IVI_STS_IS_EXTENDED (0)
#define CANI1_NONM_CCU_FAULT_STS_IS_EXTENDED (0)
#define CANI1_NONM_CCU_CLIM_SYS_STS_IS_EXTENDED (0)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_IS_EXTENDED (0)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_IS_EXTENDED (0)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_IS_EXTENDED (0)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_IS_EXTENDED (0)
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_IS_EXTENDED (0)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_IS_EXTENDED (0)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_IS_EXTENDED (0)
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_IS_EXTENDED (0)
#define CANI1_NONM_DCMD_CLOSURE_STS_IS_EXTENDED (0)
#define CANI1_NONM_IVI_PSSNGR_SEAT_STORED_PROFILE_IS_EXTENDED (0)
#define CANI1_NONM_VCU_STS_IS_EXTENDED (0)
#define CANI1_NONM_DCMP_CLOSURE_STS_IS_EXTENDED (0)
#define CANI1_NONM_DCMRR_CLOSURE_STS_IS_EXTENDED (0)
#define CANI1_NONM_DCMRL_CLOSURE_STS_IS_EXTENDED (0)
#define CANI1_NONM_ZCUF_WIPER_STS_IS_EXTENDED (0)
#define CANI1_NONM_ZCUF_CLIM_STTG_TEMPERATURE_FBK_IS_EXTENDED (0)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_IS_EXTENDED (0)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_IS_EXTENDED (0)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_IS_EXTENDED (0)
#define CANI1_NONM_MFS_SWITCH_REQ_IS_EXTENDED (0)
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_IS_EXTENDED (0)
#define CANI1_NONM_TBOX_DRVR_ID_INFO_IS_EXTENDED (0)
#define CANI1_NONM_IVI_HVAC_CNTRL_IS_EXTENDED (0)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_IS_EXTENDED (0)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_IS_EXTENDED (0)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IS_EXTENDED (0)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_IS_EXTENDED (0)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_IS_EXTENDED (0)
#define CANI1_NONM_TBOX_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_VCU_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_ZCUF_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_ACM_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_DCMRL_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_DCMRR_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_ASU_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_DCMP_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_BMS_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_DCMD_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_EBCM_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_OBC_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_EPS_RWA1_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_EPS_SFA1_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_EPS_RWA2_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_EPS_SFA2_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_HDLML_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_HDLMR_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_SBM_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_CCU_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_MCU_F_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_MCU_R_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_MFS_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_DCDC_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_PSMD_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_PSMP_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_RWSM_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_ZCUR_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_TLML_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_TLMR_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_RLML_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_RLMR_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_SLMFC_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_SLMFL_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_SLMFR_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_SLMRC_WARNING_IS_EXTENDED (0)
#define CANI1_NONM_IVI_DIAG_RESP_IS_EXTENDED (0)
#define CANI1_NONM_WLC_DIAG_RESP_IS_EXTENDED (0)
#define CANI1_NONM_IVI_DIAG_REQ_IS_EXTENDED (0)
#define CANI1_NONM_WLC_DIAG_REQ_IS_EXTENDED (0)
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define CANI1_NONM_ACM_CRASH_STAT_CYCLE_TIME_MS (10u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_CYCLE_TIME_MS (10u)
#define CANI1_NONM_VCU_E_TRACT_SYS_INFO_CYCLE_TIME_MS (10u)
#define CANI1_NONM_RWSM_INFO_CYCLE_TIME_MS (10u)
#define CANI1_NONM_BMS_STS_CYCLE_TIME_MS (10u)
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_CYCLE_TIME_MS (10u)
#define CANI1_NONM_EBCM_VEH_INFO_CYCLE_TIME_MS (20u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CYCLE_TIME_MS (20u)
#define CANI1_NONM_ASU_SNSR_INFO_CYCLE_TIME_MS (20u)
#define CANI1_NONM_VCU_BATT_INFO_CYCLE_TIME_MS (50u)
#define CANI1_NONM_VCU_CHARGING_INFO_CYCLE_TIME_MS (50u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_CYCLE_TIME_MS (50u)
#define CANI1_NONM_EBCM_STS_REQ_CYCLE_TIME_MS (100u)
#define CANI1_NONM_ZCUR_LAMP_CMD_CYCLE_TIME_MS (100u)
#define CANI1_NONM_SBM_LV_BAT_INFO_1_CYCLE_TIME_MS (100u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_CYCLE_TIME_MS (100u)
#define CANI1_NONM_VCU_CONSUMPTION_INFO_CYCLE_TIME_MS (100u)
#define CANI1_NONM_VCU_TO_VEH_INFO_CYCLE_TIME_MS (100u)
#define CANI1_NONM_ZCUF_RLHS_LIGHT_INFO_CYCLE_TIME_MS (100u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_CYCLE_TIME_MS (100u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_CYCLE_TIME_MS (100u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_CYCLE_TIME_MS (100u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_CYCLE_TIME_MS (100u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_CYCLE_TIME_MS (100u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_CYCLE_TIME_MS (100u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_CYCLE_TIME_MS (100u)
#define CANI1_NONM_SLMFC_LAMP_STS_CYCLE_TIME_MS (100u)
#define CANI1_NONM_SLMRC_LAMP_STS_CYCLE_TIME_MS (100u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_CYCLE_TIME_MS (100u)
#define CANI1_NONM_CCU_COMP_PWR_REQ_CYCLE_TIME_MS (100u)
#define CANI1_NONM_CCU_TEMPERATURE_FBK_CYCLE_TIME_MS (100u)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_CYCLE_TIME_MS (100u)
#define CANI1_NONM_ADAS_RVC_INFO_CYCLE_TIME_MS (500u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_CYCLE_TIME_MS (500u)
#define CANI1_NONM_ZCUR_IVI_STS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_CCU_FAULT_STS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_CYCLE_TIME_MS (500u)
#define CANI1_NONM_DCMD_CLOSURE_STS_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_VCU_STS_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_DCMP_CLOSURE_STS_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_ZCUF_WIPER_STS_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_ZCUF_CLIM_STTG_TEMPERATURE_FBK_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_MFS_SWITCH_REQ_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_TBOX_DRVR_ID_INFO_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_TBOX_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_VCU_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_ZCUF_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_ACM_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_DCMRL_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_DCMRR_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_ASU_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_DCMP_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_BMS_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_DCMD_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_EBCM_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_OBC_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_EPS_RWA1_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_EPS_SFA1_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_EPS_RWA2_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_EPS_SFA2_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_HDLML_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_HDLMR_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_SBM_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_CCU_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_MCU_F_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_MCU_R_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_MFS_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_DCDC_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_PSMD_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_PSMP_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_RWSM_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_ZCUR_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_TLML_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_TLMR_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_RLML_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_RLMR_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_SLMFC_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_SLMFL_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_SLMFR_WARNING_CYCLE_TIME_MS (1000u)
#define CANI1_NONM_SLMRC_WARNING_CYCLE_TIME_MS (1000u)

/* Signal choices. */
#define CANI1_NONM_ACM_CRASH_STAT_ALV_CTR_ACM_CRASH_STAT_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_ACM_CRASH_STAT_AIRBG_CRASH_STS_NO_CRASH_CHOICE (0u)
#define CANI1_NONM_ACM_CRASH_STAT_AIRBG_CRASH_STS_CRASH_CHOICE (1u)
#define CANI1_NONM_ACM_CRASH_STAT_AIRBG_CRASH_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ACM_CRASH_STAT_AIRBG_CRASH_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_ALV_CTR_EPS_SFA_STEER_WHL_PUB_INFO_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_STEER_WHL_TQ_ERROR_CHOICE (4094u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_STEER_WHL_TQ_NOT__AVAILABLE_CHOICE (4095u)

#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_EMGCY_REQ_INACTIVE_CHOICE (0u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_EMGCY_REQ_ACTIVE_CHOICE (1u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_EMGCY_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_EMGCY_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_STEER_WHL_AG_ERROR_CHOICE (65534u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_STEER_WHL_AG_NOT__AVAILABLE_CHOICE (65535u)

#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_TUN_STS_NORMAL_MODE_CHOICE (0u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_TUN_STS_ECO_MODE_CHOICE (1u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_TUN_STS_SPORT_MODE_CHOICE (2u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_TUN_STS_ECO___MODE_CHOICE (3u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_TUN_STS_SPORT___MODE_CHOICE (4u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_TUN_STS_SAND__MODE_CHOICE (5u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_TUN_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_TUN_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_CENTRG_STS_STEERING_ALIGNED_CHOICE (0u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_CENTRG_STS_ALIGNMENT_NEEDED_CHOICE (1u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_CENTRG_STS_CENTERING_NEEDED_CHOICE (2u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_CENTRG_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_CENTRG_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_CENTRG_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_CENTRG_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_CENTRG_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_INT_STANDBY_CHOICE (0u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_INT_RWA_ALIGN_CHOICE (1u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_INT_SFA_ALIGN_CHOICE (2u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_INT_SELFCTRG_CHOICE (3u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_INT_ALIGN_CMPL_CHOICE (4u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_INT_NORMAL_CHOICE (5u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_INT_SOFTLOCK_CHOICE (6u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_INT_SOFTLOCK_ALIGND_CHOICE (7u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_RESERVED_8_CHOICE (8u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_RESERVED_9_CHOICE (9u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_RESERVED_10_CHOICE (10u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_RESERVED_11_CHOICE (11u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_RESERVED_12_CHOICE (12u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_RESERVED_13_CHOICE (13u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_ERROR_CHOICE (14u)
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_NOT__AVAILABLE_CHOICE (15u)

#define CANI1_NONM_RWSM_INFO_RE_WHL_STEER_MEASD_STK_VAL_ERROR_CHOICE (65534u)
#define CANI1_NONM_RWSM_INFO_RE_WHL_STEER_MEASD_STK_VAL_NOT__AVAILABLE_CHOICE (65535u)

#define CANI1_NONM_RWSM_INFO_RE_WHL_STEER_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_RWSM_INFO_RE_WHL_STEER_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_RWSM_INFO_RE_WHL_STEER_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_RWSM_INFO_RE_WHL_STEER_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_STS_BMS_BAT_PRE_CDN_STS_PRECONDITION_OFF__DEFAULT_CHOICE (0u)
#define CANI1_NONM_BMS_STS_BMS_BAT_PRE_CDN_STS_LOW_TEMPERATURE_PRECONDITION_ON_CHOICE (1u)
#define CANI1_NONM_BMS_STS_BMS_BAT_PRE_CDN_STS_HIGH_TEMPERATURE_PRECONDITION_ON_CHOICE (2u)
#define CANI1_NONM_BMS_STS_BMS_BAT_PRE_CDN_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_STBWR_RWA_PINION_AG_ERROR_CHOICE (65534u)
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_STBWR_RWA_PINION_AG_NOT__AVAILABLE_CHOICE (65535u)

#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_STBWR_RWA_PINION_AG_SPD_ERROR_CHOICE (4094u)
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_STBWR_RWA_PINION_AG_SPD_NOT__AVAILABLE_CHOICE (4095u)

#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_STBWR_RWA_RACK_POSN_ERROR_CHOICE (1048574u)
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_STBWR_RWA_RACK_POSN_NOT__AVAILABLE_CHOICE (1048575u)

#define CANI1_NONM_EBCM_VEH_INFO_ALV_CTR_EBCM_VEH_INFO_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_EBCM_VEH_INFO_ABS_ACT_VEH_SPD_ERROR_CHOICE (65534u)
#define CANI1_NONM_EBCM_VEH_INFO_ABS_ACT_VEH_SPD_NOT__AVAILABLE_CHOICE (65535u)

#define CANI1_NONM_ZCUF_CLAMP_INFO_ALV_CTR_ZCUF_CLAMP_INFO_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_VEHICLE_PARKED_CHOICE (0u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_VEHICLE_ALIVE_CHOICE (1u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_VEHICLE_ENTRY_CHOICE (2u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_VEHICLE_DRIVING_CHOICE (3u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_VEHICLE_UPGRADE_CHOICE (4u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_RESERVED_7_CHOICE (7u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_RESERVED_8_CHOICE (8u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_RESERVED_9_CHOICE (9u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_RESERVED_10_CHOICE (10u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_RESERVED_11_CHOICE (11u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_RESERVED_12_CHOICE (12u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_RESERVED_13_CHOICE (13u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_RESERVED_14_CHOICE (14u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_NOT_AVAILABLE_CHOICE (15u)

#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_CL15_L_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_CL15_L_ON_CHOICE (1u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_CL15_L_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_CL15_L_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_CL30_S_L_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_CL30_S_L_ON_CHOICE (1u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_CL30_S_L_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_CL30_S_L_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_CLAMP_INFO_LVM_LOA_SHED_REQ_NOT_REQUESTED_CHOICE (0u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_LVM_LOA_SHED_REQ_REQUESTED_CHOICE (1u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_LVM_LOA_SHED_REQ_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_CLAMP_INFO_LVM_LOA_SHED_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_FL_ERROR_CHOICE (4094u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_FL_NOT__AVAILABLE_CHOICE (4095u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_FR_ERROR_CHOICE (4094u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_FR_NOT__AVAILABLE_CHOICE (4095u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_RR_ERROR_CHOICE (4094u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_RR_NOT__AVAILABLE_CHOICE (4095u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_RL_ERROR_CHOICE (4094u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_RL_NOT__AVAILABLE_CHOICE (4095u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_STS_NOMINAL_CHOICE (0u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_STS_LOW_CHOICE (1u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_STS_HIGH_CHOICE (2u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CDC_MODE_STS_SOFT1_CHOICE (0u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CDC_MODE_STS_SOFT2_CHOICE (1u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CDC_MODE_STS_HARD1_CHOICE (2u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CDC_MODE_STS_HARD2_CHOICE (3u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CDC_MODE_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CDC_MODE_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CDC_MODE_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CDC_MODE_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_INGRS_MOD_ACK_NOT_ACKNOWLEDGED_CHOICE (0u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_INGRS_MOD_ACK_ACKNOWLEDGED_CHOICE (1u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_INGRS_MOD_ACK_RESERVED_CHOICE (2u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_INGRS_MOD_ACK_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SPRG_MODE_STS_LOW_CHOICE (0u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SPRG_MODE_STS_HIGH_CHOICE (1u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SPRG_MODE_STS_RESERVED_2_CHOICE (2u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SPRG_MODE_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SPRG_MODE_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SPRG_MODE_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SPRG_MODE_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SPRG_MODE_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CMPR_STS_READY_CHOICE (0u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CMPR_STS_RUNNING_CHOICE (1u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CMPR_STS_RESERVED_2_CHOICE (2u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CMPR_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CMPR_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CMPR_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CMPR_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CMPR_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SRV_MODE_STS_DISABLED_CHOICE (0u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SRV_MODE_STS_ENABLED_CHOICE (1u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SRV_MODE_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SRV_MODE_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_AIR_TANK_P_ERROR_CHOICE (254u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_AIR_TANK_P_NOT__AVAILABLE_CHOICE (255u)

#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_STS_AVAILABLE_CHOICE (0u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_STS_DEGRADATION__STATE_CHOICE (1u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_STS_RESERVED_2_CHOICE (2u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_VCU_CHARGING_INFO_FSCHG_DC_CHG_GUN_IN_DISCONNECT_CHOICE (0u)
#define CANI1_NONM_VCU_CHARGING_INFO_FSCHG_DC_CHG_GUN_IN_CONNECTED_CHOICE (1u)
#define CANI1_NONM_VCU_CHARGING_INFO_FSCHG_DC_CHG_GUN_IN_ERROR_CHOICE (2u)
#define CANI1_NONM_VCU_CHARGING_INFO_FSCHG_DC_CHG_GUN_IN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_CHARGING_INFO_ACCHG_AC_CHG_GUN_IN_DISCONNECT_CHOICE (0u)
#define CANI1_NONM_VCU_CHARGING_INFO_ACCHG_AC_CHG_GUN_IN_CONNECTED_CHOICE (1u)
#define CANI1_NONM_VCU_CHARGING_INFO_ACCHG_AC_CHG_GUN_IN_ERROR_CHOICE (2u)
#define CANI1_NONM_VCU_CHARGING_INFO_ACCHG_AC_CHG_GUN_IN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ALV_CTR_VCU_HV_DRV_SYS_STATUS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_ECO_PLUS_CHOICE (0u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_ECO_CHOICE (1u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_NORMAL__CHOICE (2u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_SPORT_CHOICE (3u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_SPORTS_PLUS_CHOICE (4u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_SAND_OFF__CHOICE (5u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_RESERVE_CHOICE (6u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ENMGT_HV_DRV_SYS_STS_NOT_AVAILABLE_0_CHOICE (0u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ENMGT_HV_DRV_SYS_STS_NORMAL_CHOICE (1u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ENMGT_HV_DRV_SYS_STS_DEGRADATION_CHOICE (2u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ENMGT_HV_DRV_SYS_STS_LIMP_HOME_CHOICE (3u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ENMGT_HV_DRV_SYS_STS_RESERVE_4_CHOICE (4u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ENMGT_HV_DRV_SYS_STS_RESERVE_5_CHOICE (5u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ENMGT_HV_DRV_SYS_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ENMGT_HV_DRV_SYS_STS_NOT_AVAILABLE_7_CHOICE (7u)

#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_VLD_INVALID__CHOICE (0u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_VLD_VALID_CHOICE (1u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_VLD_ERROR_CHOICE (2u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_VLD_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ESHIFT_ACT_GEAR_PARK_CHOICE (0u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ESHIFT_ACT_GEAR_REVERSE_CHOICE (1u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ESHIFT_ACT_GEAR_NEUTRAL_CHOICE (2u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ESHIFT_ACT_GEAR_DRIVE_CHOICE (3u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ESHIFT_ACT_GEAR_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ESHIFT_ACT_GEAR_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ESHIFT_ACT_GEAR_ERROR_CHOICE (6u)
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ESHIFT_ACT_GEAR_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_EBCM_STS_REQ_ALV_CTR_EBCM_STS_REQ_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_EBCM_STS_REQ_ABS_INTV_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_EBCM_STS_REQ_ABS_INTV_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_EBCM_STS_REQ_ABS_INTV_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_EBCM_STS_REQ_ABS_INTV_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_STS_REQ_DRVAC_TCS_AVL_AVAILABLE_CHOICE (0u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_TCS_AVL_RESERVED_CHOICE (1u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_TCS_AVL_ERROR_CHOICE (2u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_TCS_AVL_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_STS_REQ_DRVAC_FLD_LVL_INDCR_BRK_FLD_STS_MINIMUM_CHOICE (0u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_FLD_LVL_INDCR_BRK_FLD_STS_NOMINAL_CHOICE (1u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_FLD_LVL_INDCR_BRK_FLD_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_FLD_LVL_INDCR_BRK_FLD_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_STS_REQ_ECPBK_BRK_LI_ON_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_BRK_LI_ON_REQ_REQUESTED_BRAKE_LIGHT_OFF_CHOICE (1u)
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_BRK_LI_ON_REQ_REQUESTED__BRAKE_LIGHT_ON_CHOICE (2u)
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_BRK_LI_ON_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_STS_REQ_EBD_SYS_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_EBCM_STS_REQ_EBD_SYS_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_EBCM_STS_REQ_EBD_SYS_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_EBCM_STS_REQ_EBD_SYS_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_STS_REQ_DRVAC_HDC_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_HDC_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_HDC_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_HDC_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_STS_REQ_DRVAC_TCS_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_TCS_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_TCS_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_TCS_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_STS_REQ_DRVAC_CORNERING_BRK_CTL_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_CORNERING_BRK_CTL_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_CORNERING_BRK_CTL_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_CORNERING_BRK_CTL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_STS_REQ_DRVAC_HILL_STRT_ASSI_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_HILL_STRT_ASSI_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_HILL_STRT_ASSI_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_HILL_STRT_ASSI_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_STS_REQ_ECPBK_STS_RELEASED_CHOICE (0u)
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_STS_APPLIED_CHOICE (1u)
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_STS_DYNAMIC_BRAKING_CHOICE (2u)
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_STS_FAULT_CHOICE (3u)
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_STS_WARNING_CHOICE (4u)
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_SBM_LV_BAT_INFO_1_ALV_CTR_SBM_LV_BAT_INFO_1_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_SBM_LV_BAT_INFO_1_SBM_LV_BAT_THERM_RUNAWY_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SBM_LV_BAT_INFO_1_SBM_LV_BAT_THERM_RUNAWY_WARNING_CHOICE (1u)
#define CANI1_NONM_SBM_LV_BAT_INFO_1_SBM_LV_BAT_THERM_RUNAWY_RESERVED_CHOICE (2u)
#define CANI1_NONM_SBM_LV_BAT_INFO_1_SBM_LV_BAT_THERM_RUNAWY_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_NO_FAULT_CHOICE (0u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_LEVEL1_FAULT_CHOICE (1u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_LEVEL2_FAULT_CHOICE (2u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_LEVEL3_FAULT_CHOICE (3u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_START_CHOICE (4u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_RESERVED_7_CHOICE (7u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_RESERVED_8_CHOICE (8u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_RESERVED_9_CHOICE (9u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_RESERVED_10_CHOICE (10u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_RESERVED_11_CHOICE (11u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_RESERVED_12_CHOICE (12u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_RESERVED_13_CHOICE (13u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_RESERVED_14_CHOICE (14u)
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_NOT_AVAILABLE_CHOICE (15u)

#define CANI1_NONM_VCU_TO_VEH_INFO_ACCHG_AC_CHG_STS_CHARGING_NOT_IN_PROGRESS_CHOICE (0u)
#define CANI1_NONM_VCU_TO_VEH_INFO_ACCHG_AC_CHG_STS_CHARGING_IN_PROGRESS_CHOICE (1u)
#define CANI1_NONM_VCU_TO_VEH_INFO_ACCHG_AC_CHG_STS_CHARGING_COMPLETE_CHOICE (2u)
#define CANI1_NONM_VCU_TO_VEH_INFO_ACCHG_AC_CHG_STS_CHARGE_FAULT_CHOICE (3u)
#define CANI1_NONM_VCU_TO_VEH_INFO_ACCHG_AC_CHG_STS_GUN_PLUGGED_IN_STANDBY_CHOICE (4u)
#define CANI1_NONM_VCU_TO_VEH_INFO_ACCHG_AC_CHG_STS_GUN_PLUGGED_IN_WAITING_CHOICE (5u)
#define CANI1_NONM_VCU_TO_VEH_INFO_ACCHG_AC_CHG_STS_PRECONDITIONING_CHOICE (6u)
#define CANI1_NONM_VCU_TO_VEH_INFO_ACCHG_AC_CHG_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_RESERVED_0_CHOICE (0u)
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_RWD_CHOICE (1u)
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_FWD_CHOICE (2u)
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_AWD_CHOICE (3u)
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_VCU_TO_VEH_INFO_CREGB_COAST_RGN_LVL_INDCR_LEVEL0_CHOICE (0u)
#define CANI1_NONM_VCU_TO_VEH_INFO_CREGB_COAST_RGN_LVL_INDCR_LEVEL1_CHOICE (1u)
#define CANI1_NONM_VCU_TO_VEH_INFO_CREGB_COAST_RGN_LVL_INDCR_LEVEL2_CHOICE (2u)
#define CANI1_NONM_VCU_TO_VEH_INFO_CREGB_COAST_RGN_LVL_INDCR_LEVEL3_CHOICE (3u)
#define CANI1_NONM_VCU_TO_VEH_INFO_CREGB_COAST_RGN_LVL_INDCR_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_VCU_TO_VEH_INFO_CREGB_COAST_RGN_LVL_INDCR_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_VCU_TO_VEH_INFO_CREGB_COAST_RGN_LVL_INDCR_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_VCU_TO_VEH_INFO_CREGB_COAST_RGN_LVL_INDCR_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_VEH_CHRGN_STS_CHARGING_NOT_IN_PROGRESS_CHOICE (0u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_VEH_CHRGN_STS_CHARGING_IN_PROGRESS_CHOICE (1u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_VEH_CHRGN_STS_CHARGING_COMPLETE_CHOICE (2u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_VEH_CHRGN_STS_CHARGE_FAULT_CHOICE (3u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_VEH_CHRGN_STS_GUN_PLUGGED_IN_STANDBY_CHOICE (4u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_VEH_CHRGN_STS_GUN_PLUGGED_IN_WAITING_CHOICE (5u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_VEH_CHRGN_STS_PRECONDITIONING_CHOICE (6u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_VEH_CHRGN_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_VCU_TO_VEH_INFO_ESHIFT_CHNG_GEAR_FROM_PARK_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_TO_VEH_INFO_ESHIFT_CHNG_GEAR_FROM_PARK_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_TO_VEH_INFO_ESHIFT_CHNG_GEAR_FROM_PARK_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_TO_VEH_INFO_ESHIFT_CHNG_GEAR_FROM_PARK_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_CHG_GUN_LOCK_STS_UNLOCK_CHOICE (0u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_CHG_GUN_LOCK_STS_LOCK_CHOICE (1u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_CHG_GUN_LOCK_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_CHG_GUN_LOCK_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_VLD_INVALID__CHOICE (0u)
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_VLD_VALID_CHOICE (1u)
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_VLD_ERROR_CHOICE (2u)
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_VLD_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_RLHS_LIGHT_INFO_ALV_CTR_ZCUF_RLHS_LIGHT_INFO_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_LO_BEAM_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_LO_BEAM_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_LO_BEAM_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_LO_BEAM_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_HI_BEAM_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_HI_BEAM_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_HI_BEAM_LAMP_STS_FLASH_CHOICE (2u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_HI_BEAM_LAMP_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_HI_BEAM_LAMP_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_HI_BEAM_LAMP_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_HI_BEAM_LAMP_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_HI_BEAM_LAMP_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_LO_BEAM_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_LO_BEAM_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_LO_BEAM_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_LO_BEAM_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_HI_BEAM_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_HI_BEAM_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_HI_BEAM_LAMP_STS_FLASH_CHOICE (2u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_HI_BEAM_LAMP_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_HI_BEAM_LAMP_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_HI_BEAM_LAMP_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_HI_BEAM_LAMP_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_HI_BEAM_LAMP_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_LE_FRNT_POSN_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_LE_FRNT_POSN_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_LE_FRNT_POSN_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_LE_FRNT_POSN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_LE_DRL_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_LE_DRL_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_LE_DRL_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_LE_DRL_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_FRNT_LE_BODY_TURN_INDCR_STS_OFF_CHOICE (0u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_FRNT_LE_BODY_TURN_INDCR_STS_ON_CHOICE (1u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_FRNT_LE_BODY_TURN_INDCR_STS_FLASH_CHOICE (2u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_FRNT_LE_BODY_TURN_INDCR_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_FRNT_LE_BODY_TURN_INDCR_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_FRNT_LE_BODY_TURN_INDCR_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_FRNT_LE_BODY_TURN_INDCR_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_FRNT_LE_BODY_TURN_INDCR_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_RI_FRNT_POSN_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_RI_FRNT_POSN_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_RI_FRNT_POSN_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_RI_FRNT_POSN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_RI_DRL_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_RI_DRL_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_RI_DRL_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_RI_DRL_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_FRNT_RI_BODY_TURN_INDCR_STS_OFF_CHOICE (0u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_FRNT_RI_BODY_TURN_INDCR_STS_ON_CHOICE (1u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_FRNT_RI_BODY_TURN_INDCR_STS_FLASH_CHOICE (2u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_FRNT_RI_BODY_TURN_INDCR_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_FRNT_RI_BODY_TURN_INDCR_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_FRNT_RI_BODY_TURN_INDCR_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_FRNT_RI_BODY_TURN_INDCR_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_FRNT_RI_BODY_TURN_INDCR_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_LE_BODY_BRK_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_LE_BODY_BRK_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_LE_BODY_BRK_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_LE_BODY_BRK_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_POSN_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_POSN_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_POSN_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_POSN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_TURN_INDCR_STS_OFF_CHOICE (0u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_TURN_INDCR_STS_ON_CHOICE (1u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_TURN_INDCR_STS_FLASH_CHOICE (2u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_TURN_INDCR_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_TURN_INDCR_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_TURN_INDCR_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_TURN_INDCR_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_TURN_INDCR_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RI_BODY_BRK_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RI_BODY_BRK_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RI_BODY_BRK_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RI_BODY_BRK_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_POSN_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_POSN_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_POSN_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_POSN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_TURN_INDCR_STS_OFF_CHOICE (0u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_TURN_INDCR_STS_ON_CHOICE (1u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_TURN_INDCR_STS_FLASH_CHOICE (2u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_TURN_INDCR_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_TURN_INDCR_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_TURN_INDCR_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_TURN_INDCR_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_TURN_INDCR_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_LE_TLG_BRK_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_LE_TLG_BRK_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_LE_TLG_BRK_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_LE_TLG_BRK_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_POSN_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_POSN_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_POSN_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_POSN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_TURN_INDCR_STS_OFF_CHOICE (0u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_TURN_INDCR_STS_ON_CHOICE (1u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_TURN_INDCR_STS_FLASH_CHOICE (2u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_TURN_INDCR_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_TURN_INDCR_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_TURN_INDCR_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_TURN_INDCR_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_TURN_INDCR_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_SLMFC_LAMP_STS_HDLAMP_FRNT_CENTR_LE_SIGN_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_SLMFC_LAMP_STS_HDLAMP_FRNT_CENTR_LE_SIGN_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_SLMFC_LAMP_STS_HDLAMP_FRNT_CENTR_LE_SIGN_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_SLMFC_LAMP_STS_HDLAMP_FRNT_CENTR_LE_SIGN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFC_LAMP_STS_HDLAMP_FRNT_CENTR_RI_SIGN_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_SLMFC_LAMP_STS_HDLAMP_FRNT_CENTR_RI_SIGN_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_SLMFC_LAMP_STS_HDLAMP_FRNT_CENTR_RI_SIGN_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_SLMFC_LAMP_STS_HDLAMP_FRNT_CENTR_RI_SIGN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMRC_LAMP_STS_RELAMP_FRNT_CENTR_LE_SIGN_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_SLMRC_LAMP_STS_RELAMP_FRNT_CENTR_LE_SIGN_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_SLMRC_LAMP_STS_RELAMP_FRNT_CENTR_LE_SIGN_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_SLMRC_LAMP_STS_RELAMP_FRNT_CENTR_LE_SIGN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMRC_LAMP_STS_RELAMP_FRNT_CENTR_RI_SIGN_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_SLMRC_LAMP_STS_RELAMP_FRNT_CENTR_RI_SIGN_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_SLMRC_LAMP_STS_RELAMP_FRNT_CENTR_RI_SIGN_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_SLMRC_LAMP_STS_RELAMP_FRNT_CENTR_RI_SIGN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RI_TLG_BRK_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RI_TLG_BRK_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RI_TLG_BRK_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RI_TLG_BRK_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_POSN_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_POSN_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_POSN_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_POSN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_TURN_INDCR_STS_OFF_CHOICE (0u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_TURN_INDCR_STS_ON_CHOICE (1u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_TURN_INDCR_STS_FLASH_CHOICE (2u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_TURN_INDCR_STS_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_TURN_INDCR_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_TURN_INDCR_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_TURN_INDCR_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_TURN_INDCR_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_CCU_COMP_PWR_REQ_CCSF_AGS_OPEN_REQ_UNLOCK_CHOICE (0u)
#define CANI1_NONM_CCU_COMP_PWR_REQ_CCSF_AGS_OPEN_REQ_LOCK_CHOICE (1u)
#define CANI1_NONM_CCU_COMP_PWR_REQ_CCSF_AGS_OPEN_REQ_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_COMP_PWR_REQ_CCSF_AGS_OPEN_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_TEMPERATURE_FBK_ALV_CTR_CCU_TEMPERATURE_FBK_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_ALV_CTR_ZCUF_RLHS_RAIN_HUMIDITY_INF_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_RLHS_RAIN_FALL_STS_NO_RAIN_CHOICE (0u)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_RLHS_RAIN_FALL_STS_LIGHT_RAIN_CHOICE (1u)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_RLHS_RAIN_FALL_STS_MODERATE_RAIN_CHOICE (2u)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_RLHS_RAIN_FALL_STS_HEAVY_RAIN_CHOICE (3u)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_RLHS_RAIN_FALL_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_RLHS_RAIN_FALL_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_RLHS_RAIN_FALL_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_RLHS_RAIN_FALL_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_ADAS_RVC_INFO_RVC_RE_BLIND_SPOT_STS_REAR_BLIND_SPOT_CLEAR_CHOICE (0u)
#define CANI1_NONM_ADAS_RVC_INFO_RVC_RE_BLIND_SPOT_STS_REAR_BLIND_SPOT_OBST_CHOICE (1u)
#define CANI1_NONM_ADAS_RVC_INFO_RVC_RE_BLIND_SPOT_STS_REAR_BLIND_SPOT_ERROR_CHOICE (6u)
#define CANI1_NONM_ADAS_RVC_INFO_RVC_RE_BLIND_SPOT_STS_REAR_BLIND_SPOT_SNA_CHOICE (7u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_IVI_ACCHR_CHRGGUN_UNLCK_CMD_UNLOCK_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_IVI_ACCHR_CHRGGUN_UNLCK_CMD_LOCK_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_IVI_ACCHR_CHRGGUN_UNLCK_CMD_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_IVI_ACCHR_CHRGGUN_UNLCK_CMD_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_CHG_STOP_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_CHG_STOP_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_CHG_STOP_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_CHG_STOP_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_PEAK_HOUR_MNGT_ENA_DISABLE_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_PEAK_HOUR_MNGT_ENA_ENABLE_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_PEAK_HOUR_MNGT_ENA_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_PEAK_HOUR_MNGT_ENA_NOT__AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_ENA_SDLE_CHRGN_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_ENA_SDLE_CHRGN_ON_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_ENA_SDLE_CHRGN_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_ENA_SDLE_CHRGN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_AWD_WHL_DRV_MODE_SELN_RWD_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_AWD_WHL_DRV_MODE_SELN_AWD_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_AWD_WHL_DRV_MODE_SELN_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_AWD_WHL_DRV_MODE_SELN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ESHIFT_TOW_MODE_REQ_DEACTIVATED_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ESHIFT_TOW_MODE_REQ_ACTIVATED_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ESHIFT_TOW_MODE_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ESHIFT_TOW_MODE_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_VALET_MODE_ACVN_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_VALET_MODE_ACVN_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_VALET_MODE_ACVN_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_VALET_MODE_ACVN_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_WASH_MODE_ACVN_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_WASH_MODE_ACVN_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_WASH_MODE_ACVN_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_WASH_MODE_ACVN_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_SRV_MODE_SPD_LIM_ERROR_CHOICE (65534u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_SRV_MODE_SPD_LIM_NOT__AVAILABLE_CHOICE (65535u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_SHOWROOM_MODE_ACVN_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_SHOWROOM_MODE_ACVN_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_SHOWROOM_MODE_ACVN_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_SHOWROOM_MODE_ACVN_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_SRV_SPD_OVRR_ENA_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_SRV_SPD_OVRR_ENA_ON_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_SRV_SPD_OVRR_ENA_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_SRV_SPD_OVRR_ENA_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_TRSPT_MODE_ACVN_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_TRSPT_MODE_ACVN_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_TRSPT_MODE_ACVN_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_TRSPT_MODE_ACVN_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_VALET_MODE_SPD_LIM_ERROR_CHOICE (65534u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_VALET_MODE_SPD_LIM_NOT__AVAILABLE_CHOICE (65535u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_DRV_MODE_SELN_REQ_ECO_PLUS_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_DRV_MODE_SELN_REQ_ECO_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_DRV_MODE_SELN_REQ_NORMAL__CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_DRV_MODE_SELN_REQ_SPORT_CHOICE (3u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_DRV_MODE_SELN_REQ_SPORTS_PLUS_CHOICE (4u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_DRV_MODE_SELN_REQ_SAND_OFF__CHOICE (5u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_DRV_MODE_SELN_REQ_RESERVE_CHOICE (6u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_DRV_MODE_SELN_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_EPT_FEATURE_INFO_CREGB_REGEN_LVL_REQ_LEVEL0_CHOICE (0u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_CREGB_REGEN_LVL_REQ_LEVEL1_CHOICE (1u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_CREGB_REGEN_LVL_REQ_LEVEL2_CHOICE (2u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_CREGB_REGEN_LVL_REQ_LEVEL3_CHOICE (3u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_CREGB_REGEN_LVL_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_CREGB_REGEN_LVL_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_CREGB_REGEN_LVL_REQ_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_CREGB_REGEN_LVL_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_OPENING_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_OPENED_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_CLOSING_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_CLOSED_CHOICE (3u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_INTERMEDIATE_CHOICE (4u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_OBSTACLE_DETECTED_CHOICE (5u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_ANTIPINCH_DETECTED_CHOICE (6u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_BASIC_POSITION_STORED_CHOICE (7u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_MECHANICAL_END_POSITION_LEARNED_CHOICE (8u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_REQUEST_REJECTED_CHOICE (9u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_VEHICLE_SPEED_THRESHOLD_CROSSED_CHOICE (10u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_RESERVED_11_CHOICE (11u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_RESERVED_12_CHOICE (12u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_RESERVED_13_CHOICE (13u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_ERROR_CHOICE (14u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_NOT_AVAILABLE_CHOICE (15u)

#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_NMLZN_STS_DENORMALISED_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_NMLZN_STS_NORMALISED_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_NMLZN_STS_LEARNING_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_NMLZN_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_AJAR_STS_OPEN_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_AJAR_STS_CLOSED_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_AJAR_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_AJAR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_STS_LOW_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_STS_MEDIUM_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_STS_HIGH_CHOICE (3u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_STS_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_STS_INVALID_CHOICE (7u)

#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_STS_LOW_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_STS_MEDIUM_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_STS_HIGH_CHOICE (3u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_STS_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_STS_INVALID_CHOICE (7u)

#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_CSHN_FAN_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_CSHN_FAN_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_CSHN_FAN_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_CSHN_FAN_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_SQUB_FAN_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_SQUB_FAN_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_SQUB_FAN_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_SQUB_FAN_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_CSHN_FAN_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_CSHN_FAN_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_CSHN_FAN_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_CSHN_FAN_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_SQUB_FAN_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_SQUB_FAN_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_SQUB_FAN_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_SQUB_FAN_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_CHRGR_PORT_LOCK_UNLCK_STS_UNLOCK_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_CHRGR_PORT_LOCK_UNLCK_STS_LOCK_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_CHRGR_PORT_LOCK_UNLCK_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_CHRGR_PORT_LOCK_UNLCK_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_CHRGR_PORT_AJAR_STS_OPEN_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_CHRGR_PORT_AJAR_STS_CLOSED_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_CHRGR_PORT_AJAR_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_CHRGR_PORT_AJAR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_RI_LICE_PLATE_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_RI_LICE_PLATE_STS_ON_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_RI_LICE_PLATE_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_RI_LICE_PLATE_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_LE_LICE_PLATE_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_LE_LICE_PLATE_STS_ON_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_LE_LICE_PLATE_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_LE_LICE_PLATE_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_FOG_LAMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_FOG_LAMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_FOG_LAMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_FOG_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_CHMSL_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_CHMSL_STS_ON_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_CHMSL_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_CHMSL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_REV_LMP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_REV_LMP_STS_ON_CHOICE (1u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_REV_LMP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_REV_LMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_FAULT_STS_ALV_CTR_CCU_FAULT_STS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRNT_BLOWR_FLT_STS_NO_FAULT_CHOICE (0u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRNT_BLOWR_FLT_STS_OPEN_CIRCUIT_CHOICE (1u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRNT_BLOWR_FLT_STS_SHORT_TO_POWER_CHOICE (2u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRNT_BLOWR_FLT_STS_OVER_CURRENT_CHOICE (3u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRNT_BLOWR_FLT_STS_OVER_TEMPERATURE_CHOICE (4u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRNT_BLOWR_FLT_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRNT_BLOWR_FLT_STS_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRNT_BLOWR_FLT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_CCU_FAULT_STS_CCSR_RE_BLOWR_FLT_STS_NO_FAULT_CHOICE (0u)
#define CANI1_NONM_CCU_FAULT_STS_CCSR_RE_BLOWR_FLT_STS_OPEN_CIRCUIT_CHOICE (1u)
#define CANI1_NONM_CCU_FAULT_STS_CCSR_RE_BLOWR_FLT_STS_SHORT_TO_POWER_CHOICE (2u)
#define CANI1_NONM_CCU_FAULT_STS_CCSR_RE_BLOWR_FLT_STS_OVER_CURRENT_CHOICE (3u)
#define CANI1_NONM_CCU_FAULT_STS_CCSR_RE_BLOWR_FLT_STS_OVER_TEMPERATURE_CHOICE (4u)
#define CANI1_NONM_CCU_FAULT_STS_CCSR_RE_BLOWR_FLT_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_CCU_FAULT_STS_CCSR_RE_BLOWR_FLT_STS_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_CCU_FAULT_STS_CCSR_RE_BLOWR_FLT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_CCU_FAULT_STS_CCSF_IONISER_FLT_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_IONISER_FLT_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_IONISER_FLT_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_IONISER_FLT_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRAGN_CONN_LOSS_NORMAL_CHOICE (0u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRAGN_CONN_LOSS_FAULTY_CHOICE (1u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRAGN_CONN_LOSS_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRAGN_CONN_LOSS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRGRNC_FLT_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRGRNC_FLT_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRGRNC_FLT_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRGRNC_FLT_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_FAULT_STS_CCSF_IONISER_CONN_LOSS_NORMAL_CHOICE (0u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_IONISER_CONN_LOSS_FAULTY_CHOICE (1u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_IONISER_CONN_LOSS_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_IONISER_CONN_LOSS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_FAULT_STS_CCSF_DEMIST_FLAP_FLT_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_DEMIST_FLAP_FLT_STS_OPEN_CIRCUIT_CHOICE (1u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_DEMIST_FLAP_FLT_STS_SHORT_TO_POWER_CHOICE (2u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_DEMIST_FLAP_FLT_STS_SHORT_TO_GROUND_CHOICE (3u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_DEMIST_FLAP_FLT_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_DEMIST_FLAP_FLT_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_DEMIST_FLAP_FLT_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_CCU_FAULT_STS_CCSF_DEMIST_FLAP_FLT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_CCU_CLIM_SYS_STS_ALV_CTR_CCU_CLIM_SYS_STS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_MODE_SELN_FB_FACE_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_MODE_SELN_FB_FACE_FOOT_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_MODE_SELN_FB_FOOT_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_MODE_SELN_FB_FOOT_SIDE_WINDOW_DEMIST_CHOICE (3u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_MODE_SELN_FB_SIDE_WINDOW_DEMIST_CHOICE (4u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_MODE_SELN_FB_DIFFUSE_AMBIENT_CHOICE (5u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_MODE_SELN_FB_DIFFUSE_AMBIENT_FACE_CHOICE (6u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_MODE_SELN_FB_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_FRNT_BLOWR_LVL_FB_LEVEL0_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_FRNT_BLOWR_LVL_FB_LEVEL1_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_FRNT_BLOWR_LVL_FB_LEVEL2_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_FRNT_BLOWR_LVL_FB_LEVEL3_CHOICE (3u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_FRNT_BLOWR_LVL_FB_LEVEL4_CHOICE (4u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_FRNT_BLOWR_LVL_FB_LEVEL5_CHOICE (5u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_FRNT_BLOWR_LVL_FB_ERROR_CHOICE (6u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_FRNT_BLOWR_LVL_FB_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_IONISER_ON_OFF_STS_OFF_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_IONISER_ON_OFF_STS_ON_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_IONISER_ON_OFF_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_IONISER_ON_OFF_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_DRVR_DEMIST_RCMN_NOT_REQUESTED_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_DRVR_DEMIST_RCMN_REQUESTED_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_DRVR_DEMIST_RCMN_ERROR_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_DRVR_DEMIST_RCMN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSR_RE_BLOWR_LVL_FB_LEVEL0_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSR_RE_BLOWR_LVL_FB_LEVEL1_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSR_RE_BLOWR_LVL_FB_LEVEL2_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSR_RE_BLOWR_LVL_FB_LEVEL3_CHOICE (3u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSR_RE_BLOWR_LVL_FB_LEVEL4_CHOICE (4u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSR_RE_BLOWR_LVL_FB_LEVEL5_CHOICE (5u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSR_RE_BLOWR_LVL_FB_ERROR_CHOICE (6u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSR_RE_BLOWR_LVL_FB_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CEN_LE_VEN_DIR_STS_NORMALLY_OUTWARDS_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CEN_LE_VEN_DIR_STS_HARMONICS_UP_DOWN_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CEN_LE_VEN_DIR_STS_HARMONICS_SIDE_BY_SIDE_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CEN_LE_VEN_DIR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CEN_RI_VEN_DIR_STS_NORMALLY_OUTWARDS_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CEN_RI_VEN_DIR_STS_HARMONICS_UP_DOWN_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CEN_RI_VEN_DIR_STS_HARMONICS_SIDE_BY_SIDE_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CEN_RI_VEN_DIR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_PURE_AIR_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_POLLUTION_LEVEL1_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_POLLUTION_LEVEL2_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_POLLUTION_LEVEL3_CHOICE (3u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_POLLUTION_LEVEL4_CHOICE (4u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_POLLUTION_LEVEL5_CHOICE (5u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_POLLUTION_LEVEL6_CHOICE (6u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_POLLUTION_LEVEL7_CHOICE (7u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_POLLUTION_LEVEL8_CHOICE (8u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_POLLUTION_LEVEL9_CHOICE (9u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_POLLUTION_LEVEL10_CHOICE (10u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_RESERVE_11_CHOICE (11u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_RESERVE_12_CHOICE (12u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_FAILURE_MODE_CHOICE (13u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_INITIAL_MODE_CHOICE (14u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_NOT_AVAILABLE_CHOICE (15u)

#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_RCL_MOD_FB_OFF_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_RCL_MOD_FB_ON_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_RCL_MOD_FB_ERROR_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_RCL_MOD_FB_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_AC_OP_MODE_STS_ALV_CTR_CCU_AC_OP_MODE_STS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_AC_AUTO_MODE_STS_OFF_CHOICE (0u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_AC_AUTO_MODE_STS_ON_CHOICE (1u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_AC_AUTO_MODE_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_AC_AUTO_MODE_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_AC_LOW_PWR_MODE_STS_OFF_CHOICE (0u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_AC_LOW_PWR_MODE_STS_ON_CHOICE (1u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_AC_LOW_PWR_MODE_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_AC_LOW_PWR_MODE_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_DEMIST_DEFRST_STS_OFF_CHOICE (0u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_DEMIST_DEFRST_STS_ON_CHOICE (1u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_DEMIST_DEFRST_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_DEMIST_DEFRST_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_FRNT_AC_ON_OFF_STS_OFF_CHOICE (0u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_FRNT_AC_ON_OFF_STS_ON_CHOICE (1u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_FRNT_AC_ON_OFF_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_FRNT_AC_ON_OFF_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_FRNT_AC_OP_MODE_STS_AC_OFF_CHOICE (0u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_FRNT_AC_OP_MODE_STS_AC_COOLING_ON_CHOICE (1u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_FRNT_AC_OP_MODE_STS_AC_HEATING_ON_CHOICE (2u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_FRNT_AC_OP_MODE_STS_AC_COOLING_FAULT_CHOICE (3u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_FRNT_AC_OP_MODE_STS_AC_HEATING_FAULT_CHOICE (4u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_FRNT_AC_OP_MODE_STS_AC_LOW_POWER_OPERATION_CHOICE (5u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_FRNT_AC_OP_MODE_STS_AC_OFF_BLOWER_FAULT_CHOICE (6u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_FRNT_AC_OP_MODE_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_RE_AC_OP_MODE_STS_AC_OFF_CHOICE (0u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_RE_AC_OP_MODE_STS_AC_COOLING_ON_CHOICE (1u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_RE_AC_OP_MODE_STS_AC_COOLING_FAULT_CHOICE (2u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_RE_AC_OP_MODE_STS_AC_LOW_POWER_OPERATION_CHOICE (3u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_RE_AC_OP_MODE_STS_AC_OFF_BLOWER_FAULT_CHOICE (4u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_RE_AC_OP_MODE_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_RE_AC_OP_MODE_STS_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_RE_AC_OP_MODE_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSR_RE_AC_ON_OFF_STS_OFF_CHOICE (0u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSR_RE_AC_ON_OFF_STS_ON_CHOICE (1u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSR_RE_AC_ON_OFF_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSR_RE_AC_ON_OFF_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_ALV_CTR_CCU_CLIM_FRGRNC_STS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_ON_OFF_STS_OFF_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_ON_OFF_STS_ON_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_ON_OFF_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_ON_OFF_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_SELN_STS_FRAGRANCE_SLOT1_CHOICE (0u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_SELN_STS_FRAGRANCE_SLOT2_CHOICE (1u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_SELN_STS_FRAGRANCE_SLOT3_CHOICE (2u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_SELN_STS_FRAGRANCE_SLOT4_CHOICE (3u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_SELN_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_SELN_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_SELN_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_SELN_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_ALV_CTR_PSMD_SEAT_ADJMT_STS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_IN_OUT_POSN_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_IN_OUT_POSN_IN_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_IN_OUT_POSN_OUT_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_IN_OUT_POSN_ERROR_CHOICE (3u)

#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_UP_DWN_POSN_FULLY_UP_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_UP_DWN_POSN_INTERMEDIATE_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_UP_DWN_POSN_FULLY_DOWN_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_UP_DWN_POSN_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_UP_DWN_POSN_OBSTACLE_DETECTED_CHOICE (4u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_UP_DWN_POSN_RESERVED_CHOICE (5u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_UP_DWN_POSN_ERROR_CHOICE (6u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_UP_DWN_POSN_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_SYS_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_SYS_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_SYS_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_SYS_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_STS_FULLY_UP_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_STS_INTERMEDIATE_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_STS_FULLY_DOWN_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_STS_OBSTACLE_DETECTED_CHOICE (4u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_STS_FULLY_UP_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_STS_INTERMEDIATE_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_STS_FULLY_DOWN_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_STS_OBSTACLE_DETECTED_CHOICE (4u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_ADJMT_STS_IN_PROGRESS_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_ADJMT_STS_COMPLETED_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_ADJMT_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_ADJMT_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_FRNT_BACK_MOT_STS_FULLY_FORWARD_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_FRNT_BACK_MOT_STS_INTERMEDIATE_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_FRNT_BACK_MOT_STS_FULLY_BACKWARD_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_FRNT_BACK_MOT_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_FRNT_BACK_MOT_STS_OBSTACLE_DETECTED_CHOICE (4u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_FRNT_BACK_MOT_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_FRNT_BACK_MOT_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_FRNT_BACK_MOT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_STS_FULLY_UP_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_STS_INTERMEDIATE_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_STS_FULLY_DOWN_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_STS_OBSTACLE_DETECTED_CHOICE (4u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_ALV_CTR_PSMP_SEAT_ADJMT_STS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_IN_OUT_POSN_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_IN_OUT_POSN_IN_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_IN_OUT_POSN_OUT_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_IN_OUT_POSN_ERROR_CHOICE (3u)

#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_UP_DOWN_POSN_FULLY_UP_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_UP_DOWN_POSN_INTERMEDIATE_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_UP_DOWN_POSN_FULLY_DOWN_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_UP_DOWN_POSN_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_UP_DOWN_POSN_OBSTACLE_DETECTED_CHOICE (4u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_UP_DOWN_POSN_RESERVED_CHOICE (5u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_UP_DOWN_POSN_ERROR_CHOICE (6u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_UP_DOWN_POSN_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_SYS_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_SYS_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_SYS_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_SYS_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_STS_FULLY_UP_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_STS_INTERMEDIATE_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_STS_FULLY_DOWN_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_STS_OBSTACLE_DETECTED_CHOICE (4u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_STS__FULLY_UP_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_STS__INTERMEDIATE_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_STS__FULLY_DOWN_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_STS__DENORMALISED_CHOICE (3u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_STS__OBSTACLE_DETECTED_CHOICE (4u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_STS__RESERVED_CHOICE (5u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_STS__ERROR_CHOICE (6u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_STS__NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_ADJMT_STS_IN_PROGRESS_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_ADJMT_STS_COMPLETED_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_ADJMT_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_ADJMT_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_STS_FULLY_FORWARD_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_STS_INTERMEDIATE_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_STS_FULLY_BACKWARD_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_STS_OBSTACLE_DETECTED_CHOICE (4u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_STS_FULLY_UP_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_STS_INTERMEDIATE_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_STS_FULLY_DOWN_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_STS_OBSTACLE_DETECTED_CHOICE (4u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_PSMD_SEAT_POS_STATUS_ALV_CTR_PSMD_SEAT_POS_STATUS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_ALV_CTR_PSMD_SEAT_CMFRT_STATUS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_STS_OFF_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_STS_LOW_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_STS_MEDIUM_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_STS_HIGH_CHOICE (3u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_STS_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_STS_INVALID_CHOICE (7u)

#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_STS_OFF_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_STS_LOW_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_STS_MEDIUM_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_STS_HIGH_CHOICE (3u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_STS_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_STS_INVALID_CHOICE (7u)

#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_CSHN_FAN_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_CSHN_FAN_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_CSHN_FAN_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_CSHN_FAN_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_BACK_PAD_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_BACK_PAD_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_BACK_PAD_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_BACK_PAD_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_MASSG_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_MASSG_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_MASSG_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_MASSG_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_CSHN_PAD_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_CSHN_PAD_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_CSHN_PAD_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_CSHN_PAD_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_MASSG_STS_OFF_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_MASSG_STS_ON_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_MASSG_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_MASSG_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_SQUB_FAN_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_SQUB_FAN_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_SQUB_FAN_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_SQUB_FAN_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_ALV_CTR_PSMP_SEAT_CMFRT_STATUS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_STS_OFF_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_STS_LOW_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_STS_MEDIUM_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_STS_HIGH_CHOICE (3u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_STS_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_STS_INVALID_CHOICE (7u)

#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_STS_OFF_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_STS_LOW_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_STS_MEDIUM_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_STS_HIGH_CHOICE (3u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_STS_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_STS_INVALID_CHOICE (7u)

#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_MASSG_STS_OFF_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_MASSG_STS_ON_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_MASSG_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_MASSG_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_SQUB_FAN_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_SQUB_FAN_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_SQUB_FAN_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_SQUB_FAN_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_MASSG_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_MASSG_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_MASSG_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_MASSG_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_CSHN_FAN_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_CSHN_FAN_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_CSHN_FAN_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_CSHN_FAN_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_BACK_PAD_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_BACK_PAD_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_BACK_PAD_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_BACK_PAD_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_CSHN_PAD_FAIL_STS_NORMAL_CHOICE (0u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_CSHN_PAD_FAIL_STS_FAULTY_CHOICE (1u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_CSHN_PAD_FAIL_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_CSHN_PAD_FAIL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_SEAT_POS_STATUS_ALV_CTR_PSMP_SEAT_POS_STATUS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_DCMD_CLOSURE_STS_ALV_CTR_DCMD_CLOSURE_STS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_OPENING_CHOICE (0u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_OPENED_CHOICE (1u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_CLOSING_CHOICE (2u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_CLOSED_CHOICE (3u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_INTERMEDIATE_CHOICE (4u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_OBSTACLE_DETECTED_CHOICE (5u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_ANTIPINCH_DETECTED_CHOICE (6u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_BASIC_POSITION_STORED_CHOICE (7u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_MECHANICAL_END_POSITION_LEARNED_CHOICE (8u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_REQUEST_REJECTED_CHOICE (9u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_VEHICLE_SPEED_THRESHOLD_CROSSED_CHOICE (10u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_RESERVED_11_CHOICE (11u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_RESERVED_12_CHOICE (12u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_RESERVED_13_CHOICE (13u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_ERROR_CHOICE (14u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_NOT_AVAILABLE_CHOICE (15u)

#define CANI1_NONM_DCMD_CLOSURE_STS_CEN_LOCK_DRVR_DOOR_LOCK_UNLCK_STS_UNLOCK_CHOICE (0u)
#define CANI1_NONM_DCMD_CLOSURE_STS_CEN_LOCK_DRVR_DOOR_LOCK_UNLCK_STS_LOCK_CHOICE (1u)
#define CANI1_NONM_DCMD_CLOSURE_STS_CEN_LOCK_DRVR_DOOR_LOCK_UNLCK_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_DCMD_CLOSURE_STS_CEN_LOCK_DRVR_DOOR_LOCK_UNLCK_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_NMLZN_STS_DENORMALISED_CHOICE (0u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_NMLZN_STS_NORMALISED_CHOICE (1u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_NMLZN_STS_LEARNING_CHOICE (2u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_NMLZN_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMD_CLOSURE_STS_CEN_LOCK_DRVR_DOOR_AJAR_STS_OPEN_CHOICE (0u)
#define CANI1_NONM_DCMD_CLOSURE_STS_CEN_LOCK_DRVR_DOOR_AJAR_STS_CLOSED_CHOICE (1u)
#define CANI1_NONM_DCMD_CLOSURE_STS_CEN_LOCK_DRVR_DOOR_AJAR_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_DCMD_CLOSURE_STS_CEN_LOCK_DRVR_DOOR_AJAR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMD_CLOSURE_STS_PWIND_DRV_WNDW_STS_FULLY_CLOSE_CHOICE (0u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWIND_DRV_WNDW_STS_PARTIALLY_OPEN_CHOICE (1u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWIND_DRV_WNDW_STS_FULLY_OPEN_CHOICE (2u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWIND_DRV_WNDW_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWIND_DRV_WNDW_STS_VENTILATION_POSITION_CHOICE (4u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWIND_DRV_WNDW_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWIND_DRV_WNDW_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_DCMD_CLOSURE_STS_PWIND_DRV_WNDW_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_VCU_STS_ENGMT_LIMPHM_STS_DISABLE_CHOICE (0u)
#define CANI1_NONM_VCU_STS_ENGMT_LIMPHM_STS_ENABLE_CHOICE (1u)
#define CANI1_NONM_VCU_STS_ENGMT_LIMPHM_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_STS_ENGMT_LIMPHM_STS_NOT__AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_STS_FSCHG_CHG_AUTHEN_STS_NOT_AUTHENTICATING_CHOICE (0u)
#define CANI1_NONM_VCU_STS_FSCHG_CHG_AUTHEN_STS_AUTHENTICATING_CHOICE (1u)
#define CANI1_NONM_VCU_STS_FSCHG_CHG_AUTHEN_STS_AUTHENTICATION_SUCCESS_CHOICE (2u)
#define CANI1_NONM_VCU_STS_FSCHG_CHG_AUTHEN_STS_AUTHENTICATION_FAILED_CHOICE (3u)
#define CANI1_NONM_VCU_STS_FSCHG_CHG_AUTHEN_STS_RESERVE_4_CHOICE (4u)
#define CANI1_NONM_VCU_STS_FSCHG_CHG_AUTHEN_STS_RESERVE_5_CHOICE (5u)
#define CANI1_NONM_VCU_STS_FSCHG_CHG_AUTHEN_STS_RESERVE_6_CHOICE (6u)
#define CANI1_NONM_VCU_STS_FSCHG_CHG_AUTHEN_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_VCU_STS_ACCHG_CHG_AUTHN_STS_NOT_AUTHENTICATING_CHOICE (0u)
#define CANI1_NONM_VCU_STS_ACCHG_CHG_AUTHN_STS_AUTHENTICATING_CHOICE (1u)
#define CANI1_NONM_VCU_STS_ACCHG_CHG_AUTHN_STS_AUTHENTICATION_SUCCESS_CHOICE (2u)
#define CANI1_NONM_VCU_STS_ACCHG_CHG_AUTHN_STS_AUTHENTICATION_FAILED_CHOICE (3u)
#define CANI1_NONM_VCU_STS_ACCHG_CHG_AUTHN_STS_RESERVE_4_CHOICE (4u)
#define CANI1_NONM_VCU_STS_ACCHG_CHG_AUTHN_STS_RESERVE_5_CHOICE (5u)
#define CANI1_NONM_VCU_STS_ACCHG_CHG_AUTHN_STS_RESERVE_6_CHOICE (6u)
#define CANI1_NONM_VCU_STS_ACCHG_CHG_AUTHN_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_VCU_STS_THMGT_THERM_FLT_STS_NOT_DETECTED_CHOICE (0u)
#define CANI1_NONM_VCU_STS_THMGT_THERM_FLT_STS_DETECTED_CHOICE (1u)
#define CANI1_NONM_VCU_STS_THMGT_THERM_FLT_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_VCU_STS_THMGT_THERM_FLT_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_AC__CHARGE__INHIBITION__REQUEST_CHOICE (1u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_FAST__CHARGE__INHIBITION__REQUEST_CHOICE (2u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_EMERGENCY__SHUTDOWN__REQUEST_CHOICE (3u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_REGEN__BRAKE__DISABLE__REQUEST_CHOICE (4u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_HV__POWER__REDUCTION__REQUEST_CHOICE (5u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_LIMP__HOME__MODE_CHOICE (6u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_DRIVE__INHIBITION__REQUEST_CHOICE (7u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_MCU_F__INHIBITION_CHOICE (8u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_MCU_R__INHIBITION_CHOICE (9u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_HV__POWER__DOWN__REQUEST_CHOICE (10u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_SPEED__LIMITATION__REQUEST_CHOICE (11u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_BATTERY_CHARGE__POWER__REDUCTION_CHOICE (12u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_DC_DC__DISABLE_CHOICE (13u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_MCU_F__POWER__REDUCTION_CHOICE (14u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_MCU_R__POWER__REDUCTION_CHOICE (15u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_NEUTRAL__REQUEST_CHOICE (16u)
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_SNA_CHOICE (255u)

#define CANI1_NONM_VCU_STS_HVSCO_HV_SYS_STS_NOT_READY_CHOICE (0u)
#define CANI1_NONM_VCU_STS_HVSCO_HV_SYS_STS_HV_ON_CHOICE (1u)
#define CANI1_NONM_VCU_STS_HVSCO_HV_SYS_STS_READY_TO_DRIVE__CHOICE (2u)
#define CANI1_NONM_VCU_STS_HVSCO_HV_SYS_STS_CHARGING_CHOICE (3u)
#define CANI1_NONM_VCU_STS_HVSCO_HV_SYS_STS_ERROR_CHOICE (4u)
#define CANI1_NONM_VCU_STS_HVSCO_HV_SYS_STS_POWER_DOWN_CHOICE (5u)
#define CANI1_NONM_VCU_STS_HVSCO_HV_SYS_STS_EMERGENCY_SUTDOWN_CHOICE (6u)
#define CANI1_NONM_VCU_STS_HVSCO_HV_SYS_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_DCMP_CLOSURE_STS_ALV_CTR_DCMP_CLOSURE_STS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_DCMP_CLOSURE_STS_CEN_LOCK_PASS_DOOR_AJAR_STS_OPEN_CHOICE (0u)
#define CANI1_NONM_DCMP_CLOSURE_STS_CEN_LOCK_PASS_DOOR_AJAR_STS_CLOSED_CHOICE (1u)
#define CANI1_NONM_DCMP_CLOSURE_STS_CEN_LOCK_PASS_DOOR_AJAR_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_DCMP_CLOSURE_STS_CEN_LOCK_PASS_DOOR_AJAR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMP_CLOSURE_STS_CEN_LOCK_PASS_DOOR_LOCK_UNLCK_STS_UNLOCK_CHOICE (0u)
#define CANI1_NONM_DCMP_CLOSURE_STS_CEN_LOCK_PASS_DOOR_LOCK_UNLCK_STS_LOCK_CHOICE (1u)
#define CANI1_NONM_DCMP_CLOSURE_STS_CEN_LOCK_PASS_DOOR_LOCK_UNLCK_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_DCMP_CLOSURE_STS_CEN_LOCK_PASS_DOOR_LOCK_UNLCK_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_OPENING_CHOICE (0u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_OPENED_CHOICE (1u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_CLOSING_CHOICE (2u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_CLOSED_CHOICE (3u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_INTERMEDIATE_CHOICE (4u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_OBSTACLE_DETECTED_CHOICE (5u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_ANTIPINCH_DETECTED_CHOICE (6u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_BASIC_POSITION_STORED_CHOICE (7u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_MECHANICAL_END_POSITION_LEARNED_CHOICE (8u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_REQUEST_REJECTED_CHOICE (9u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_VEHICLE_SPEED_THRESHOLD_CROSSED_CHOICE (10u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_RESERVED_11_CHOICE (11u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_RESERVED_12_CHOICE (12u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_RESERVED_13_CHOICE (13u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_ERROR_CHOICE (14u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_NOT_AVAILABLE_CHOICE (15u)

#define CANI1_NONM_DCMP_CLOSURE_STS_PWIND_PASS_WNDW_STS_FULLY_CLOSE_CHOICE (0u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWIND_PASS_WNDW_STS_PARTIALLY_OPEN_CHOICE (1u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWIND_PASS_WNDW_STS_FULLY_OPEN_CHOICE (2u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWIND_PASS_WNDW_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWIND_PASS_WNDW_STS_VENTILATION_POSITION_CHOICE (4u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWIND_PASS_WNDW_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWIND_PASS_WNDW_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWIND_PASS_WNDW_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_NMLZN_STS_DENORMALISED_CHOICE (0u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_NMLZN_STS_NORMALISED_CHOICE (1u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_NMLZN_STS_LEARNING_CHOICE (2u)
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_NMLZN_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMRR_CLOSURE_STS_ALV_CTR_DCMRR_CLOSURE_STS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_DCMRR_CLOSURE_STS_CEN_LOCK_RE_RI_DOOR_LOCK_UNLCK_STS_UNLOCK_CHOICE (0u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_CEN_LOCK_RE_RI_DOOR_LOCK_UNLCK_STS_LOCK_CHOICE (1u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_CEN_LOCK_RE_RI_DOOR_LOCK_UNLCK_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_CEN_LOCK_RE_RI_DOOR_LOCK_UNLCK_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMRR_CLOSURE_STS_PWIND_RE_RI_WNDW_STS_FULLY_CLOSE_CHOICE (0u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_PWIND_RE_RI_WNDW_STS_PARTIALLY_OPEN_CHOICE (1u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_PWIND_RE_RI_WNDW_STS_FULLY_OPEN_CHOICE (2u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_PWIND_RE_RI_WNDW_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_PWIND_RE_RI_WNDW_STS_VENTILATION_POSITION_CHOICE (4u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_PWIND_RE_RI_WNDW_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_PWIND_RE_RI_WNDW_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_DCMRR_CLOSURE_STS_PWIND_RE_RI_WNDW_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_DCMRL_CLOSURE_STS_ALV_CTR_DCMRL_CLOSURE_STS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_DCMRL_CLOSURE_STS_CEN_LOCK_RE_LE_DOOR_LOCK_UNLCK_STS_UNLOCK_CHOICE (0u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_CEN_LOCK_RE_LE_DOOR_LOCK_UNLCK_STS_LOCK_CHOICE (1u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_CEN_LOCK_RE_LE_DOOR_LOCK_UNLCK_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_CEN_LOCK_RE_LE_DOOR_LOCK_UNLCK_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMRL_CLOSURE_STS_CEN_LOCK_RE_LE_DOOR_AJAR_STS_OPEN_CHOICE (0u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_CEN_LOCK_RE_LE_DOOR_AJAR_STS_CLOSED_CHOICE (1u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_CEN_LOCK_RE_LE_DOOR_AJAR_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_CEN_LOCK_RE_LE_DOOR_AJAR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMRL_CLOSURE_STS_PWIND_RE_LE_WNDW_STS_FULLY_CLOSE_CHOICE (0u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_PWIND_RE_LE_WNDW_STS_PARTIALLY_OPEN_CHOICE (1u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_PWIND_RE_LE_WNDW_STS_FULLY_OPEN_CHOICE (2u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_PWIND_RE_LE_WNDW_STS_DENORMALISED_CHOICE (3u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_PWIND_RE_LE_WNDW_STS_VENTILATION_POSITION_CHOICE (4u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_PWIND_RE_LE_WNDW_STS_RESERVED_CHOICE (5u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_PWIND_RE_LE_WNDW_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_DCMRL_CLOSURE_STS_PWIND_RE_LE_WNDW_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_PARK_POS_STS_POSITION_NOT_DEFINE_CHOICE (0u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_PARK_POS_STS_OUT_OF_PARK_POSITION_CHOICE (1u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_PARK_POS_STS_IN_PARK_POSITION_CHOICE (2u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_PARK_POS_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_SER_POS_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_SER_POS_STS_ON_CHOICE (1u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_SER_POS_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_SER_POS_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_STS_ON_CHOICE (1u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_PARK_POS_STS_POSITION_NOT_DEFINE_CHOICE (0u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_PARK_POS_STS_OUT_OF_PARK_POSITION_CHOICE (1u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_PARK_POS_STS_IN_PARK_POSITION_CHOICE (2u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_PARK_POS_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_SER_POS_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_SER_POS_STS_ON_CHOICE (1u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_SER_POS_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_SER_POS_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_STS_ON_CHOICE (1u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_STS_ON_CHOICE (1u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_FLUID_LEVEL_STS_OFF_CHOICE (0u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_FLUID_LEVEL_STS_LOW_CHOICE (1u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_FLUID_LEVEL_STS_MEDIUM_CHOICE (2u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_FLUID_LEVEL_STS_HIGH_CHOICE (3u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_FLUID_LEVEL_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_FLUID_LEVEL_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_FLUID_LEVEL_STS_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_FLUID_LEVEL_STS_INVALID_CHOICE (7u)

#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_NO_FAULT_CHOICE (0u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_LOW_TEMP_WARN_CHOICE (1u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_LOSS_COM_WARN_CHOICE (2u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_OVERHEAT_WARN_CHOICE (3u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_OVERLOAD_WARN_CHOICE (4u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_BLOCKED_POSITION_ERR_CHOICE (5u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_LOAD_DUMP_ERR_CHOICE (6u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_MAX_CURRENT_ERR_CHOICE (7u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_NO_CURRENT_ERR_CHOICE (8u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_OVERLOAD_ERR_CHOICE (9u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_OVER_VOLTAGE_ERR_CHOICE (10u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_POSITION_SENSOR_ERR_CHOICE (11u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_RESPONSE_ERR_CHOICE (12u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_SHORT_CIRCUIT_ERR_CHOICE (13u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_UNDERVOLTAGE_ERR_CHOICE (14u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_NOT_AVAILABLE_CHOICE (15u)

#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_NO_FAULT_CHOICE (0u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_LOW_TEMP_WARN_CHOICE (1u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_LOSS_COM_WARN_CHOICE (2u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_OVERHEAT_WARN_CHOICE (3u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_OVERLOAD_WARN_CHOICE (4u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_BLOCKED_POSITION_ERR_CHOICE (5u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_LOAD_DUMP_ERR_CHOICE (6u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_MAX_CURRENT_ERR_CHOICE (7u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_NO_CURRENT_ERR_CHOICE (8u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_OVERLOAD_ERR_CHOICE (9u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_OVER_VOLTAGE_ERR_CHOICE (10u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_POSITION_SENSOR_ERR_CHOICE (11u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_RESPONSE_ERR_CHOICE (12u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_SHORT_CIRCUIT_ERR_CHOICE (13u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_UNDERVOLTAGE_ERR_CHOICE (14u)
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_NOT_AVAILABLE_CHOICE (15u)

#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_ALV_CTR_ZCUF_CEN_LOCK_INFO_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_C_APP_LOCK_UNLCK_ST_UNLOCK_CHOICE (0u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_C_APP_LOCK_UNLCK_ST_LOCK_CHOICE (1u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_C_APP_LOCK_UNLCK_ST_ERROR_CHOICE (2u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_C_APP_LOCK_UNLCK_ST_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_LOCK_UNLCK_STS_UNLOCKFROM_OUST_SIDE_CHOICE (0u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_LOCK_UNLCK_STS_UNLOCKFROM_IN_SIDE_CHOICE (1u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_LOCK_UNLCK_STS_LOCK_FROM_OUT_SIDE_CHOICE (2u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_LOCK_UNLCK_STS_LOCK_FROM_IN_SIDE_CHOICE (3u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_LOCK_UNLCK_STS_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_LOCK_UNLCK_STS_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_LOCK_UNLCK_STS_ERROR_CHOICE (6u)
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_LOCK_UNLCK_STS_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_ALV_CTR_ACM_ACTV_TRACKING_STATUS_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_SEAT_TRACK_POS_PASS_NOTLATCHED_CHOICE (0u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_SEAT_TRACK_POS_PASS_LATCHED_CHOICE (1u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_SEAT_TRACK_POS_PASS_ERROR_CHOICE (2u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_SEAT_TRACK_POS_PASS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_SEAT_TRACK_POS_DRVR_NOTLATCHED_CHOICE (0u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_SEAT_TRACK_POS_DRVR_LATCHED_CHOICE (1u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_SEAT_TRACK_POS_DRVR_ERROR_CHOICE (2u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_SEAT_TRACK_POS_DRVR_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_PASS_AIRBG_DEAC_STS_NOT_DEACTIVATED_CHOICE (0u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_PASS_AIRBG_DEAC_STS_DEACTIVATED_CHOICE (1u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_PASS_AIRBG_DEAC_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_PASS_AIRBG_DEAC_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_DR_WNDW_CNTR_ALV_CTR_IVI_DR_WNDW_CNTR_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_IVI_DR_WNDW_CNTR_CEN_LOCK_AUDIO_VISUAL_CFG_VISUAL_CHOICE (0u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_CEN_LOCK_AUDIO_VISUAL_CFG_AUDIO_CHOICE (1u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_CEN_LOCK_AUDIO_VISUAL_CFG_BOTH_ENABLE_CHOICE (2u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_CEN_LOCK_AUDIO_VISUAL_CFG_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWR_SD_ST_LE_EXTND_RTRACT_REQ_NOT_AVAILABLE_CHOICE (0u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWR_SD_ST_LE_EXTND_RTRACT_REQ_AVAILABLE_CHOICE (1u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWR_SD_ST_LE_EXTND_RTRACT_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWR_SD_ST_LE_EXTND_RTRACT_REQ_SNA_CHOICE (3u)

#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWR_SD_ST_RI_EXTND_RTRACT_REQ_NOT_AVAILABLE_CHOICE (0u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWR_SD_ST_RI_EXTND_RTRACT_REQ_AVAILABLE_CHOICE (1u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWR_SD_ST_RI_EXTND_RTRACT_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWR_SD_ST_RI_EXTND_RTRACT_REQ_SNA_CHOICE (3u)

#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWIND_WNDW_UP_DWN_USR_REQ_AUTO_UP_CHOICE (0u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWIND_WNDW_UP_DWN_USR_REQ_AUTO_DOWN_CHOICE (1u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWIND_WNDW_UP_DWN_USR_REQ_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWIND_WNDW_UP_DWN_USR_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MFS_SWITCH_REQ_ALV_CTR_MFS_SWITCH_REQ_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_UP_PRESS_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_DOWN_PRESS_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_LEFT_PRESS_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_RIGHT_PRESS_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_SHORT_PRESS_CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_LONG_PRESS_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_SWITCH_FAULT_CHOICE (7u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_RESERVED_8_CHOICE (8u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_RESERVED_9_CHOICE (9u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_RESERVED_10_CHOICE (10u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_RESERVED_11_CHOICE (11u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_RESERVED_12_CHOICE (12u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_RESERVED_13_CHOICE (13u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_ERROR_CHOICE (14u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_NOT_AVAILABLE_CHOICE (15u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_UP_PRESS_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_DOWN_PRESS_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_LEFT_PRESS_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_RIGHT_PRESS_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_SHORT_PRESS_CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_LONG_PRESS_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_SWITCH_FAULT_CHOICE (7u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_RESERVED_8_CHOICE (8u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_RESERVED_9_CHOICE (9u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_RESERVED_10_CHOICE (10u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_RESERVED_11_CHOICE (11u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_RESERVED_12_CHOICE (12u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_RESERVED_13_CHOICE (13u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_ERROR_CHOICE (14u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_NOT_AVAILABLE_CHOICE (15u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_WIPER_ACVN_CMD_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_WIPER_ACVN_CMD_SHORT_PRESS_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_WIPER_ACVN_CMD_LONGPRESS_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_WIPER_ACVN_CMD_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_WIPER_ACVN_CMD_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_WIPER_ACVN_CMD_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_WIPER_ACVN_CMD_SWITCH__FAULT_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_WIPER_ACVN_CMD_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_WIPER_MENU_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_WIPER_MENU_REQ_SHOW_WIPER_MENU_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_WIPER_MENU_REQ_WIPER_MENU_SELECTION_UP_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_WIPER_MENU_REQ_WIPER_MENU_SELECTION_DOWN_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_WIPER_MENU_REQ_WIPER_MODE_SELECTION_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_WIPER_MENU_REQ_RESERVED_CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_WIPER_MENU_REQ_ERROR_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_WIPER_MENU_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_FAVO_SEL_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_FAVO_SEL_REQ_B_POS_PADDLE_SHORT_PULL_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_FAVO_SEL_REQ_B_NEG_PADDLE_SHORTPULL_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_FAVO_SEL_REQ_B_POS_PADDLE_SHORTFAULT_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_FAVO_SEL_REQ_B_NEG_PADDLE_SHORTFAULT_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_FAVO_SEL_REQ_BOTH_PADDLE_SHOR_PULL__CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_FAVO_SEL_REQ_RESERVED_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_FAVO_SEL_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_GEAR_SHIFT_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_GEAR_SHIFT_REQ_DRIVE_PADDLE_SHORT_PULL_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_GEAR_SHIFT_REQ_REVERSE_PADDLE_SHORT_PULL_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_GEAR_SHIFT_REQ_DRIVE_PADDLE_FAULT_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_GEAR_SHIFT_REQ_REVERSE_PADDLE_FAULT_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_GEAR_SHIFT_REQ_BOTH_PADDLE_SHORT_PULL_CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_GEAR_SHIFT_REQ_RESERVED_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_GEAR_SHIFT_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SWT_REQ_NOT_PRESSED_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SWT_REQ_PRESSED_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SWT_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SWT_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_VOICE_SWT_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_VOICE_SWT_REQ_VOICE_ASSIST_ACTIVATE_SHORTPRESSED_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_VOICE_SWT_REQ_VOICE_ASSIST_ACTIVATE_LONG_PRESS_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_VOICE_SWT_REQ_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_VOICE_SWT_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_VOICE_SWT_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_VOICE_SWT_REQ_ERROR_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_VOICE_SWT_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_HI_BEAM_ACVN_CMD_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_HI_BEAM_ACVN_CMD_SHORT_PRESS_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_HI_BEAM_ACVN_CMD_LONGPRESS_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_HI_BEAM_ACVN_CMD_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_HI_BEAM_ACVN_CMD_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_HI_BEAM_ACVN_CMD_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_HI_BEAM_ACVN_CMD_SWITCH__FAULT_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_HI_BEAM_ACVN_CMD_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_DRV_MOD_SWT_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_DRV_MOD_SWT_REQ_SHORT_PRESS_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_DRV_MOD_SWT_REQ_LONGPRESS_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_DRV_MOD_SWT_REQ_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_DRV_MOD_SWT_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_DRV_MOD_SWT_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_DRV_MOD_SWT_REQ_SWITCH__FAULT_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_DRV_MOD_SWT_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PARK_SWT_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PARK_SWT_REQ_SHORT_PRESS_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PARK_SWT_REQ_LONGPRESS_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PARK_SWT_REQ_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PARK_SWT_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PARK_SWT_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PARK_SWT_REQ_SWITCH__FAULT_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PARK_SWT_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_FAVO_SWT_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_FAVO_SWT_REQ_SHORT_PRESS_CHOICE (1u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_FAVO_SWT_REQ_LONGPRESS_CHOICE (2u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_FAVO_SWT_REQ_RESERVED_3_CHOICE (3u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_FAVO_SWT_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_FAVO_SWT_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_FAVO_SWT_REQ_SWITCH__FAULT_CHOICE (6u)
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_FAVO_SWT_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_ALV_CTR_IVI_DRVR_SEAT_STORED_PROFILE_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_IVI_HVAC_CNTRL_ALV_CTR_IVI_HVAC_CNTRL_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_IVI_HVAC_CNTRL_CCSF_VENT_OP_MODE_REQ_NORMALLY_OUTWARDS_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCSF_VENT_OP_MODE_REQ_HARMONICS_UP_DOWN_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCSF_VENT_OP_MODE_REQ_HARMONICS_SIDE_BY_SIDE_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCSF_VENT_OP_MODE_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_AC_USR_I_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_AC_USR_I_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_AC_USR_I_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_AC_USR_I_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_CNTRL_DEMIR_HEATG_SVMC_REQ_REQ_HEAT_DIS_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_CNTRL_DEMIR_HEATG_SVMC_REQ_REQ_HEAT_ENA_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_CNTRL_DEMIR_HEATG_SVMC_REQ_REQ_HEAT_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_CNTRL_DEMIR_HEATG_SVMC_REQ_REQ_HEAT_SNA_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_BLOWR_LV_USRL_REQ_LEVEL0_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_BLOWR_LV_USRL_REQ_LEVEL1_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_BLOWR_LV_USRL_REQ_LEVEL2_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_BLOWR_LV_USRL_REQ_LEVEL3_CHOICE (3u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_BLOWR_LV_USRL_REQ_LEVEL4_CHOICE (4u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_BLOWR_LV_USRL_REQ_LEVEL5_CHOICE (5u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_BLOWR_LV_USRL_REQ_ERROR_CHOICE (6u)
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_BLOWR_LV_USRL_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_MIN_T_USR_BTN_NOT_PRESSED_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_MIN_T_USR_BTN_PRESSED_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_MIN_T_USR_BTN_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_MIN_T_USR_BTN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_MAX_T_USR_BTN_NOT_AVAILABLE_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_MAX_T_USR_BTN_AVAILABLE_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_MAX_T_USR_BTN_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_MAX_T_USR_BTN_SNA_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_RCL_ON_OFF_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_RCL_ON_OFF_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_RCL_ON_OFF_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_RCL_ON_OFF_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_AC_USR_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_AC_USR_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_AC_USR_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_AC_USR_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_SYNC_T_REQ_SYNC_NOT_REQUESTED_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_SYNC_T_REQ_SYNC_REQUESTED_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_SYNC_T_REQ_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_SYNC_T_REQ_SIGNAL__INVALID_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_ECO_MODE_BTN_USR_REQ_NOT_PRESSED_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_ECO_MODE_BTN_USR_REQ_PRESSED_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_ECO_MODE_BTN_USR_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_ECO_MODE_BTN_USR_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_AC_AUTO_MOD_USR_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_AC_AUTO_MOD_USR_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_AC_AUTO_MOD_USR_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_AC_AUTO_MOD_USR_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_IONISER_USR_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_IONISER_USR_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_IONISER_USR_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_IONISER_USR_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_ACVN_USR_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_ACVN_USR_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_ACVN_USR_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_ACVN_USR_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_DEMIST_DEFRST_USR_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_DEMIST_DEFRST_USR_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_DEMIST_DEFRST_USR_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_DEMIST_DEFRST_USR_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_BLOWR_LVL_USR_REQ_LEVEL0_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_BLOWR_LVL_USR_REQ_LEVEL1_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_BLOWR_LVL_USR_REQ_LEVEL2_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_BLOWR_LVL_USR_REQ_LEVEL3_CHOICE (3u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_BLOWR_LVL_USR_REQ_LEVEL4_CHOICE (4u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_BLOWR_LVL_USR_REQ_LEVEL5_CHOICE (5u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_BLOWR_LVL_USR_REQ_ERROR_CHOICE (6u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_BLOWR_LVL_USR_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AIR_MODE_SELN_USR_REQ_FACE_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AIR_MODE_SELN_USR_REQ_FACE_FOOT_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AIR_MODE_SELN_USR_REQ_FOOT_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AIR_MODE_SELN_USR_REQ_FOOT_SIDE_WINDOW_DEMIST_CHOICE (3u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AIR_MODE_SELN_USR_REQ_SIDE_WINDOW_DEMIST_CHOICE (4u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AIR_MODE_SELN_USR_REQ_DIFFUSE_AMBIENT_CHOICE (5u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AIR_MODE_SELN_USR_REQ_DIFFUSE_AMBIENT_FACE_CHOICE (6u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AIR_MODE_SELN_USR_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRSET_USR_REQ_PRESET1_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRSET_USR_REQ_PRESET2_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRSET_USR_REQ_PRESET3_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRSET_USR_REQ_PRESET4_CHOICE (3u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRSET_USR_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRSET_USR_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRSET_USR_REQ_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRSET_USR_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_SLEN_USR_REQ_FRAGRANCE_SLOT1_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_SLEN_USR_REQ_FRAGRANCE_SLOT2_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_SLEN_USR_REQ_FRAGRANCE_SLOT3_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_SLEN_USR_REQ_FRAGRANCE_SLOT4_CHOICE (3u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_SLEN_USR_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_SLEN_USR_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_SLEN_USR_REQ_ERROR_CHOICE (6u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_SLEN_USR_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRFL_SELN_USR_REQ_PROFILE1_CHOICE (0u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRFL_SELN_USR_REQ_PROFILE2_CHOICE (1u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRFL_SELN_USR_REQ_PROFILE3_CHOICE (2u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRFL_SELN_USR_REQ_PROFILE4_CHOICE (3u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRFL_SELN_USR_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRFL_SELN_USR_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRFL_SELN_USR_REQ_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRFL_SELN_USR_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_CHRGR_PORT_CHRG_PORT_LCK_UNLCK_USR_REQ_UNLOCK_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_CHRGR_PORT_CHRG_PORT_LCK_UNLCK_USR_REQ_LOCK_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_CHRGR_PORT_CHRG_PORT_LCK_UNLCK_USR_REQ_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_CHRGR_PORT_CHRG_PORT_LCK_UNLCK_USR_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_FOLD_UNFOLD_SVMC_REQ_REQ_DEM_FOLD_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_FOLD_UNFOLD_SVMC_REQ_REQ_DEM_UNFOLD_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_FOLD_UNFOLD_SVMC_REQ_REQ_DEM_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_FOLD_UNFOLD_SVMC_REQ_REQ_DEM_SNA_CHOICE (3u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_FOLD_UNFOLD_USR_REQ_REQ_DEM_FOLD_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_FOLD_UNFOLD_USR_REQ_REQ_DEM_UNFOLD_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_FOLD_UNFOLD_USR_REQ_REQ_DEM_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_FOLD_UNFOLD_USR_REQ_REQ_DEM_SNA_CHOICE (3u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_HEATG_SVMC_ENA_NOT_AVAILABLE_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_HEATG_SVMC_ENA_AVAILABLE_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_HEATG_SVMC_ENA_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_HEATG_SVMC_ENA_SNA_CHOICE (3u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_ACTTG_TAIL_GATE_USR_REQ_OPEN_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_ACTTG_TAIL_GATE_USR_REQ_CLOSED_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_ACTTG_TAIL_GATE_USR_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_ACTTG_TAIL_GATE_USR_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_SSADL_AUTO_SPD_LOCK_ON_OFF_TYP_STS_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_SSADL_AUTO_SPD_LOCK_ON_OFF_TYP_STS_ON_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_SSADL_AUTO_SPD_LOCK_ON_OFF_TYP_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_SSADL_AUTO_SPD_LOCK_ON_OFF_TYP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_RELAMP_RE_FOG_LI_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_RELAMP_RE_FOG_LI_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_RELAMP_RE_FOG_LI_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_RELAMP_RE_FOG_LI_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_LAMP_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_LAMP_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_LAMP_REQ_FLASH_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_LAMP_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_AUTO_MODE_CFG_REQ_NOT_AVAILABLE_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_AUTO_MODE_CFG_REQ_AVAILABLE_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_AUTO_MODE_CFG_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_AUTO_MODE_CFG_REQ_SNA_CHOICE (3u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_FOLLOW_ME_CFG_LEVEL0_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_FOLLOW_ME_CFG_LEVEL1_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_FOLLOW_ME_CFG_LEVEL2_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_FOLLOW_ME_CFG_LEVEL3_CHOICE (3u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_FOLLOW_ME_CFG_LEVEL4_CHOICE (4u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_FOLLOW_ME_CFG_LEVEL5_CHOICE (5u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_FOLLOW_ME_CFG_ERROR_CHOICE (6u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_FOLLOW_ME_CFG_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_REQ_LOW_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_REQ_HIGH_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_REQ_AUTO_CHOICE (3u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_REQ_SINGLE_WIPE_CHOICE (4u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_REQ_RESERVED_CHOICE (5u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_REQ_ERROR_CHOICE (6u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_OPER_PARK_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_OPER_PARK_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_OPER_PARK_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_OPER_PARK_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_SRV_POS_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_SRV_POS_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_SRV_POS_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_SRV_POS_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_HDC_SWT_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_HDC_SWT_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_HDC_SWT_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_HDC_SWT_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_ESC_TCS_SWT_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_ESC_TCS_SWT_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_ESC_TCS_SWT_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_ESC_TCS_SWT_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_INGRS_MODE_CMD_DISABLE_CHOICE (0u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_INGRS_MODE_CMD_ENABLE_CHOICE (1u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_INGRS_MODE_CMD_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_INGRS_MODE_CMD_NOT__AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_AVH_SWT_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_AVH_SWT_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_AVH_SWT_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_AVH_SWT_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SUSP_HEI_ADJ_REQ_NOT_REQUESTED_CHOICE (0u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SUSP_HEI_ADJ_REQ_NOMINAL_CHOICE (1u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SUSP_HEI_ADJ_REQ_LOW_CHOICE (2u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SUSP_HEI_ADJ_REQ_HIGH_CHOICE (3u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SUSP_HEI_ADJ_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SUSP_HEI_ADJ_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SUSP_HEI_ADJ_REQ_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SUSP_HEI_ADJ_REQ_NOT__AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SRV_MOD_CMD_DISABLE_CHOICE (0u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SRV_MOD_CMD_ENABLE_CHOICE (1u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SRV_MOD_CMD_RESERVED_CHOICE (2u)
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SRV_MOD_CMD_NOT__AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_ALV_CTR_IVI_USR_SEAT_ADJ_COMFRT_REQ_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_FOWD_BAWD_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_FOWD_BAWD_REQ_FORWARD_MOVEMENT_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_FOWD_BAWD_REQ_BACKWARD_MOVEMENT_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_FOWD_BAWD_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_HEI_UP_DWN_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_HEI_UP_DWN_REQ_UP_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_HEI_UP_DWN_REQ_DOWN_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_HEI_UP_DWN_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_LUM_IN_OUT_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_LUM_IN_OUT_REQ_IN_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_LUM_IN_OUT_REQ_OUT_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_LUM_IN_OUT_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_LUM_UP_DWN_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_LUM_UP_DWN_REQ_UP_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_LUM_UP_DWN_REQ_DOWN_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_LUM_UP_DWN_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_RECL_UP_DOWN_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_RECL_UP_DOWN_REQ_UP_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_RECL_UP_DOWN_REQ_DOWN_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_RECL_UP_DOWN_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_INTEN_SELN_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_INTEN_SELN_REQ_LOW_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_INTEN_SELN_REQ_MEDIUM_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_INTEN_SELN_REQ_HIGH_CHOICE (3u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_INTEN_SELN_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_INTEN_SELN_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_INTEN_SELN_REQ_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_INTEN_SELN_REQ_INVALID_CHOICE (7u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_PAT_SELN_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_PAT_SELN_REQ_PATTERN1_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_PAT_SELN_REQ_PATTERN2_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_PAT_SELN_REQ_PATTERN3_CHOICE (3u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_PAT_SELN_REQ_PATTERN4_CHOICE (4u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_PAT_SELN_REQ_PATTERN5_CHOICE (5u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_PAT_SELN_REQ_RESERVED_CHOICE (6u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_PAT_SELN_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_FOWD_BAWD_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_FOWD_BAWD_REQ_FORWARD_MOVEMENT_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_FOWD_BAWD_REQ_BACKWARD_MOVEMENT_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_FOWD_BAWD_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_HEI_UP_DWN_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_HEI_UP_DWN_REQ_UP_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_HEI_UP_DWN_REQ_DOWN_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_HEI_UP_DWN_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_LUM_IN_OUT_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_LUM_IN_OUT_REQ_IN_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_LUM_IN_OUT_REQ_OUT_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_LUM_IN_OUT_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_LUM_UP_DWN_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_LUM_UP_DWN_REQ_UP_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_LUM_UP_DWN_REQ_DOWN_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_LUM_UP_DWN_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_RECL_UP_DOWN_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_RECL_UP_DOWN_REQ_UP_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_RECL_UP_DOWN_REQ_DOWN_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_RECL_UP_DOWN_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_TILT_UP_DWN_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_TILT_UP_DWN_REQ_UP_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_TILT_UP_DWN_REQ_DOWN_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_TILT_UP_DWN_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_TILT_UP_DWN_REQ_NO_REQUEST_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_TILT_UP_DWN_REQ_UP_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_TILT_UP_DWN_REQ_DOWN_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_TILT_UP_DWN_REQ_ERROR_CHOICE (3u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_INTEN_SELN_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_INTEN_SELN_REQ_LOW_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_INTEN_SELN_REQ_MEDIUM_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_INTEN_SELN_REQ_HIGH_CHOICE (3u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_INTEN_SELN_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_INTEN_SELN_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_INTEN_SELN_REQ_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_INTEN_SELN_REQ_INVALID_CHOICE (7u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_PAT_SELN_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_PAT_SELN_REQ_PATTERN1_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_PAT_SELN_REQ_PATTERN2_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_PAT_SELN_REQ_PATTERN3_CHOICE (3u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_PAT_SELN_REQ_PATTERN4_CHOICE (4u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_PAT_SELN_REQ_PATTERN5_CHOICE (5u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_PAT_SELN_REQ_RESERVED_CHOICE (6u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_PAT_SELN_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_LE_VENTN_SPD_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_LE_VENTN_SPD_REQ_LOW_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_LE_VENTN_SPD_REQ_MEDIUM_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_LE_VENTN_SPD_REQ_HIGH_CHOICE (3u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_LE_VENTN_SPD_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_LE_VENTN_SPD_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_LE_VENTN_SPD_REQ_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_LE_VENTN_SPD_REQ_INVALID_CHOICE (7u)

#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_RI_VENTN_SPD_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_RI_VENTN_SPD_REQ_LOW_CHOICE (1u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_RI_VENTN_SPD_REQ_MEDIUM_CHOICE (2u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_RI_VENTN_SPD_REQ_HIGH_CHOICE (3u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_RI_VENTN_SPD_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_RI_VENTN_SPD_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_RI_VENTN_SPD_REQ_RESERVED_6_CHOICE (6u)
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_RI_VENTN_SPD_REQ_INVALID_CHOICE (7u)

#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_KLSS_USR_VEH_PWR_DN_REQ_OFF_CHOICE (0u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_KLSS_USR_VEH_PWR_DN_REQ_ON_CHOICE (1u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_KLSS_USR_VEH_PWR_DN_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_KLSS_USR_VEH_PWR_DN_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_HMI_KEEP_ALIVE_NOT_AVAILABLE_CHOICE (0u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_HMI_KEEP_ALIVE_AVAILABLE_CHOICE (1u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_HMI_KEEP_ALIVE_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_HMI_KEEP_ALIVE_SNA_CHOICE (3u)

#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LVM_LONG_PARK_MODE_REQ_DEACTIVATED_CHOICE (0u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LVM_LONG_PARK_MODE_REQ_ACTIVATED_CHOICE (1u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LVM_LONG_PARK_MODE_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LVM_LONG_PARK_MODE_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LVM_STORAGE_MODE_REQ_DEACTIVATED_CHOICE (0u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LVM_STORAGE_MODE_REQ_ACTIVATED_CHOICE (1u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LVM_STORAGE_MODE_REQ_ERROR_CHOICE (2u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LVM_STORAGE_MODE_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_DRVMC_MODE_REQ_ECO_PLUS_CHOICE (0u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_DRVMC_MODE_REQ_ECO_CHOICE (1u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_DRVMC_MODE_REQ_NORMAL__CHOICE (2u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_DRVMC_MODE_REQ_SPORT_CHOICE (3u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_DRVMC_MODE_REQ_SPORTS_PLUS_CHOICE (4u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_DRVMC_MODE_REQ_SAND_OFF__CHOICE (5u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_DRVMC_MODE_REQ_RESERVE_CHOICE (6u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_DRVMC_MODE_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_ESHIFT_TAGT_GEAR_REQ_PARK_CHOICE (0u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_ESHIFT_TAGT_GEAR_REQ_REVERSE_CHOICE (1u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_ESHIFT_TAGT_GEAR_REQ_NEUTRAL_CHOICE (2u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_ESHIFT_TAGT_GEAR_REQ_DRIVE_CHOICE (3u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_ESHIFT_TAGT_GEAR_REQ_RESERVED_4_CHOICE (4u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_ESHIFT_TAGT_GEAR_REQ_RESERVED_5_CHOICE (5u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_ESHIFT_TAGT_GEAR_REQ_ERROR_CHOICE (6u)
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_ESHIFT_TAGT_GEAR_REQ_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_TBOX_WARNING_KLE_NFC_CC_CARD_VLDTN_ST_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_TBOX_WARNING_KLE_NFC_CC_CARD_VLDTN_ST_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_TBOX_WARNING_KLE_NFC_CC_CARD_VLDTN_ST_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_TBOX_WARNING_KLE_NFC_CC_CARD_VLDTN_ST_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_ACCHG_CHG_GUN_UNLCK_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_ACCHG_CHG_GUN_UNLCK_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_ACCHG_CHG_GUN_UNLCK_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_ACCHG_CHG_GUN_UNLCK_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_HVSCO_HV_SYS_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_HVSCO_HV_SYS_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_HVSCO_HV_SYS_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_HVSCO_HV_SYS_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_THMGT_COOLT_OVER_T_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_THMGT_COOLT_OVER_T_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_THMGT_COOLT_OVER_T_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_THMGT_COOLT_OVER_T_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_ESHIFT_PSD_BRK_TO_ENGE_GEAR_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_PSD_BRK_TO_ENGE_GEAR_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_PSD_BRK_TO_ENGE_GEAR_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_PSD_BRK_TO_ENGE_GEAR_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_AWD_WHL_DRV_MODE_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_AWD_WHL_DRV_MODE_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_AWD_WHL_DRV_MODE_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_AWD_WHL_DRV_MODE_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_DRVMC_DRV_MODE_CHNG_RESTR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_DRVMC_DRV_MODE_CHNG_RESTR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_DRVMC_DRV_MODE_CHNG_RESTR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_DRVMC_DRV_MODE_CHNG_RESTR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_ESHIFT_HV_DCNCT_NO_GEAR_CHNG_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_HV_DCNCT_NO_GEAR_CHNG_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_HV_DCNCT_NO_GEAR_CHNG_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_HV_DCNCT_NO_GEAR_CHNG_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_ESHIFT_GEAR_CHNG_EPB_ENGE_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_GEAR_CHNG_EPB_ENGE_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_GEAR_CHNG_EPB_ENGE_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_GEAR_CHNG_EPB_ENGE_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_THMGT_COOLT_LVL_LO_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_THMGT_COOLT_LVL_LO_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_THMGT_COOLT_LVL_LO_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_THMGT_COOLT_LVL_LO_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_ESHIFT_STOP_VEH_TO_MOVE_FOWD_DIR_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_STOP_VEH_TO_MOVE_FOWD_DIR_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_STOP_VEH_TO_MOVE_FOWD_DIR_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_STOP_VEH_TO_MOVE_FOWD_DIR_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_HVSFT_HVSFT_STS_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_HVSFT_HVSFT_STS_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_HVSFT_HVSFT_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_HVSFT_HVSFT_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_VCU_LIMPHM_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_VCU_LIMPHM_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_VCU_LIMPHM_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_VCU_LIMPHM_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_ESHIFT_EPP_FAI_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_EPP_FAI_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_EPP_FAI_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_EPP_FAI_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_THMGT_THERM_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_THMGT_THERM_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_THMGT_THERM_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_THMGT_THERM_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_ACCHR_CHG_AUTH_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_ACCHR_CHG_AUTH_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_ACCHR_CHG_AUTH_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_ACCHR_CHG_AUTH_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_ESHIFT_ACT_GEAR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_ACT_GEAR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_ACT_GEAR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_ACT_GEAR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_ESHIFT_TAGT_GEAR_VLDTN_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_TAGT_GEAR_VLDTN_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_TAGT_GEAR_VLDTN_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_TAGT_GEAR_VLDTN_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_HVSFT_HVIL_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_HVSFT_HVIL_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_HVSFT_HVIL_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_HVSFT_HVIL_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_ESHIFT_STOP_VEH_TO_MOVE_RVS_DIR_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_STOP_VEH_TO_MOVE_RVS_DIR_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_STOP_VEH_TO_MOVE_RVS_DIR_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_ESHIFT_STOP_VEH_TO_MOVE_RVS_DIR_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL1_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL1_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL1_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL1_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL2_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL2_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL2_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL2_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL3_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL3_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL3_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL3_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_VCU_WARNING_CREGB_COAST_RGN_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_VCU_WARNING_CREGB_COAST_RGN_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_VCU_WARNING_CREGB_COAST_RGN_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_VCU_WARNING_CREGB_COAST_RGN_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_CEN_LOCK_LOCK_UNLCK_STS_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_CEN_LOCK_LOCK_UNLCK_STS_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_CEN_LOCK_LOCK_UNLCK_STS_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_CEN_LOCK_LOCK_UNLCK_STS_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_WIPR_FRNT_RI_FAILD_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_WIPR_FRNT_RI_FAILD_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_WIPR_FRNT_RI_FAILD_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_WIPR_FRNT_RI_FAILD_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_PASS_SEAT_HEATING_SW_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_PASS_SEAT_HEATING_SW_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_PASS_SEAT_HEATING_SW_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_PASS_SEAT_HEATING_SW_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_VOL_SWT_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_VOL_SWT_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_VOL_SWT_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_VOL_SWT_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_WIPR_FRNT_LE_FAILD_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_WIPR_FRNT_LE_FAILD_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_WIPR_FRNT_LE_FAILD_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_WIPR_FRNT_LE_FAILD_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_SWTT_CTL_DRVR_ST_HEATNG_SWT_FLT_WRN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_SWTT_CTL_DRVR_ST_HEATNG_SWT_FLT_WRN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_SWTT_CTL_DRVR_ST_HEATNG_SWT_FLT_WRN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_SWTT_CTL_DRVR_ST_HEATNG_SWT_FLT_WRN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_RELAMP_REV_LMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_RELAMP_REV_LMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_RELAMP_REV_LMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_RELAMP_REV_LMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_RLML_FOG_LMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_RLML_FOG_LMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_RLML_FOG_LMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_RLML_FOG_LMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_CHD_LOCK_SWT_FAULT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_CHD_LOCK_SWT_FAULT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_CHD_LOCK_SWT_FAULT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_CHD_LOCK_SWT_FAULT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_SWTT_CTL_RECLRN_MOD_ON_OFF_SWT_FLT_WRN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_SWTT_CTL_RECLRN_MOD_ON_OFF_SWT_FLT_WRN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_SWTT_CTL_RECLRN_MOD_ON_OFF_SWT_FLT_WRN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_SWTT_CTL_RECLRN_MOD_ON_OFF_SWT_FLT_WRN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_RLMR_FOG_LMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_RLMR_FOG_LMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_RLMR_FOG_LMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_RLMR_FOG_LMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_RELAMP_CHMSL_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_RELAMP_CHMSL_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_RELAMP_CHMSL_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_RELAMP_CHMSL_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_HZRD_SWT_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_HZRD_SWT_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_HZRD_SWT_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_HZRD_SWT_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_SSADL_DOOR_ACT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_SSADL_DOOR_ACT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_SSADL_DOOR_ACT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_SSADL_DOOR_ACT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_SSADL_DOOR_AJAR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_SSADL_DOOR_AJAR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_SSADL_DOOR_AJAR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_SSADL_DOOR_AJAR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUF_WARNING_CCS_SRV_WARN_NORMAL_CHOICE (0u)
#define CANI1_NONM_ZCUF_WARNING_CCS_SRV_WARN_FAULTY_CHOICE (1u)
#define CANI1_NONM_ZCUF_WARNING_CCS_SRV_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUF_WARNING_CCS_SRV_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_ALV_CTR_ACM_WARNING_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_BLINKING_RMN_REQ_NO__LIT_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_BLINKING_RMN_REQ_SOLID__LIT_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_BLINKING_RMN_REQ_BLINKING__LEVEL_1_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_BLINKING_RMN_REQ_BLINKING__LEVEL_2_CHOICE (3u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_BLINKING_RMN_REQ_RESERVE_4_CHOICE (4u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_BLINKING_RMN_REQ_RESERVE_5_CHOICE (5u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_BLINKING_RMN_REQ_ERROR_CHOICE (6u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_BLINKING_RMN_REQ_INVALID_CHOICE (7u)

#define CANI1_NONM_ACM_WARNING_AIR_BG_WARN_LAMP_OFF_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_AIR_BG_WARN_LAMP_ON_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_AIR_BG_WARN_LAMP_FLASH_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_AIR_BG_WARN_LAMP_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_AIR_BG_PASS_AIRBG_DEAC_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_AIR_BG_PASS_AIRBG_DEAC_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_AIR_BG_PASS_AIRBG_DEAC_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_AIR_BG_PASS_AIRBG_DEAC_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_DRVR_INDCR_STS_GREY_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_DRVR_INDCR_STS_RED_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_DRVR_INDCR_STS_GREEN_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_DRVR_INDCR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_PASS_INDCR_STS_GREY_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_PASS_INDCR_STS_RED_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_PASS_INDCR_STS_GREEN_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_PASS_INDCR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_CENTR_INDCR_STS_GREY_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_CENTR_INDCR_STS_RED_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_CENTR_INDCR_STS_GREEN_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_CENTR_INDCR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_RI_INDCR_STS_GREY_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_RI_INDCR_STS_RED_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_RI_INDCR_STS_GREEN_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_RI_INDCR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_LE_INDCR_STS_GREY_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_LE_INDCR_STS_RED_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_LE_INDCR_STS_GREEN_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_LE_INDCR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_DRVR_BKL_STS_NOT_BELTED_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_DRVR_BKL_STS_BELTED_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_DRVR_BKL_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_DRVR_BKL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_PASS_BKL_STS_NOT_BELTED_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_PASS_BKL_STS_BELTED_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_PASS_BKL_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_PASS_BKL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_CENTR_BKL_STS_NOT_BELTED_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_CENTR_BKL_STS_BELTED_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_CENTR_BKL_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_CENTR_BKL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_RI_BKL_STS_NOT_BELTED_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_RI_BKL_STS_BELTED_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_RI_BKL_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_RI_BKL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_LE_BKL_STS_NOT_BELTED_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_LE_BKL_STS_BELTED_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_LE_BKL_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_LE_BKL_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ACM_WARNING_SBLT_WARN_CHIME_RMN_REQ_NO_CHIME_CHOICE (0u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_CHIME_RMN_REQ_CHIME_LEVEL1_CHOICE (1u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_CHIME_RMN_REQ_CHIME_LEVEL2_CHOICE (2u)
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_CHIME_RMN_REQ_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMRL_WARNING_ALV_CTR_DCMRL_WARNING_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_DCMRL_WARNING_PWIND_RE_LE_WNDW_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_DCMRL_WARNING_PWIND_RE_LE_WNDW_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_DCMRL_WARNING_PWIND_RE_LE_WNDW_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_DCMRL_WARNING_PWIND_RE_LE_WNDW_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMRR_WARNING_ALV_CTR_DCMRR_WARNING_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_DCMRR_WARNING_CEN_LOCK_RE_RI_DOOR_AJAR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_DCMRR_WARNING_CEN_LOCK_RE_RI_DOOR_AJAR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_DCMRR_WARNING_CEN_LOCK_RE_RI_DOOR_AJAR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_DCMRR_WARNING_CEN_LOCK_RE_RI_DOOR_AJAR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMRR_WARNING_PWIND_RE_RI_WNDW_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_DCMRR_WARNING_PWIND_RE_RI_WNDW_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_DCMRR_WARNING_PWIND_RE_RI_WNDW_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_DCMRR_WARNING_PWIND_RE_RI_WNDW_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ASU_WARNING_AIR_SUSP_UNIT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ASU_WARNING_AIR_SUSP_UNIT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ASU_WARNING_AIR_SUSP_UNIT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ASU_WARNING_AIR_SUSP_UNIT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ASU_WARNING_AIR_SUSP_UNIT_SRV_MODE_NOT_ACTVD_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ASU_WARNING_AIR_SUSP_UNIT_SRV_MODE_NOT_ACTVD_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ASU_WARNING_AIR_SUSP_UNIT_SRV_MODE_NOT_ACTVD_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ASU_WARNING_AIR_SUSP_UNIT_SRV_MODE_NOT_ACTVD_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMP_WARNING_ALV_CTR_DCMP_WARNING_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_DCMP_WARNING_CEN_LOCK_PASS_DOOR_AJAR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_DCMP_WARNING_CEN_LOCK_PASS_DOOR_AJAR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_DCMP_WARNING_CEN_LOCK_PASS_DOOR_AJAR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_DCMP_WARNING_CEN_LOCK_PASS_DOOR_AJAR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMP_WARNING_PWIND_PASS_WNDW_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_DCMP_WARNING_PWIND_PASS_WNDW_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_DCMP_WARNING_PWIND_PASS_WNDW_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_DCMP_WARNING_PWIND_PASS_WNDW_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_CELL_U_DIF_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_U_DIF_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_U_DIF_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_U_DIF_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_COOLT_INLET_T_SNSR_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_COOLT_INLET_T_SNSR_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_COOLT_INLET_T_SNSR_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_COOLT_INLET_T_SNSR_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_COOLT_OUTL_T_SNSR_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_COOLT_OUTL_T_SNSR_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_COOLT_OUTL_T_SNSR_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_COOLT_OUTL_T_SNSR_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_DCFC_NEG_RLY_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_DCFC_NEG_RLY_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_DCFC_NEG_RLY_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_DCFC_NEG_RLY_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_DCFC_POS_RLY_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_DCFC_POS_RLY_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_DCFC_POS_RLY_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_DCFC_POS_RLY_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_CTCTR_DCNCT_RSN_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_CTCTR_DCNCT_RSN_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_CTCTR_DCNCT_RSN_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_CTCTR_DCNCT_RSN_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_ERR_LEV_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_ERR_LEV_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_ERR_LEV_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_ERR_LEV_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_FUSE_STS_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_FUSE_STS_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_FUSE_STS_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_FUSE_STS_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_HVIL_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_HVIL_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_HVIL_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_HVIL_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_LO_BAT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_LO_BAT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_LO_BAT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_LO_BAT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_MAIN_POS_RLY_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_MAIN_POS_RLY_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_MAIN_POS_RLY_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_MAIN_POS_RLY_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_PACK_HV_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_HV_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_HV_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_HV_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_PACK_INSU_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_INSU_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_INSU_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_INSU_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_PACK_LV_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_LV_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_LV_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_LV_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_PACK_OVCUR_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_OVCUR_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_OVCUR_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_OVCUR_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_PACK_T_STS_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_T_STS_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_T_STS_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_PACK_T_STS_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_PRE_CH_RLY_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_PRE_CH_RLY_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_PRE_CH_RLY_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_PRE_CH_RLY_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_CELL_OVER_T_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_OVER_T_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_OVER_T_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_OVER_T_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_CELL_UNDER_T_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_UNDER_T_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_UNDER_T_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_UNDER_T_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_RVS_I_DET_CHG_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_RVS_I_DET_CHG_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_RVS_I_DET_CHG_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_RVS_I_DET_CHG_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_SC_I_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_SC_I_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_SC_I_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_SC_I_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_SOC_CHNG_FAST_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_SOC_CHNG_FAST_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_SOC_CHNG_FAST_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_SOC_CHNG_FAST_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_SRV_DUE_DETN_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_SRV_DUE_DETN_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_SRV_DUE_DETN_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_SRV_DUE_DETN_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_THERM_RUNAWAY_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_THERM_RUNAWAY_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_THERM_RUNAWAY_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_THERM_RUNAWAY_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_TOT_NEG_RLY_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_TOT_NEG_RLY_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_TOT_NEG_RLY_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_TOT_NEG_RLY_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_BAT_BAL_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_BAT_BAL_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_BAT_BAL_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_BAT_BAL_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_BAT_REPL_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_BAT_REPL_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_BAT_REPL_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_BAT_REPL_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_CELL_HV_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_HV_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_HV_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_HV_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_BMS_WARNING_BMS_CELL_LV_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_LV_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_LV_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_BMS_WARNING_BMS_CELL_LV_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMD_WARNING_ALV_CTR_DCMD_WARNING_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_DCMD_WARNING_PWIND_DRV_WNDW_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_DCMD_WARNING_PWIND_DRV_WNDW_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_DCMD_WARNING_PWIND_DRV_WNDW_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_DCMD_WARNING_PWIND_DRV_WNDW_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMD_WARNING_CEN_LOCK_DRVR_DOOR_AJAR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_DCMD_WARNING_CEN_LOCK_DRVR_DOOR_AJAR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_DCMD_WARNING_CEN_LOCK_DRVR_DOOR_AJAR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_DCMD_WARNING_CEN_LOCK_DRVR_DOOR_AJAR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCMD_WARNING_PWD_DRVR_DOOR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_DCMD_WARNING_PWD_DRVR_DOOR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_DCMD_WARNING_PWD_DRVR_DOOR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_DCMD_WARNING_PWD_DRVR_DOOR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_SWT_FLT_NORMAL_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_SWT_FLT_FAULTY_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_SWT_FLT_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_SWT_FLT_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_INCLND_VEH_PARK_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_INCLND_VEH_PARK_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_INCLND_VEH_PARK_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_INCLND_VEH_PARK_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_BRK_F_NOT_EN_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_BRK_F_NOT_EN_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_BRK_F_NOT_EN_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_BRK_F_NOT_EN_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_BRB_RGN_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_BRB_RGN_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_BRB_RGN_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_BRB_RGN_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_NOT_APPLD_DOOR_OPEN_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_NOT_APPLD_DOOR_OPEN_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_NOT_APPLD_DOOR_OPEN_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_NOT_APPLD_DOOR_OPEN_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_ROLLR_BENCH_MODE_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_ROLLR_BENCH_MODE_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_ROLLR_BENCH_MODE_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_ROLLR_BENCH_MODE_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_AUTO_RELS_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_AUTO_RELS_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_AUTO_RELS_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_AUTO_RELS_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_RLSD_MNTN_MODE_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_RLSD_MNTN_MODE_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_RLSD_MNTN_MODE_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_RLSD_MNTN_MODE_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_RLSD_TW_MODE_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_RLSD_TW_MODE_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_RLSD_TW_MODE_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_RLSD_TW_MODE_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_AUTO_APPLD_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_AUTO_APPLD_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_AUTO_APPLD_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_AUTO_APPLD_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_DRVAC_HILL_STRT_ASSI_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_HILL_STRT_ASSI_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_HILL_STRT_ASSI_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_HILL_STRT_ASSI_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_EBD_SYS_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_EBD_SYS_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_EBD_SYS_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_EBD_SYS_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_DRVAC_CORNERING_BRK_CTL_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_CORNERING_BRK_CTL_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_CORNERING_BRK_CTL_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_CORNERING_BRK_CTL_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_DRVAC_HDC_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_HDC_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_HDC_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_HDC_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_DRVAC_FLD_LVL_INDCR_BRK_FLD_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_FLD_LVL_INDCR_BRK_FLD_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_FLD_LVL_INDCR_BRK_FLD_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_FLD_LVL_INDCR_BRK_FLD_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_DRVAC_TCS_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_TCS_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_TCS_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_DRVAC_TCS_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_PSD_BRK_PEDL_TO_RELS_EPB_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_PSD_BRK_PEDL_TO_RELS_EPB_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_PSD_BRK_PEDL_TO_RELS_EPB_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_PSD_BRK_PEDL_TO_RELS_EPB_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_WARN_LAMP_ST_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_WARN_LAMP_ST_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_WARN_LAMP_ST_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_WARN_LAMP_ST_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_PARK_BRK_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_PARK_BRK_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_PARK_BRK_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_PARK_BRK_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_DEGRADED_MODE_TO_BE_RLSD_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_DEGRADED_MODE_TO_BE_RLSD_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_DEGRADED_MODE_TO_BE_RLSD_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_DEGRADED_MODE_TO_BE_RLSD_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ECPBK_DEGRADED_MODE_RLSD_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_DEGRADED_MODE_RLSD_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_DEGRADED_MODE_RLSD_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ECPBK_DEGRADED_MODE_RLSD_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EBCM_WARNING_ABS_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EBCM_WARNING_ABS_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EBCM_WARNING_ABS_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EBCM_WARNING_ABS_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_OBC_WARNING_ACCHG_OBC_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_OBC_WARNING_ACCHG_OBC_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_OBC_WARNING_ACCHG_OBC_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_OBC_WARNING_ACCHG_OBC_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_RWA1_WARNING_STBWR_RDNDT_MODE_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EPS_RWA1_WARNING_STBWR_RDNDT_MODE_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EPS_RWA1_WARNING_STBWR_RDNDT_MODE_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EPS_RWA1_WARNING_STBWR_RDNDT_MODE_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_HPTC_WARN_STS_INACTIVE_CHOICE (0u)
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_HPTC_WARN_STS_ACTIVE_CHOICE (1u)
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_HPTC_WARN_STS_ERROR_CHOICE (2u)
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_HPTC_WARN_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_SFA_CLU_WARN_LAMP_WL__OFF_CHOICE (0u)
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_SFA_CLU_WARN_LAMP_WL__YELLOW_CHOICE (1u)
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_SFA_CLU_WARN_LAMP_WL__RED_CHOICE (2u)
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_SFA_CLU_WARN_LAMP_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_STEER_ALGNMT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_STEER_ALGNMT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_STEER_ALGNMT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_STEER_ALGNMT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_RWA2_WARNING_STBWR_RDNDT_MODE_WARN_R_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EPS_RWA2_WARNING_STBWR_RDNDT_MODE_WARN_R_WARNING_CHOICE (1u)
#define CANI1_NONM_EPS_RWA2_WARNING_STBWR_RDNDT_MODE_WARN_R_RESERVED_CHOICE (2u)
#define CANI1_NONM_EPS_RWA2_WARNING_STBWR_RDNDT_MODE_WARN_R_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_HPTC_WARN_STS_R_INACTIVE_CHOICE (0u)
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_HPTC_WARN_STS_R_ACTIVE_CHOICE (1u)
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_HPTC_WARN_STS_R_ERROR_CHOICE (2u)
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_HPTC_WARN_STS_R_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_SFA_CLU_WARN_LAMP_R_WL__OFF_CHOICE (0u)
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_SFA_CLU_WARN_LAMP_R_WL__YELLOW_CHOICE (1u)
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_SFA_CLU_WARN_LAMP_R_WL__RED_CHOICE (2u)
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_SFA_CLU_WARN_LAMP_R_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_STEER_ALGNMT_WARN_R_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_STEER_ALGNMT_WARN_R_WARNING_CHOICE (1u)
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_STEER_ALGNMT_WARN_R_RESERVED_CHOICE (2u)
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_STEER_ALGNMT_WARN_R_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_HDLML_WARNING_HDLAMP_LE_LO_BEAM_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_HDLML_WARNING_HDLAMP_LE_LO_BEAM_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_HDLML_WARNING_HDLAMP_LE_LO_BEAM_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_HDLML_WARNING_HDLAMP_LE_LO_BEAM_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_HDLML_WARNING_HDLAMP_LE_HI_BEAM_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_HDLML_WARNING_HDLAMP_LE_HI_BEAM_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_HDLML_WARNING_HDLAMP_LE_HI_BEAM_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_HDLML_WARNING_HDLAMP_LE_HI_BEAM_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_HDLMR_WARNING_HDLAMP_RI_LO_BEAM_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_HDLMR_WARNING_HDLAMP_RI_LO_BEAM_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_HDLMR_WARNING_HDLAMP_RI_LO_BEAM_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_HDLMR_WARNING_HDLAMP_RI_LO_BEAM_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_HDLMR_WARNING_HDLAMP_RI_HI_BEAM_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_HDLMR_WARNING_HDLAMP_RI_HI_BEAM_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_HDLMR_WARNING_HDLAMP_RI_HI_BEAM_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_HDLMR_WARNING_HDLAMP_RI_HI_BEAM_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SBM_WARNING_SBM_CRITICAL_SO_C_ALERT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SBM_WARNING_SBM_CRITICAL_SO_C_ALERT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SBM_WARNING_SBM_CRITICAL_SO_C_ALERT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SBM_WARNING_SBM_CRITICAL_SO_C_ALERT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SBM_WARNING_SBM_HEALTH_ST_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SBM_WARNING_SBM_HEALTH_ST_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SBM_WARNING_SBM_HEALTH_ST_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SBM_WARNING_SBM_HEALTH_ST_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SBM_WARNING_SBM_LV_BAT_T_SNSR_FLT_STS_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SBM_WARNING_SBM_LV_BAT_T_SNSR_FLT_STS_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SBM_WARNING_SBM_LV_BAT_T_SNSR_FLT_STS_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SBM_WARNING_SBM_LV_BAT_T_SNSR_FLT_STS_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_WARNING_ALV_CTR_CCU_WARNING_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_CCU_WARNING_CCSF_IONISER_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_CCU_WARNING_CCSF_IONISER_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_CCU_WARNING_CCSF_IONISER_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_WARNING_CCSF_IONISER_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_DUCT_FLAP_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_DUCT_FLAP_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_DUCT_FLAP_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_DUCT_FLAP_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_WARNING_CCSF_RE_RI_TEMP_MIX_FLAP_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_RI_TEMP_MIX_FLAP_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_RI_TEMP_MIX_FLAP_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_RI_TEMP_MIX_FLAP_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_TEMP_MIX_FLAP_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_TEMP_MIX_FLAP_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_TEMP_MIX_FLAP_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_TEMP_MIX_FLAP_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_TEMP_MIX_FLAP_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_TEMP_MIX_FLAP_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_TEMP_MIX_FLAP_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_TEMP_MIX_FLAP_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_VENT_DUCT_FLAP_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_VENT_DUCT_FLAP_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_VENT_DUCT_FLAP_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_VENT_DUCT_FLAP_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_RI_DUCT_FLAP_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_RI_DUCT_FLAP_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_RI_DUCT_FLAP_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_RI_DUCT_FLAP_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_FOOT_DUCT_FLAP_FLT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_FOOT_DUCT_FLAP_FLT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_FOOT_DUCT_FLAP_FLT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_FOOT_DUCT_FLAP_FLT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_VEN_DIR_STS_NORMALLY_OUTWARDS_CHOICE (0u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_VEN_DIR_STS_HARMONICS_UP_DOWN_CHOICE (1u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_VEN_DIR_STS_HARMONICS_SIDE_BY_SIDE_CHOICE (2u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_VEN_DIR_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_RI_TEMP_MIX_FLAP_FLT_W_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_RI_TEMP_MIX_FLAP_FLT_W_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_RI_TEMP_MIX_FLAP_FLT_W_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_RI_TEMP_MIX_FLAP_FLT_W_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_DERAT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_DERAT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_DERAT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_DERAT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_ER_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_ER_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_ER_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_ER_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_PARK_LOCK_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_PARK_LOCK_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_PARK_LOCK_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_PARK_LOCK_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MCU_R_WARNING_EDS_RE_PARK_LOCK_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_PARK_LOCK_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_PARK_LOCK_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_PARK_LOCK_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MCU_R_WARNING_EDS_RE_ERR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_ERR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_ERR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_ERR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MCU_R_WARNING_EDS_RE_DERAT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_DERAT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_DERAT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_DERAT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MFS_WARNING_ALV_CTR_MFS_WARNING_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_MFS_WARNING_MFSW_DRV_MOD_SWT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MFS_WARNING_MFSW_DRV_MOD_SWT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MFS_WARNING_MFSW_DRV_MOD_SWT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MFS_WARNING_MFSW_DRV_MOD_SWT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MFS_WARNING_MFS_ADAS_SWT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MFS_WARNING_MFS_ADAS_SWT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MFS_WARNING_MFS_ADAS_SWT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MFS_WARNING_MFS_ADAS_SWT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MFS_WARNING_MFS_FAVORITE_SWT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MFS_WARNING_MFS_FAVORITE_SWT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MFS_WARNING_MFS_FAVORITE_SWT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MFS_WARNING_MFS_FAVORITE_SWT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MFS_WARNING_MFS_RIM_SWT_HI_BEAM_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MFS_WARNING_MFS_RIM_SWT_HI_BEAM_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MFS_WARNING_MFS_RIM_SWT_HI_BEAM_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MFS_WARNING_MFS_RIM_SWT_HI_BEAM_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_MFS_WARNING_MFS_RIM_SWT_WIPER_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_MFS_WARNING_MFS_RIM_SWT_WIPER_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_MFS_WARNING_MFS_RIM_SWT_WIPER_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_MFS_WARNING_MFS_RIM_SWT_WIPER_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_DCDC_WARNING_HVSCO_DCDC_OPER_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_DCDC_WARNING_HVSCO_DCDC_OPER_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_DCDC_WARNING_HVSCO_DCDC_OPER_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_DCDC_WARNING_HVSCO_DCDC_OPER_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_WARNING_ALV_CTR_PSMD_WARNING_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_FRNT_BACK_MOT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_FRNT_BACK_MOT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_FRNT_BACK_MOT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_FRNT_BACK_MOT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_HEATG_BACK_PAD_FAIL_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_HEATG_BACK_PAD_FAIL_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_HEATG_BACK_PAD_FAIL_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_HEATG_BACK_PAD_FAIL_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_VENTN_SQUB_FAN_FAIL_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_VENTN_SQUB_FAN_FAIL_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_VENTN_SQUB_FAN_FAIL_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_VENTN_SQUB_FAN_FAIL_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_VENTN_CSHN_FAN_FAIL_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_VENTN_CSHN_FAN_FAIL_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_VENTN_CSHN_FAN_FAIL_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_VENTN_CSHN_FAN_FAIL_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_ADJMT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_ADJMT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_ADJMT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_ADJMT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_MASSG_FAIL_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_MASSG_FAIL_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_MASSG_FAIL_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_MASSG_FAIL_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_WARNING_ALV_CTR_PSMP_WARNING_INVALID__VALUE_CHOICE (15u)

#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_ADJMT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_ADJMT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_ADJMT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_ADJMT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_VENTN_CSHN_FAN_FAIL_WRN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_VENTN_CSHN_FAN_FAIL_WRN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_VENTN_CSHN_FAN_FAIL_WRN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_VENTN_CSHN_FAN_FAIL_WRN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_VENTN_SQUB_FAN_FAIL_WRN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_VENTN_SQUB_FAN_FAIL_WRN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_VENTN_SQUB_FAN_FAIL_WRN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_VENTN_SQUB_FAN_FAIL_WRN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_MASSG_FAIL_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_MASSG_FAIL_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_MASSG_FAIL_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_MASSG_FAIL_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_RWSM_WARNING_RE_WHL_STEER_WARN_LAMP_OFF_CHOICE (0u)
#define CANI1_NONM_RWSM_WARNING_RE_WHL_STEER_WARN_LAMP_YELLOW_CHOICE (1u)
#define CANI1_NONM_RWSM_WARNING_RE_WHL_STEER_WARN_LAMP_YELLOW_FLASHING_CHOICE (2u)
#define CANI1_NONM_RWSM_WARNING_RE_WHL_STEER_WARN_LAMP_RED_CHOICE (3u)
#define CANI1_NONM_RWSM_WARNING_RE_WHL_STEER_WARN_LAMP_RED_YELLOW_CHOICE (4u)
#define CANI1_NONM_RWSM_WARNING_RE_WHL_STEER_WARN_LAMP_RED_YELLOW_FLASHING_CHOICE (5u)
#define CANI1_NONM_RWSM_WARNING_RE_WHL_STEER_WARN_LAMP_ERROR_CHOICE (6u)
#define CANI1_NONM_RWSM_WARNING_RE_WHL_STEER_WARN_LAMP_NOT_AVAILABLE_CHOICE (7u)

#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_LE_VENTN_CSHN_FAN_FAIL_WRN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_LE_VENTN_CSHN_FAN_FAIL_WRN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_LE_VENTN_CSHN_FAN_FAIL_WRN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_LE_VENTN_CSHN_FAN_FAIL_WRN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_LE_VENTN_SQUB_FAN_FAIL_WRN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_LE_VENTN_SQUB_FAN_FAIL_WRN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_LE_VENTN_SQUB_FAN_FAIL_WRN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_LE_VENTN_SQUB_FAN_FAIL_WRN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_RI_VENTN_CSHN_FAN_FAIL_WRN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_RI_VENTN_CSHN_FAN_FAIL_WRN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_RI_VENTN_CSHN_FAN_FAIL_WRN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_RI_VENTN_CSHN_FAN_FAIL_WRN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_RI_VENTN_SQUB_FAN_FAIL_WRN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_RI_VENTN_SQUB_FAN_FAIL_WRN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_RI_VENTN_SQUB_FAN_FAIL_WRN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_RI_VENTN_SQUB_FAN_FAIL_WRN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_WARNING_ACTTG_TAIL_GATE_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUR_WARNING_ACTTG_TAIL_GATE_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUR_WARNING_ACTTG_TAIL_GATE_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUR_WARNING_ACTTG_TAIL_GATE_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_ZCUR_WARNING_CHRGR_PORT_ILMN_LAMP_W_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_ZCUR_WARNING_CHRGR_PORT_ILMN_LAMP_W_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_ZCUR_WARNING_CHRGR_PORT_ILMN_LAMP_W_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_ZCUR_WARNING_CHRGR_PORT_ILMN_LAMP_W_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLML_WARNING_RELAMP_RE_LE_TLG_TURN_INDCR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_TLML_WARNING_RELAMP_RE_LE_TLG_TURN_INDCR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_TLML_WARNING_RELAMP_RE_LE_TLG_TURN_INDCR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_TLML_WARNING_RELAMP_RE_LE_TLG_TURN_INDCR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLML_WARNING_RELAMP_RE_LE_TLG_POSN_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_TLML_WARNING_RELAMP_RE_LE_TLG_POSN_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_TLML_WARNING_RELAMP_RE_LE_TLG_POSN_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_TLML_WARNING_RELAMP_RE_LE_TLG_POSN_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLML_WARNING_RELAMP_LE_TLG_BRK_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_TLML_WARNING_RELAMP_LE_TLG_BRK_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_TLML_WARNING_RELAMP_LE_TLG_BRK_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_TLML_WARNING_RELAMP_LE_TLG_BRK_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLMR_WARNING_RELAMP_RI_TLG_BRK_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_TLMR_WARNING_RELAMP_RI_TLG_BRK_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_TLMR_WARNING_RELAMP_RI_TLG_BRK_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_TLMR_WARNING_RELAMP_RI_TLG_BRK_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLMR_WARNING_RELAMP_RE_RI_TLG_TURN_INDCR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_TLMR_WARNING_RELAMP_RE_RI_TLG_TURN_INDCR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_TLMR_WARNING_RELAMP_RE_RI_TLG_TURN_INDCR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_TLMR_WARNING_RELAMP_RE_RI_TLG_TURN_INDCR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_TLMR_WARNING_RELAMP_RE_RI_TLG_POSN_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_TLMR_WARNING_RELAMP_RE_RI_TLG_POSN_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_TLMR_WARNING_RELAMP_RE_RI_TLG_POSN_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_TLMR_WARNING_RELAMP_RE_RI_TLG_POSN_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_RLML_WARNING_RELAMP_LE_BODY_BRK_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_RLML_WARNING_RELAMP_LE_BODY_BRK_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_RLML_WARNING_RELAMP_LE_BODY_BRK_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_RLML_WARNING_RELAMP_LE_BODY_BRK_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_RLML_WARNING_RELAMP_RE_LE_BODY_TURN_INDCR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_RLML_WARNING_RELAMP_RE_LE_BODY_TURN_INDCR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_RLML_WARNING_RELAMP_RE_LE_BODY_TURN_INDCR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_RLML_WARNING_RELAMP_RE_LE_BODY_TURN_INDCR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_RLMR_WARNING_RELAMP_RE_RI_BODY_TURN_INDCR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_RLMR_WARNING_RELAMP_RE_RI_BODY_TURN_INDCR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_RLMR_WARNING_RELAMP_RE_RI_BODY_TURN_INDCR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_RLMR_WARNING_RELAMP_RE_RI_BODY_TURN_INDCR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_RLMR_WARNING_RELAMP_RI_BODY_BRK_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_RLMR_WARNING_RELAMP_RI_BODY_BRK_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_RLMR_WARNING_RELAMP_RI_BODY_BRK_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_RLMR_WARNING_RELAMP_RI_BODY_BRK_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFC_WARNING_HDLAMP_FRNT_CENTR_LE_SIGN_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SLMFC_WARNING_HDLAMP_FRNT_CENTR_LE_SIGN_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SLMFC_WARNING_HDLAMP_FRNT_CENTR_LE_SIGN_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SLMFC_WARNING_HDLAMP_FRNT_CENTR_LE_SIGN_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFC_WARNING_HDLAMP_FRNT_CENTR_RI_SIGN_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SLMFC_WARNING_HDLAMP_FRNT_CENTR_RI_SIGN_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SLMFC_WARNING_HDLAMP_FRNT_CENTR_RI_SIGN_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SLMFC_WARNING_HDLAMP_FRNT_CENTR_RI_SIGN_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFL_WARNING_HDLAMP_FRNT_LE_BODY_TURN_INDCR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_FRNT_LE_BODY_TURN_INDCR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_FRNT_LE_BODY_TURN_INDCR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_FRNT_LE_BODY_TURN_INDCR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFL_WARNING_HDLAMP_LE_DRL_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_LE_DRL_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_LE_DRL_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_LE_DRL_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFL_WARNING_HDLAMP_LE_FRNT_POSN_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_LE_FRNT_POSN_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_LE_FRNT_POSN_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_LE_FRNT_POSN_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFR_WARNING_HDLAMP_FRNT_RI_BODY_TURN_INDCR_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_FRNT_RI_BODY_TURN_INDCR_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_FRNT_RI_BODY_TURN_INDCR_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_FRNT_RI_BODY_TURN_INDCR_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFR_WARNING_HDLAMP_RI_DRL_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_RI_DRL_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_RI_DRL_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_RI_DRL_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMFR_WARNING_HDLAMP_RI_FRNT_POSN_LAMP_WARN_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_RI_FRNT_POSN_LAMP_WARN_WARNING_CHOICE (1u)
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_RI_FRNT_POSN_LAMP_WARN_RESERVED_CHOICE (2u)
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_RI_FRNT_POSN_LAMP_WARN_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMRC_WARNING_RELAMP_CENTR_RI_SIGN_LAMP_STS_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SLMRC_WARNING_RELAMP_CENTR_RI_SIGN_LAMP_STS_WARNING_CHOICE (1u)
#define CANI1_NONM_SLMRC_WARNING_RELAMP_CENTR_RI_SIGN_LAMP_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_SLMRC_WARNING_RELAMP_CENTR_RI_SIGN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

#define CANI1_NONM_SLMRC_WARNING_RELAMP_CENTR_LE_SIGN_LAMP_STS_NO_WARNING_CHOICE (0u)
#define CANI1_NONM_SLMRC_WARNING_RELAMP_CENTR_LE_SIGN_LAMP_STS_WARNING_CHOICE (1u)
#define CANI1_NONM_SLMRC_WARNING_RELAMP_CENTR_LE_SIGN_LAMP_STS_RESERVED_CHOICE (2u)
#define CANI1_NONM_SLMRC_WARNING_RELAMP_CENTR_LE_SIGN_LAMP_STS_NOT_AVAILABLE_CHOICE (3u)

/* Frame Names. */
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_NAME "OBD_FuncDiagResp"
#define CANI1_NONM_ACM_CRASH_STAT_NAME "ACM_CrashStat"
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_NAME "EPS_SFA_SteerWhl_Pub_Info"
#define CANI1_NONM_VCU_E_TRACT_SYS_INFO_NAME "VCU_ETractSys_Info"
#define CANI1_NONM_RWSM_INFO_NAME "RWSM_Info"
#define CANI1_NONM_BMS_STS_NAME "BMS_Sts"
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_NAME "EPS_RWA_Pinion_Pub_Info"
#define CANI1_NONM_EBCM_VEH_INFO_NAME "EBCM_Veh_Info"
#define CANI1_NONM_ZCUF_CLAMP_INFO_NAME "ZCUF_Clamp_Info"
#define CANI1_NONM_ASU_SNSR_INFO_NAME "ASU_SnsrInfo"
#define CANI1_NONM_VCU_BATT_INFO_NAME "VCU_Batt_Info"
#define CANI1_NONM_VCU_CHARGING_INFO_NAME "VCU_Charging_Info"
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_NAME "VCU_HVDrvSys_Status"
#define CANI1_NONM_EBCM_STS_REQ_NAME "EBCM_Sts_Req"
#define CANI1_NONM_ZCUR_LAMP_CMD_NAME "ZCUR_LampCmd"
#define CANI1_NONM_SBM_LV_BAT_INFO_1_NAME "SBM_LVBatInfo_1"
#define CANI1_NONM_SBM_LV_BAT_INFO_2_NAME "SBM_LVBatInfo_2"
#define CANI1_NONM_VCU_CONSUMPTION_INFO_NAME "VCU_Consumption_Info"
#define CANI1_NONM_VCU_TO_VEH_INFO_NAME "VCU_To_Veh_Info"
#define CANI1_NONM_ZCUF_RLHS_LIGHT_INFO_NAME "ZCUF_RlhsLight_Info"
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_NAME "HDLML_FrontLamp_Sts"
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_NAME "HDLMR_FrontLamp_Sts"
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_NAME "SLMFL_FrontLamp_Sts"
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_NAME "SLMFR_FrontLamp_Sts"
#define CANI1_NONM_RLML_REAR_LAMP_STS_NAME "RLML_RearLampSts"
#define CANI1_NONM_RLMR_REAR_LAMP_STS_NAME "RLMR_RearLampSts"
#define CANI1_NONM_TLML_REAR_LAMP_STS_NAME "TLML_RearLampSts"
#define CANI1_NONM_SLMFC_LAMP_STS_NAME "SLMFC_LampSts"
#define CANI1_NONM_SLMRC_LAMP_STS_NAME "SLMRC_LampSts"
#define CANI1_NONM_TLMR_REAR_LAMP_STS_NAME "TLMR_RearLampSts"
#define CANI1_NONM_CCU_COMP_PWR_REQ_NAME "CCU_CompPwr_Req"
#define CANI1_NONM_CCU_TEMPERATURE_FBK_NAME "CCU_TemperatureFbk"
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_NAME "ZCUF_RlhsRainHumidity_Info"
#define CANI1_NONM_ADAS_RVC_INFO_NAME "ADAS_Rvc_Info"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_NAME "IVI_Ept_Feature_Info"
#define CANI1_NONM_ZCUR_IVI_STS_NAME "ZCUR_IVI_Sts"
#define CANI1_NONM_CCU_FAULT_STS_NAME "CCU_FaultSts"
#define CANI1_NONM_CCU_CLIM_SYS_STS_NAME "CCU_ClimSys_Sts"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_NAME "CCU_AcOpMode_Sts"
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_NAME "CCU_ClimFrgrnc_Sts"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_NAME "PSMD_SeatAdjustment_Status"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_NAME "PSMP_SeatAdjustment_Status"
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_NAME "PSMD_SeatPos_Status"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_NAME "PSMD_SeatCmfrt_Status"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_NAME "PSMP_SeatCmfrt_Status"
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_NAME "PSMP_SeatPos_Status"
#define CANI1_NONM_DCMD_CLOSURE_STS_NAME "DCMD_ClosureSts"
#define CANI1_NONM_IVI_PSSNGR_SEAT_STORED_PROFILE_NAME "IVI_PssngrSeatStoredProfile"
#define CANI1_NONM_VCU_STS_NAME "VCU_Sts"
#define CANI1_NONM_DCMP_CLOSURE_STS_NAME "DCMP_ClosureSts"
#define CANI1_NONM_DCMRR_CLOSURE_STS_NAME "DCMRR_ClosureSts"
#define CANI1_NONM_DCMRL_CLOSURE_STS_NAME "DCMRL_ClosureSts"
#define CANI1_NONM_ZCUF_WIPER_STS_NAME "ZCUF_WiperSts"
#define CANI1_NONM_ZCUF_CLIM_STTG_TEMPERATURE_FBK_NAME "ZCUF_ClimSttgTemperatureFbk"
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_NAME "ZCUF_CenLock_Info"
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_NAME "ACM_ActvTrackingStatus"
#define CANI1_NONM_IVI_DR_WNDW_CNTR_NAME "IVI_DrWndw_Cntr"
#define CANI1_NONM_MFS_SWITCH_REQ_NAME "MFS_SwitchReq"
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_NAME "IVI_DrvrSeatStoredProfile"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_NAME "TBOX_DrvrId_Info"
#define CANI1_NONM_IVI_HVAC_CNTRL_NAME "IVI_HvacCntrl"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_NAME "IVI_HvacSwt_Req"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_NAME "IVI_UsrBodyCntrl_Req"
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_NAME "IVI_UsrChassisCntrl_Req"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_NAME "IVI_UsrSeatAdjComfrt_Req"
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_NAME "IVI_Vehicle_Mode_Ctrl"
#define CANI1_NONM_TBOX_WARNING_NAME "TBOX_Warning"
#define CANI1_NONM_VCU_WARNING_NAME "VCU_Warning"
#define CANI1_NONM_ZCUF_WARNING_NAME "ZCUF_Warning"
#define CANI1_NONM_ACM_WARNING_NAME "ACM_Warning"
#define CANI1_NONM_DCMRL_WARNING_NAME "DCMRL_Warning"
#define CANI1_NONM_DCMRR_WARNING_NAME "DCMRR_Warning"
#define CANI1_NONM_ASU_WARNING_NAME "ASU_Warning"
#define CANI1_NONM_DCMP_WARNING_NAME "DCMP_Warning"
#define CANI1_NONM_BMS_WARNING_NAME "BMS_Warning"
#define CANI1_NONM_DCMD_WARNING_NAME "DCMD_Warning"
#define CANI1_NONM_EBCM_WARNING_NAME "EBCM_Warning"
#define CANI1_NONM_OBC_WARNING_NAME "OBC_Warning"
#define CANI1_NONM_EPS_RWA1_WARNING_NAME "EPS_RWA1_Warning"
#define CANI1_NONM_EPS_SFA1_WARNING_NAME "EPS_SFA1_Warning"
#define CANI1_NONM_EPS_RWA2_WARNING_NAME "EPS_RWA2_Warning"
#define CANI1_NONM_EPS_SFA2_WARNING_NAME "EPS_SFA2_Warning"
#define CANI1_NONM_HDLML_WARNING_NAME "HDLML_Warning"
#define CANI1_NONM_HDLMR_WARNING_NAME "HDLMR_Warning"
#define CANI1_NONM_SBM_WARNING_NAME "SBM_Warning"
#define CANI1_NONM_CCU_WARNING_NAME "CCU_Warning"
#define CANI1_NONM_MCU_F_WARNING_NAME "MCU_F_Warning"
#define CANI1_NONM_MCU_R_WARNING_NAME "MCU_R_Warning"
#define CANI1_NONM_MFS_WARNING_NAME "MFS_Warning"
#define CANI1_NONM_DCDC_WARNING_NAME "DCDC_Warning"
#define CANI1_NONM_PSMD_WARNING_NAME "PSMD_Warning"
#define CANI1_NONM_PSMP_WARNING_NAME "PSMP_Warning"
#define CANI1_NONM_RWSM_WARNING_NAME "RWSM_Warning"
#define CANI1_NONM_ZCUR_WARNING_NAME "ZCUR_Warning"
#define CANI1_NONM_TLML_WARNING_NAME "TLML_Warning"
#define CANI1_NONM_TLMR_WARNING_NAME "TLMR_Warning"
#define CANI1_NONM_RLML_WARNING_NAME "RLML_Warning"
#define CANI1_NONM_RLMR_WARNING_NAME "RLMR_Warning"
#define CANI1_NONM_SLMFC_WARNING_NAME "SLMFC_Warning"
#define CANI1_NONM_SLMFL_WARNING_NAME "SLMFL_Warning"
#define CANI1_NONM_SLMFR_WARNING_NAME "SLMFR_Warning"
#define CANI1_NONM_SLMRC_WARNING_NAME "SLMRC_Warning"
#define CANI1_NONM_IVI_DIAG_RESP_NAME "IVI_DiagResp"
#define CANI1_NONM_WLC_DIAG_RESP_NAME "WLC_DiagResp"
#define CANI1_NONM_IVI_DIAG_REQ_NAME "IVI_DiagReq"
#define CANI1_NONM_WLC_DIAG_REQ_NAME "WLC_DiagReq"
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_NAME "OBD_FuncDiagReq"

/* Signal Names. */
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_OBD_FUNC_DIAG_RESP_BYTE0_NAME "OBD_FuncDiagResp_Byte0"
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_OBD_FUNC_DIAG_RESP_BYTE1_NAME "OBD_FuncDiagResp_Byte1"
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_OBD_FUNC_DIAG_RESP_BYTE2_NAME "OBD_FuncDiagResp_Byte2"
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_OBD_FUNC_DIAG_RESP_BYTE3_NAME "OBD_FuncDiagResp_Byte3"
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_OBD_FUNC_DIAG_RESP_BYTE4_NAME "OBD_FuncDiagResp_Byte4"
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_OBD_FUNC_DIAG_RESP_BYTE5_NAME "OBD_FuncDiagResp_Byte5"
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_OBD_FUNC_DIAG_RESP_BYTE6_NAME "OBD_FuncDiagResp_Byte6"
#define CANI1_NONM_OBD_FUNC_DIAG_RESP_OBD_FUNC_DIAG_RESP_BYTE7_NAME "OBD_FuncDiagResp_Byte7"
#define CANI1_NONM_ACM_CRASH_STAT_CRC_ACM_CRASH_STAT_NAME "CRC_ACM_CrashStat"
#define CANI1_NONM_ACM_CRASH_STAT_ALV_CTR_ACM_CRASH_STAT_NAME "AlvCtr_ACM_CrashStat"
#define CANI1_NONM_ACM_CRASH_STAT_AIRBG_CRASH_STS_NAME "Airbg_CrashSts"
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_CRC_EPS_SFA_STEER_WHL_PUB_INFO_NAME "CRC_EPS_SFA_SteerWhl_Pub_Info"
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_ALV_CTR_EPS_SFA_STEER_WHL_PUB_INFO_NAME "AlvCtr_EPS_SFA_SteerWhl_Pub_Info"
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_STEER_WHL_TQ_NAME "Stbwr_SfaSteerWhlTq"
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_EMGCY_REQ_NAME "Stbwr_SfaEmgcyReq"
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_STEER_WHL_AG_NAME "Stbwr_SfaSteerWhlAg"
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_TUN_STS_NAME "Stbwr_TunSts"
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_CENTRG_STS_NAME "Stbwr_CentrgSts"
#define CANI1_NONM_EPS_SFA_STEER_WHL_PUB_INFO_STBWR_SFA_CTL_MODE_NAME "Stbwr_SfaCtlMode"
#define CANI1_NONM_VCU_E_TRACT_SYS_INFO_CRC_VCU_E_TRACT_SYS_INFO_NAME "CRC_VCU_ETractSys_Info"
#define CANI1_NONM_VCU_E_TRACT_SYS_INFO_ALV_CTR_VCU_E_TRACT_SYS_INFO_NAME "AlvCtr_VCU_ETractSys_Info"
#define CANI1_NONM_VCU_E_TRACT_SYS_INFO_DTQMT_TGT_TQ_EDS_RE_NAME "Dtqmt_TgtTqEdsRe"
#define CANI1_NONM_VCU_E_TRACT_SYS_INFO_DTQMT_TGT_TQ_EDS_FRNT_NAME "Dtqmt_TgtTqEdsFrnt"
#define CANI1_NONM_RWSM_INFO_CRC_RWSM_INFO_NAME "CRC_RWSM_Info"
#define CANI1_NONM_RWSM_INFO_ALV_CTR_RWSM_INFO_NAME "AlvCtr_RWSM_Info"
#define CANI1_NONM_RWSM_INFO_RE_WHL_STEER_MEASD_STK_VAL_NAME "ReWhlSteer_MeasdStkVal"
#define CANI1_NONM_RWSM_INFO_RE_WHL_STEER_STS_NAME "ReWhlSteer_Sts"
#define CANI1_NONM_BMS_STS_CRC_BMS_STS_NAME "CRC_BMS_Sts"
#define CANI1_NONM_BMS_STS_ALV_CTR_BMS_STS_NAME "AlvCtr_BMS_Sts"
#define CANI1_NONM_BMS_STS_BMS_BAT_PRE_CDN_STS_NAME "Bms_BatPreCdnSts"
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_CRC_EPS_RWA_PINION_PUB_INFO_NAME "CRC_EPS_RWA_Pinion_Pub_Info"
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_ALV_CTR_EPS_RWA_PINION_PUB_INFO_NAME "AlvCtr_EPS_RWA_Pinion_Pub_Info"
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_STBWR_RWA_PINION_AG_NAME "Stbwr_RwaPinionAg"
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_STBWR_RWA_PINION_AG_SPD_NAME "Stbwr_RwaPinionAgSpd"
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_STBWR_RWA_RACK_POSN_NAME "Stbwr_RwaRackPosn"
#define CANI1_NONM_EPS_RWA_PINION_PUB_INFO_STBWR_RWA_RACK_SPD_NAME "Stbwr_RwaRackSpd"
#define CANI1_NONM_EBCM_VEH_INFO_CRC_EBCM_VEH_INFO_NAME "CRC_EBCM_Veh_Info"
#define CANI1_NONM_EBCM_VEH_INFO_ALV_CTR_EBCM_VEH_INFO_NAME "AlvCtr_EBCM_Veh_Info"
#define CANI1_NONM_EBCM_VEH_INFO_ABS_ACT_VEH_SPD_NAME "Abs_ActVehSpd"
#define CANI1_NONM_ZCUF_CLAMP_INFO_CRC_ZCUF_CLAMP_INFO_NAME "CRC_ZCUF_Clamp_Info"
#define CANI1_NONM_ZCUF_CLAMP_INFO_ALV_CTR_ZCUF_CLAMP_INFO_NAME "AlvCtr_ZCUF_Clamp_Info"
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_VEH_ST_NAME "Clmmg_VehSt"
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_CL15_L_NAME "Clmmg_CL15_L"
#define CANI1_NONM_ZCUF_CLAMP_INFO_CLMMG_CL30_S_L_NAME "Clmmg_CL30S_L"
#define CANI1_NONM_ZCUF_CLAMP_INFO_LVM_LOA_SHED_REQ_NAME "Lvm_LoaShedReq"
#define CANI1_NONM_ASU_SNSR_INFO_CRC_ASU_SNSR_INFO_NAME "CRC_ASU_SnsrInfo"
#define CANI1_NONM_ASU_SNSR_INFO_ALV_CTR_ASU_SNSR_INFO_NAME "AlvCtr_ASU_SnsrInfo"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_FL_NAME "AirSuspUnit_HeiFL"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_FR_NAME "AirSuspUnit_HeiFR"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_RR_NAME "AirSuspUnit_HeiRR"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_RL_NAME "AirSuspUnit_HeiRL"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_HEI_STS_NAME "AirSuspUnit_HeiSts"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CDC_MODE_STS_NAME "AirSuspUnit_CdcModeSts"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_INGRS_MOD_ACK_NAME "AirSuspUnit_IngrsModAck"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SPRG_MODE_STS_NAME "AirSuspUnit_SprgModeSts"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_CMPR_STS_NAME "AirSuspUnit_CmprSts"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_SRV_MODE_STS_NAME "AirSuspUnit_SrvModeSts"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_AIR_TANK_P_NAME "AirSuspUnit_AirTankP"
#define CANI1_NONM_ASU_SNSR_INFO_AIR_SUSP_UNIT_STS_NAME "AirSuspUnit_Sts"
#define CANI1_NONM_VCU_BATT_INFO_CRC_VCU_BATT_INFO_NAME "CRC_VCU_Batt_Info"
#define CANI1_NONM_VCU_BATT_INFO_ALV_CTR_VCU_BATT_INFO_NAME "AlvCtr_VCU_Batt_Info"
#define CANI1_NONM_VCU_BATT_INFO_BMS_PACK_I_NAME "Bms_PackI"
#define CANI1_NONM_VCU_BATT_INFO_BMS_PACK_U_NAME "Bms_PackU"
#define CANI1_NONM_VCU_BATT_INFO_ACCHG_RMNG_CHG_TI_NAME "Acchg_RmngChgTi"
#define CANI1_NONM_VCU_BATT_INFO_FSCHG_RMNG_CHG_TI_NAME "Fschg_RmngChgTi"
#define CANI1_NONM_VCU_CHARGING_INFO_CRC_VCU_CHARGING_INFO_NAME "CRC_VCU_Charging_Info"
#define CANI1_NONM_VCU_CHARGING_INFO_ALV_CTR_VCU_CHARGING_INFO_NAME "AlvCtr_VCU_Charging_Info"
#define CANI1_NONM_VCU_CHARGING_INFO_FSCHG_DC_CHG_GUN_IN_NAME "Fschg_DcChgGunIn"
#define CANI1_NONM_VCU_CHARGING_INFO_ACCHG_AC_CHG_GUN_IN_NAME "Acchg_AcChgGunIn"
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_CRC_VCU_HV_DRV_SYS_STATUS_NAME "CRC_VCU_HVDrvSys_Status"
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ALV_CTR_VCU_HV_DRV_SYS_STATUS_NAME "AlvCtr_VCU_HVDrvSys_Status"
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_NAME "Drvmc_ActDrvMode"
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ENMGT_HV_DRV_SYS_STS_NAME "Enmgt_HvDrvSysSts"
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_DRVMC_ACT_DRV_MODE_VLD_NAME "Drvmc_ActDrvModeVld"
#define CANI1_NONM_VCU_HV_DRV_SYS_STATUS_ESHIFT_ACT_GEAR_NAME "Eshift_ActGear"
#define CANI1_NONM_EBCM_STS_REQ_CRC_EBCM_STS_REQ_NAME "CRC_EBCM_Sts_Req"
#define CANI1_NONM_EBCM_STS_REQ_ALV_CTR_EBCM_STS_REQ_NAME "AlvCtr_EBCM_Sts_Req"
#define CANI1_NONM_EBCM_STS_REQ_ABS_INTV_STS_NAME "Abs_IntvSts"
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_TCS_AVL_NAME "Drvac_TcsAvl"
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_FLD_LVL_INDCR_BRK_FLD_STS_NAME "Drvac_FldLvlIndcrBrkFldSts"
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_BRK_LI_ON_REQ_NAME "Ecpbk_BrkLiOnReq"
#define CANI1_NONM_EBCM_STS_REQ_EBD_SYS_STS_NAME "Ebd_SysSts"
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_HDC_STS_NAME "Drvac_HdcSts"
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_TCS_STS_NAME "Drvac_TcsSts"
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_CORNERING_BRK_CTL_STS_NAME "Drvac_CorneringBrkCtlSts"
#define CANI1_NONM_EBCM_STS_REQ_DRVAC_HILL_STRT_ASSI_STS_NAME "Drvac_HillStrtAssiSts"
#define CANI1_NONM_EBCM_STS_REQ_ECPBK_STS_NAME "Ecpbk_Sts"
#define CANI1_NONM_ZCUR_LAMP_CMD_CRC_ZCUR_LAMP_CMD_NAME "CRC_ZCUR_LampCmd"
#define CANI1_NONM_ZCUR_LAMP_CMD_ALV_CTR_ZCUR_LAMP_CMD_NAME "AlvCtr_ZCUR_LampCmd"
#define CANI1_NONM_SBM_LV_BAT_INFO_1_CRC_SBM_LV_BAT_INFO_1_NAME "CRC_SBM_LVBatInfo_1"
#define CANI1_NONM_SBM_LV_BAT_INFO_1_ALV_CTR_SBM_LV_BAT_INFO_1_NAME "AlvCtr_SBM_LVBatInfo_1"
#define CANI1_NONM_SBM_LV_BAT_INFO_1_SBM_LV_BATT_V_NAME "Sbm_LVBattV"
#define CANI1_NONM_SBM_LV_BAT_INFO_1_SBM_LV_BAT_THERM_RUNAWY_NAME "Sbm_LvBatThermRunawy"
#define CANI1_NONM_SBM_LV_BAT_INFO_2_CRC_SBM_LV_BAT_INFO_2_NAME "CRC_SBM_LVBatInfo_2"
#define CANI1_NONM_SBM_LV_BAT_INFO_2_ALV_CTR_SBM_LV_BAT_INFO_2_NAME "AlvCtr_SBM_LVBatInfo_2"
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_LV_BAT_ACT_SOH_NAME "Sbm_LVBatActSoh"
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_CRITICAL_SO_C_ALERT_NAME "Sbm_CriticalSoCAlert"
#define CANI1_NONM_SBM_LV_BAT_INFO_2_SBM_LV_BATT_T_NAME "Sbm_LvBattT"
#define CANI1_NONM_VCU_CONSUMPTION_INFO_ENGMT_LV_AUX_AVG_ENG_CNS_NAME "Engmt_LvAuxAvgEngCns"
#define CANI1_NONM_VCU_CONSUMPTION_INFO_ENGMT_INTTS_ENG_CNS_RATE_NAME "Engmt_InttsEngCnsRate"
#define CANI1_NONM_VCU_CONSUMPTION_INFO_ENGMT_TOT_AVG_ENG_CNS_NAME "Engmt_TotAvgEngCns"
#define CANI1_NONM_VCU_CONSUMPTION_INFO_ENGMT_EDS_AVG_ENG_CNS_NAME "Engmt_EdsAvgEngCns"
#define CANI1_NONM_VCU_CONSUMPTION_INFO_ENGMT_THERM_AVG_ENG_CNS_NAME "Engmt_ThermAvgEngCns"
#define CANI1_NONM_VCU_TO_VEH_INFO_CRC_VCU_TO_VEH_INFO_NAME "CRC_VCU_To_Veh_Info"
#define CANI1_NONM_VCU_TO_VEH_INFO_ALV_CTR_VCU_TO_VEH_INFO_NAME "AlvCtr_VCU_To_Veh_Info"
#define CANI1_NONM_VCU_TO_VEH_INFO_ACCHG_HV_BAT_SOC_NAME "Acchg_HVBatSoc"
#define CANI1_NONM_VCU_TO_VEH_INFO_ACCHG_AC_CHG_STS_NAME "Acchg_AcChgSts"
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_NAME "Awd_ActWhlDrvMode"
#define CANI1_NONM_VCU_TO_VEH_INFO_ENGMT_CHRGR_DLV_PWR_NAME "Engmt_ChrgrDlvPwr"
#define CANI1_NONM_VCU_TO_VEH_INFO_ENGMT_VEH_RMNG_DRV_RNG_NAME "Engmt_VehRmngDrvRng"
#define CANI1_NONM_VCU_TO_VEH_INFO_CREGB_COAST_RGN_LVL_INDCR_NAME "Cregb_CoastRgnLvlIndcr"
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_VEH_CHRGN_STS_NAME "Fschg_VehChrgnSts"
#define CANI1_NONM_VCU_TO_VEH_INFO_ESHIFT_CHNG_GEAR_FROM_PARK_NAME "Eshift_ChngGearFromPark"
#define CANI1_NONM_VCU_TO_VEH_INFO_ENGMT_VEH_MILG_NAME "Engmt_VehMilg"
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_HV_BAT_SOC_NAME "Fschg_HVBatSoc"
#define CANI1_NONM_VCU_TO_VEH_INFO_FSCHG_CHG_GUN_LOCK_STS_NAME "Fschg_ChgGunLockSts"
#define CANI1_NONM_VCU_TO_VEH_INFO_AWD_ACT_WHL_DRV_MODE_VLD_NAME "Awd_ActWhlDrvModeVld"
#define CANI1_NONM_ZCUF_RLHS_LIGHT_INFO_CRC_ZCUF_RLHS_LIGHT_INFO_NAME "CRC_ZCUF_RlhsLight_Info"
#define CANI1_NONM_ZCUF_RLHS_LIGHT_INFO_ALV_CTR_ZCUF_RLHS_LIGHT_INFO_NAME "AlvCtr_ZCUF_RlhsLight_Info"
#define CANI1_NONM_ZCUF_RLHS_LIGHT_INFO_RLHS_SOLAR_DRVR_NAME "Rlhs_SolarDrvr"
#define CANI1_NONM_ZCUF_RLHS_LIGHT_INFO_RLHS_SOLAR_PASS_NAME "Rlhs_SolarPass"
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_CRC_HDLML_FRONT_LAMP_STS_NAME "CRC_HDLML_FrontLamp_Sts"
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_ALV_CTR_HDLML_FRONT_LAMP_STS_NAME "AlvCtr_HDLML_FrontLamp_Sts"
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_LO_BEAM_LAMP_STS_NAME "Hdlamp_LeLoBeamLampSts"
#define CANI1_NONM_HDLML_FRONT_LAMP_STS_HDLAMP_LE_HI_BEAM_LAMP_STS_NAME "Hdlamp_LeHiBeamLampSts"
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_CRC_HDLMR_FRONT_LAMP_STS_NAME "CRC_HDLMR_FrontLamp_Sts"
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_ALV_CTR_HDLMR_FRONT_LAMP_STS_NAME "AlvCtr_HDLMR_FrontLamp_Sts"
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_LO_BEAM_LAMP_STS_NAME "Hdlamp_RiLoBeamLampSts"
#define CANI1_NONM_HDLMR_FRONT_LAMP_STS_HDLAMP_RI_HI_BEAM_LAMP_STS_NAME "Hdlamp_RiHiBeamLampSts"
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_CRC_SLMFL_FRONT_LAMP_STS_NAME "CRC_SLMFL_FrontLamp_Sts"
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_ALV_CTR_SLMFL_FRONT_LAMP_STS_NAME "AlvCtr_SLMFL_FrontLamp_Sts"
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_LE_FRNT_POSN_LAMP_STS_NAME "Hdlamp_LeFrntPosnLampSts"
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_LE_DRL_LAMP_STS_NAME "Hdlamp_LeDRLLampSts"
#define CANI1_NONM_SLMFL_FRONT_LAMP_STS_HDLAMP_FRNT_LE_BODY_TURN_INDCR_STS_NAME "Hdlamp_FrntLeBodyTurnIndcrSts"
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_CRC_SLMFR_FRONT_LAMP_STS_NAME "CRC_SLMFR_FrontLamp_Sts"
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_ALV_CTR_SLMFR_FRONT_LAMP_STS_NAME "AlvCtr_SLMFR_FrontLamp_Sts"
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_RI_FRNT_POSN_LAMP_STS_NAME "Hdlamp_RiFrntPosnLampSts"
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_RI_DRL_LAMP_STS_NAME "Hdlamp_RiDRLLampSts"
#define CANI1_NONM_SLMFR_FRONT_LAMP_STS_HDLAMP_FRNT_RI_BODY_TURN_INDCR_STS_NAME "Hdlamp_FrntRiBodyTurnIndcrSts"
#define CANI1_NONM_RLML_REAR_LAMP_STS_CRC_RLML_REAR_LAMP_STS_NAME "CRC_RLML_RearLampSts"
#define CANI1_NONM_RLML_REAR_LAMP_STS_ALV_CTR_RLML_REAR_LAMP_STS_NAME "AlvCtr_RLML_RearLampSts"
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_LE_BODY_BRK_LAMP_STS_NAME "Relamp_LeBodyBrkLampSts"
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_POSN_LAMP_STS_NAME "Relamp_ReLeBodyPosnLampSts"
#define CANI1_NONM_RLML_REAR_LAMP_STS_RELAMP_RE_LE_BODY_TURN_INDCR_STS_NAME "Relamp_ReLeBodyTurnIndcrSts"
#define CANI1_NONM_RLMR_REAR_LAMP_STS_CRC_RLMR_REAR_LAMP_STS_NAME "CRC_RLMR_RearLampSts"
#define CANI1_NONM_RLMR_REAR_LAMP_STS_ALV_CTR_RLMR_REAR_LAMP_STS_NAME "AlvCtr_RLMR_RearLampSts"
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RI_BODY_BRK_LAMP_STS_NAME "Relamp_RiBodyBrkLampSts"
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_POSN_LAMP_STS_NAME "Relamp_ReRiBodyPosnLampSts"
#define CANI1_NONM_RLMR_REAR_LAMP_STS_RELAMP_RE_RI_BODY_TURN_INDCR_STS_NAME "Relamp_ReRiBodyTurnIndcrSts"
#define CANI1_NONM_TLML_REAR_LAMP_STS_CRC_TLML_REAR_LAMP_STS_NAME "CRC_TLML_RearLampSts"
#define CANI1_NONM_TLML_REAR_LAMP_STS_ALV_CTR_TLML_REAR_LAMP_STS_NAME "AlvCtr_TLML_RearLampSts"
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_LE_TLG_BRK_LAMP_STS_NAME "Relamp_LeTLGBrkLampSts"
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_POSN_LAMP_STS_NAME "Relamp_ReLeTLGPosnLampSts"
#define CANI1_NONM_TLML_REAR_LAMP_STS_RELAMP_RE_LE_TLG_TURN_INDCR_STS_NAME "Relamp_ReLeTLGTurnIndcrSts"
#define CANI1_NONM_SLMFC_LAMP_STS_CRC_SLMFC_LAMP_STS_NAME "CRC_SLMFC_LampSts"
#define CANI1_NONM_SLMFC_LAMP_STS_ALV_CTR_SLMFC_LAMP_STS_NAME "AlvCtr_SLMFC_LampSts"
#define CANI1_NONM_SLMFC_LAMP_STS_HDLAMP_FRNT_CENTR_LE_SIGN_LAMP_STS_NAME "Hdlamp_FrntCentr_LeSignLampSts"
#define CANI1_NONM_SLMFC_LAMP_STS_HDLAMP_FRNT_CENTR_RI_SIGN_LAMP_STS_NAME "Hdlamp_FrntCentr_RiSignLampSts"
#define CANI1_NONM_SLMRC_LAMP_STS_CRC_SLMRC_LAMP_STS_NAME "CRC_SLMRC_LampSts"
#define CANI1_NONM_SLMRC_LAMP_STS_ALV_CTR_SLMRC_LAMP_STS_NAME "AlvCtr_SLMRC_LampSts"
#define CANI1_NONM_SLMRC_LAMP_STS_RELAMP_FRNT_CENTR_LE_SIGN_LAMP_STS_NAME "Relamp_FrntCentr_LeSignLampSts"
#define CANI1_NONM_SLMRC_LAMP_STS_RELAMP_FRNT_CENTR_RI_SIGN_LAMP_STS_NAME "Relamp_FrntCentr_RiSignLampSts"
#define CANI1_NONM_TLMR_REAR_LAMP_STS_CRC_TLMR_REAR_LAMP_STS_NAME "CRC_TLMR_RearLampSts"
#define CANI1_NONM_TLMR_REAR_LAMP_STS_ALV_CTR_TLMR_REAR_LAMP_STS_NAME "AlvCtr_TLMR_RearLampSts"
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RI_TLG_BRK_LAMP_STS_NAME "Relamp_RiTLGBrkLampSts"
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_POSN_LAMP_STS_NAME "Relamp_ReRiTLGPosnLampSts"
#define CANI1_NONM_TLMR_REAR_LAMP_STS_RELAMP_RE_RI_TLG_TURN_INDCR_STS_NAME "Relamp_ReRiTLGTurnIndcrSts"
#define CANI1_NONM_CCU_COMP_PWR_REQ_CCSF_AGS_OPEN_REQ_NAME "Ccsf_AgsOpenReq"
#define CANI1_NONM_CCU_TEMPERATURE_FBK_CRC_CCU_TEMPERATURE_FBK_NAME "CRC_CCU_TemperatureFbk"
#define CANI1_NONM_CCU_TEMPERATURE_FBK_ALV_CTR_CCU_TEMPERATURE_FBK_NAME "AlvCtr_CCU_TemperatureFbk"
#define CANI1_NONM_CCU_TEMPERATURE_FBK_CACLH_AMB_T_NAME "Caclh_AmbT"
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_CRC_ZCUF_RLHS_RAIN_HUMIDITY_INFO_NAME "CRC_ZCUF_RlhsRainHumidity_Info"
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_ALV_CTR_ZCUF_RLHS_RAIN_HUMIDITY_INF_NAME "AlvCtr_ZCUF_RlhsRainHumidity_Inf"
#define CANI1_NONM_ZCUF_RLHS_RAIN_HUMIDITY_INFO_RLHS_RAIN_FALL_STS_NAME "Rlhs_RainFallSts"
#define CANI1_NONM_ADAS_RVC_INFO_CRC_ADAS_RVC_INFO_NAME "CRC_ADAS_Rvc_Info"
#define CANI1_NONM_ADAS_RVC_INFO_ALV_CTR_ADAS_RVC_INFO_NAME "AlvCtr_ADAS_Rvc_Info"
#define CANI1_NONM_ADAS_RVC_INFO_RVC_RE_BLIND_SPOT_STS_NAME "Rvc_ReBlindSpot_Sts"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_IVI_ACCHR_CHRGGUN_UNLCK_CMD_NAME "IVI_Acchr_chrggunUnlck_cmd"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_CHG_STOP_REQ_NAME "Acchg_IviChgStopReq"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_CHRGN_SDLE_TI_NAME "Acchg_ChrgnSdleTi"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_MAX_CHG_I_LIM_NAME "Acchg_IviMaxChgILim"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_PEAK_HOUR_MNGT_ENA_NAME "Acchg_PeakHourMngtEna"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_ENA_SDLE_CHRGN_NAME "Acchg_IviEnaSdleChrgn"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ACCHG_IVI_TGT_CHG_SOC_LVL_NAME "Acchg_IviTgtChgSocLvl"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_AWD_WHL_DRV_MODE_SELN_NAME "Awd_WhlDrvModeSeln"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_ESHIFT_TOW_MODE_REQ_NAME "Eshift_TowMode_Req"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_VALET_MODE_ACVN_STS_NAME "Drvmc_ValetModeAcvnSts"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_WASH_MODE_ACVN_STS_NAME "Drvmc_WashModeAcvnSts"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_SRV_MODE_SPD_LIM_NAME "Dtqmt_SrvModeSpdLim"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_SHOWROOM_MODE_ACVN_STS_NAME "Drvmc_ShowroomModeAcvnSts"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_SRV_SPD_OVRR_ENA_NAME "Dtqmt_SrvSpdOvrrEna"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_TRSPT_MODE_ACVN_STS_NAME "Drvmc_TrsptModeAcvnSts"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DTQMT_VALET_MODE_SPD_LIM_NAME "Dtqmt_ValetModeSpdLim"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_DRVMC_DRV_MODE_SELN_REQ_NAME "Drvmc_DrvModeSelnReq"
#define CANI1_NONM_IVI_EPT_FEATURE_INFO_CREGB_REGEN_LVL_REQ_NAME "Cregb_RegenLvl_Req"
#define CANI1_NONM_ZCUR_IVI_STS_CRC_ZCUR_IVI_STS_NAME "CRC_ZCUR_IVI_Sts"
#define CANI1_NONM_ZCUR_IVI_STS_ALV_CTR_ZCUR_IVI_STS_NAME "AlvCtr_ZCUR_IVI_Sts"
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_STS_NAME "Acttg_TailGateSts"
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_NMLZN_STS_NAME "Acttg_TailGateNmlznSts"
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_TAIL_GATE_AJAR_STS_NAME "Acttg_TailGateAjarSts"
#define CANI1_NONM_ZCUR_IVI_STS_ACTTG_ACT_POSN_AG_STS_NAME "Acttg_ActPosnAgSts"
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_STS_NAME "SeatCfmt_ReLeVentnSts"
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_STS_NAME "SeatCfmt_ReRiVentnSts"
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_CSHN_FAN_FAIL_STS_NAME "SeatCfmt_ReLeVentnCshnFanFailSts"
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_LE_VENTN_SQUB_FAN_FAIL_STS_NAME "SeatCfmt_ReLeVentnSqubFanFailSts"
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_CSHN_FAN_FAIL_STS_NAME "SeatCfmt_ReRiVentnCshnFanFailSts"
#define CANI1_NONM_ZCUR_IVI_STS_SEAT_CFMT_RE_RI_VENTN_SQUB_FAN_FAIL_STS_NAME "SeatCfmt_ReRiVentnSqubFanFailSts"
#define CANI1_NONM_ZCUR_IVI_STS_CHRGR_PORT_LOCK_UNLCK_STS_NAME "ChrgrPort_LockUnlck_Sts"
#define CANI1_NONM_ZCUR_IVI_STS_CHRGR_PORT_AJAR_STS_NAME "ChrgrPort_Ajar_Sts"
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_RI_LICE_PLATE_STS_NAME "Relamp_RiLicePlateSts"
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_LE_LICE_PLATE_STS_NAME "Relamp_LeLicePlateSts"
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_FOG_LAMP_STS_NAME "Relamp_FogLampSts"
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_CHMSL_STS_NAME "Relamp_ChmslSts"
#define CANI1_NONM_ZCUR_IVI_STS_RELAMP_REV_LMP_STS_NAME "Relamp_RevLmpSts"
#define CANI1_NONM_CCU_FAULT_STS_CRC_CCU_FAULT_STS_NAME "CRC_CCU_FaultSts"
#define CANI1_NONM_CCU_FAULT_STS_ALV_CTR_CCU_FAULT_STS_NAME "AlvCtr_CCU_FaultSts"
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRNT_BLOWR_FLT_STS_NAME "Ccsf_FrntBlowrFltSts"
#define CANI1_NONM_CCU_FAULT_STS_CCSR_RE_BLOWR_FLT_STS_NAME "Ccsr_ReBlowrFltSts"
#define CANI1_NONM_CCU_FAULT_STS_CCSF_IONISER_FLT_STS_NAME "Ccsf_IoniserFltSts"
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRAGN_CONN_LOSS_NAME "Ccsf_FragnConnLoss"
#define CANI1_NONM_CCU_FAULT_STS_CCSF_FRGRNC_FLT_STS_NAME "Ccsf_FrgrncFltSts"
#define CANI1_NONM_CCU_FAULT_STS_CCSF_IONISER_CONN_LOSS_NAME "Ccsf_IoniserConnLoss"
#define CANI1_NONM_CCU_FAULT_STS_CCSF_DEMIST_FLAP_FLT_STS_NAME "Ccsf_DemistFlapFltSts"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CRC_CCU_CLIM_SYS_STS_NAME "CRC_CCU_ClimSys_Sts"
#define CANI1_NONM_CCU_CLIM_SYS_STS_ALV_CTR_CCU_CLIM_SYS_STS_NAME "AlvCtr_CCU_ClimSys_Sts"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_MODE_SELN_FB_NAME "Ccsf_AirModeSelnFb"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_FRNT_BLOWR_LVL_FB_NAME "Ccsf_FrntBlowrLvlFb"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_IONISER_ON_OFF_STS_NAME "Ccsf_IoniserOnOffSts"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_DRVR_DEMIST_RCMN_NAME "Ccsf_DrvrDemistRcmn"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSR_RE_BLOWR_LVL_FB_NAME "Ccsr_ReBlowrLvlFb"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_RCL_FLAP_POS_NAME "Ccsf_RclFlapPos"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CO2_LVL_NAME "Ccsf_Co2Lvl"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CEN_LE_VEN_DIR_STS_NAME "Ccsf_CenLeVenDirSts"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_CEN_RI_VEN_DIR_STS_NAME "Ccsf_CenRiVenDirSts"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_AIR_QLY_IDX_NAME "Ccsf_AirQlyIdx"
#define CANI1_NONM_CCU_CLIM_SYS_STS_CCSF_RCL_MOD_FB_NAME "Ccsf_RclModFb"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CRC_CCU_AC_OP_MODE_STS_NAME "CRC_CCU_AcOpMode_Sts"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_ALV_CTR_CCU_AC_OP_MODE_STS_NAME "AlvCtr_CCU_AcOpMode_Sts"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSR_HALO_T_STS_NAME "Ccsr_HaloTSts"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_AC_AUTO_MODE_STS_NAME "Ccsf_AcAutoModeSts"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_AC_LOW_PWR_MODE_STS_NAME "Caclh_AcLowPwrModeSts"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_DEMIST_DEFRST_STS_NAME "Ccsf_DemistDefrstSts"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSF_FRNT_AC_ON_OFF_STS_NAME "Ccsf_FrntAcOnOffSts"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_FRNT_AC_OP_MODE_STS_NAME "Caclh_FrntAcOpModeSts"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CACLH_RE_AC_OP_MODE_STS_NAME "Caclh_ReAcOpModeSts"
#define CANI1_NONM_CCU_AC_OP_MODE_STS_CCSR_RE_AC_ON_OFF_STS_NAME "Ccsr_ReAcOnOffSts"
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CRC_CCU_CLIM_FRGRNC_STS_NAME "CRC_CCU_ClimFrgrnc_Sts"
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_ALV_CTR_CCU_CLIM_FRGRNC_STS_NAME "AlvCtr_CCU_ClimFrgrnc_Sts"
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC3LEVEL_STS_NAME "Ccsf_Frgrnc3levelSts"
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_INTEN_STS_NAME "Ccsf_FrgrncIntenSts"
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_ON_OFF_STS_NAME "Ccsf_FrgrncOnOffSts"
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC1LEVEL_STS_NAME "Ccsf_Frgrnc1levelSts"
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC_SELN_STS_NAME "Ccsf_FrgrncSelnSts"
#define CANI1_NONM_CCU_CLIM_FRGRNC_STS_CCSF_FRGRNC2LEVEL_STS_NAME "Ccsf_Frgrnc2levelSts"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_CRC_PSMD_SEAT_ADJUSTMENT_STATUS_NAME "CRC_PSMD_SeatAdjustment_Status"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_ALV_CTR_PSMD_SEAT_ADJMT_STS_NAME "AlvCtr_PSMD_SeatAdjmt_Sts"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_IN_OUT_POSN_NAME "SeatAdjmt_DrvLumInOutPosn"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_UP_DWN_POSN_NAME "SeatAdjmt_DrvLumUpDwnPosn"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_LUM_SYS_FAIL_STS_NAME "SeatAdjmt_DrvLumSysFailSts"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_STS_NAME "SeatAdjmt_DrvHeiUpDwnMotSts"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_STS_NAME "SeatAdjmt_DrvReclUpDwnMotSts"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_ADJMT_STS_NAME "SeatAdjmt_DrvAdjmtSts"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_FRNT_BACK_MOT_STS_NAME "SeatAdjmt_DrvFrntBackMotSts"
#define CANI1_NONM_PSMD_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_STS_NAME "SeatAdjmt_DrvTiltUpDwnMotSts"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_CRC_PSMP_SEAT_ADJUSTMENT_STATUS_NAME "CRC_PSMP_SeatAdjustment_Status"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_ALV_CTR_PSMP_SEAT_ADJMT_STS_NAME "AlvCtr_PSMP_SeatAdjmt_Sts"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_IN_OUT_POSN_NAME "SeatAdjmt_PassLumInOutPosn"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_UP_DOWN_POSN_NAME "SeatAdjmt_PassLumUpDownPosn"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_LUM_SYS_FAIL_STS_NAME "SeatAdjmt_PassLumSysFailSts"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_STS_NAME "SeatAdjmt_PassReclUpDwnMotSts"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_STS__NAME "SeatAdjmt_PassHeiUpDwnMotSts_"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_ADJMT_STS_NAME "SeatAdjmt_PassAdjmtSts"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_STS_NAME "SeatAdjmt_PassFowdBawdMotSts"
#define CANI1_NONM_PSMP_SEAT_ADJUSTMENT_STATUS_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_STS_NAME "SeatAdjmt_PassTiltUpDwnMotSts"
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_CRC_PSMD_SEAT_POS_STATUS_NAME "CRC_PSMD_SeatPos_Status"
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_ALV_CTR_PSMD_SEAT_POS_STATUS_NAME "AlvCtr_PSMD_SeatPos_Status"
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_SEAT_ADJMT_DRV_FOWD_BAWD_POSN_NAME "SeatAdjmt_DrvFowdBawdPosn"
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_SEAT_ADJMT_DRV_HEI_UP_DWN_POSN_NAME "SeatAdjmt_DrvHeiUpDwnPosn"
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_SEAT_ADJMT_DRV_RECL_UP_DWN_POSN_NAME "SeatAdjmt_DrvReclUpDwnPosn"
#define CANI1_NONM_PSMD_SEAT_POS_STATUS_SEAT_ADJMT_DRV_TILT_UP_DWN_POSN_NAME "SeatAdjmt_DrvTiltUpDwnPosn"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_CRC_PSMD_SEAT_CMFRT_STATUS_NAME "CRC_PSMD_SeatCmfrt_Status"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_ALV_CTR_PSMD_SEAT_CMFRT_STATUS_NAME "AlvCtr_PSMD_SeatCmfrt_Status"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_STS_NAME "SeatCfmt_DrvHeatgSts"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_STS_NAME "SeatCfmt_DrvVentnSts"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_CSHN_FAN_FAIL_STS_NAME "SeatCfmt_DrvVentnCshnFanFailSts"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_BACK_PAD_FAIL_STS_NAME "SeatCfmt_DrvHeatgBackPadFailSts"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_MASSG_FAIL_STS_NAME "SeatCfmt_DrvMassgFailSts"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_HEATG_CSHN_PAD_FAIL_STS_NAME "SeatCfmt_DrvHeatgCshnPadFailSts"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_MASSG_STS_NAME "SeatCfmt_DrvMassg_Sts"
#define CANI1_NONM_PSMD_SEAT_CMFRT_STATUS_SEAT_CFMT_DRV_VENTN_SQUB_FAN_FAIL_STS_NAME "SeatCfmt_DrvVentnSqubFanFailSts"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_CRC_PSMP_SEAT_CMFRT_STATUS_NAME "CRC_PSMP_SeatCmfrt_Status"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_ALV_CTR_PSMP_SEAT_CMFRT_STATUS_NAME "AlvCtr_PSMP_SeatCmfrt_Status"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_STS_NAME "SeatCfmt_PassVentnSts"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_STS_NAME "SeatCfmt_PassHeatgSts"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_MASSG_STS_NAME "SeatCfmt_PassMassgSts"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_SQUB_FAN_FAIL_STS_NAME "SeatCfmt_PassVentnSqubFanFailSts"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_MASSG_FAIL_STS_NAME "SeatCfmt_PassMassgFailSts"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_VENTN_CSHN_FAN_FAIL_STS_NAME "SeatCfmt_PassVentnCshnFanFailSts"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_BACK_PAD_FAIL_STS_NAME "SeatCfmt_PassHeatgBackPadFailSts"
#define CANI1_NONM_PSMP_SEAT_CMFRT_STATUS_SEAT_CFMT_PASS_HEATG_CSHN_PAD_FAIL_STS_NAME "SeatCfmt_PassHeatgCshnPadFailSts"
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_CRC_PSMP_SEAT_POS_STATUS_NAME "CRC_PSMP_SeatPos_Status"
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_ALV_CTR_PSMP_SEAT_POS_STATUS_NAME "AlvCtr_PSMP_SeatPos_Status"
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_SEAT_ADJMT_PASS_FOWD_BAWD_POSN_NAME "SeatAdjmt_PassFowdBawdPosn"
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_SEAT_ADJMT_PASS_HEI_UP_DWN_POSN_NAME "SeatAdjmt_PassHeiUpDwnPosn"
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_SEAT_ADJMT_PASS_RECL_UP_DWN_POSN_NAME "SeatAdjmt_PassReclUpDwnPosn"
#define CANI1_NONM_PSMP_SEAT_POS_STATUS_SEAT_ADJMT_PASS_TILT_UP_DWN_POSN_NAME "SeatAdjmt_PassTiltUpDwnPosn"
#define CANI1_NONM_DCMD_CLOSURE_STS_CRC_DCMD_CLOSURE_STS_NAME "CRC_DCMD_ClosureSts"
#define CANI1_NONM_DCMD_CLOSURE_STS_ALV_CTR_DCMD_CLOSURE_STS_NAME "AlvCtr_DCMD_ClosureSts"
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_STS_NAME "Pwd_DrvrDoorSts"
#define CANI1_NONM_DCMD_CLOSURE_STS_CEN_LOCK_DRVR_DOOR_LOCK_UNLCK_STS_NAME "CenLock_DrvrDoorLockUnlckSts"
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRVR_DOOR_NMLZN_STS_NAME "Pwd_DrvrDoorNmlznSts"
#define CANI1_NONM_DCMD_CLOSURE_STS_CEN_LOCK_DRVR_DOOR_AJAR_STS_NAME "CenLock_DrvrDoorAjarSts"
#define CANI1_NONM_DCMD_CLOSURE_STS_PWIND_DRV_WNDW_STS_NAME "Pwind_DrvWndwSts"
#define CANI1_NONM_DCMD_CLOSURE_STS_PWD_DRV_DOOR_ACT_POS_NAME "Pwd_DrvDoorActPos"
#define CANI1_NONM_IVI_PSSNGR_SEAT_STORED_PROFILE_SEAT_ADJMT_PASS_HEI_STORED_POSN_NAME "SeatAdjmt_PassHeiStoredPosn"
#define CANI1_NONM_IVI_PSSNGR_SEAT_STORED_PROFILE_SEAT_ADJMT_PASS_RECL_STORED_POSN_NAME "SeatAdjmt_PassReclStoredPosn"
#define CANI1_NONM_IVI_PSSNGR_SEAT_STORED_PROFILE_SEAT_ADJMT_PASS_TILT_STORED_POSN_NAME "SeatAdjmt_PassTiltStoredPosn"
#define CANI1_NONM_IVI_PSSNGR_SEAT_STORED_PROFILE_SEAT_ADJMT_PASS_FOWD_BAWD_STORED_POSN_NAME "SeatAdjmt_PassFowdBawdStoredPosn"
#define CANI1_NONM_VCU_STS_CRC_VCU_STS_NAME "CRC_VCU_Sts"
#define CANI1_NONM_VCU_STS_ALV_CTR_VCU_STS_NAME "AlvCtr_VCU_Sts"
#define CANI1_NONM_VCU_STS_ENGMT_LIMPHM_STS_NAME "Engmt_LimphmSts"
#define CANI1_NONM_VCU_STS_FSCHG_CHG_AUTHEN_STS_NAME "Fschg_ChgAuthenSts"
#define CANI1_NONM_VCU_STS_ACCHG_CHG_AUTHN_STS_NAME "Acchg_ChgAuthnSts"
#define CANI1_NONM_VCU_STS_THMGT_THERM_FLT_STS_NAME "Thmgt_ThermFltSts"
#define CANI1_NONM_VCU_STS_CREGB_COAST_RGN_TQ_PCTG_NAME "Cregb_CoastRgnTqPctg"
#define CANI1_NONM_VCU_STS_HFDIA_REMD_ACTN_NAME "Hfdia_RemdActn"
#define CANI1_NONM_VCU_STS_HVSCO_HV_SYS_STS_NAME "Hvsco_HvSysSts"
#define CANI1_NONM_DCMP_CLOSURE_STS_CRC_DCMP_CLOSURE_STS_NAME "CRC_DCMP_ClosureSts"
#define CANI1_NONM_DCMP_CLOSURE_STS_ALV_CTR_DCMP_CLOSURE_STS_NAME "AlvCtr_DCMP_ClosureSts"
#define CANI1_NONM_DCMP_CLOSURE_STS_CEN_LOCK_PASS_DOOR_AJAR_STS_NAME "CenLock_PassDoorAjarSts"
#define CANI1_NONM_DCMP_CLOSURE_STS_CEN_LOCK_PASS_DOOR_LOCK_UNLCK_STS_NAME "CenLock_PassDoorLockUnlckSts"
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_STS_NAME "Pwd_PassDoorSts"
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_ACT_POS_NAME "Pwd_PassDoorActPos"
#define CANI1_NONM_DCMP_CLOSURE_STS_PWIND_PASS_WNDW_STS_NAME "Pwind_PassWndwSts"
#define CANI1_NONM_DCMP_CLOSURE_STS_PWD_PASS_DOOR_NMLZN_STS_NAME "Pwd_PassDoorNmlznSts"
#define CANI1_NONM_DCMRR_CLOSURE_STS_CRC_DCMRR_CLOSURE_STS_NAME "CRC_DCMRR_ClosureSts"
#define CANI1_NONM_DCMRR_CLOSURE_STS_ALV_CTR_DCMRR_CLOSURE_STS_NAME "AlvCtr_DCMRR_ClosureSts"
#define CANI1_NONM_DCMRR_CLOSURE_STS_CEN_LOCK_RE_RI_DOOR_LOCK_UNLCK_STS_NAME "CenLock_ReRiDoorLockUnlckSts"
#define CANI1_NONM_DCMRR_CLOSURE_STS_PWIND_RE_RI_WNDW_STS_NAME "Pwind_ReRiWndwSts"
#define CANI1_NONM_DCMRL_CLOSURE_STS_CRC_DCMRL_CLOSURE_STS_NAME "CRC_DCMRL_ClosureSts"
#define CANI1_NONM_DCMRL_CLOSURE_STS_ALV_CTR_DCMRL_CLOSURE_STS_NAME "AlvCtr_DCMRL_ClosureSts"
#define CANI1_NONM_DCMRL_CLOSURE_STS_CEN_LOCK_RE_LE_DOOR_LOCK_UNLCK_STS_NAME "CenLock_ReLeDoorLockUnlckSts"
#define CANI1_NONM_DCMRL_CLOSURE_STS_CEN_LOCK_RE_LE_DOOR_AJAR_STS_NAME "CenLock_ReLeDoorAjarSts"
#define CANI1_NONM_DCMRL_CLOSURE_STS_PWIND_RE_LE_WNDW_STS_NAME "Pwind_ReLeWndwSts"
#define CANI1_NONM_ZCUF_WIPER_STS_CRC_ZCUF_WIPER_STS_NAME "CRC_ZCUF_WiperSts"
#define CANI1_NONM_ZCUF_WIPER_STS_ALV_CTR_ZCUF_WIPER_STS_NAME "AlvCtr_ZCUF_WiperSts"
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_PARK_POS_STS_NAME "Wipr_FrntLeParkPosSts"
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_SER_POS_STS_NAME "Wipr_FrntLeSerPosSts"
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_STS_NAME "Wipr_FrntLeSts"
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_PARK_POS_STS_NAME "Wipr_FrntRiParkPosSts"
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_SER_POS_STS_NAME "Wipr_FrntRiSerPosSts"
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_STS_NAME "Wipr_FrntRiSts"
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_STS_NAME "Wipr_WshrSts"
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_WSHR_FLUID_LEVEL_STS_NAME "Wipr_WshrFluidLevelSts"
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_RI_FAILD_STS_NAME "Wipr_FrntRiFaildSts"
#define CANI1_NONM_ZCUF_WIPER_STS_WIPR_FRNT_LE_FAILD_STS_NAME "Wipr_FrntLeFaildSts"
#define CANI1_NONM_ZCUF_CLIM_STTG_TEMPERATURE_FBK_CCS_DRVR_SIDE_SET_T_VAL_STS_NAME "Ccs_DrvrSideSetTValSts"
#define CANI1_NONM_ZCUF_CLIM_STTG_TEMPERATURE_FBK_CCS_PASS_SIDE_SET_T_VAL_STS_NAME "Ccs_PassSideSetTValSts"
#define CANI1_NONM_ZCUF_CLIM_STTG_TEMPERATURE_FBK_CCS_RE_RI_SIDE_SET_T_VAL_STS_NAME "Ccs_ReRiSideSetTValSts"
#define CANI1_NONM_ZCUF_CLIM_STTG_TEMPERATURE_FBK_CCS_RE_LE_SIDE_SET_T_VAL_STS_NAME "Ccs_ReLeSideSetTValSts"
#define CANI1_NONM_ZCUF_CLIM_STTG_TEMPERATURE_FBK_CCS_HALO_SET_T_VAL_STS_NAME "Ccs_HaloSetTValSts"
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CRC_ZCUF_CEN_LOCK_INFO_NAME "CRC_ZCUF_CenLock_Info"
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_ALV_CTR_ZCUF_CEN_LOCK_INFO_NAME "AlvCtr_ZCUF_CenLock_Info"
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_C_APP_LOCK_UNLCK_ST_NAME "CenLock_CAppLockUnlckSt"
#define CANI1_NONM_ZCUF_CEN_LOCK_INFO_CEN_LOCK_LOCK_UNLCK_STS_NAME "CenLock_LockUnlckSts"
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_CRC_ACM_ACTV_TRACKING_STATUS_NAME "CRC_ACM_ActvTrackingStatus"
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_ALV_CTR_ACM_ACTV_TRACKING_STATUS_NAME "AlvCtr_ACM_ActvTrackingStatus"
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_SEAT_TRACK_POS_PASS_NAME "AirBg_SeatTrackPosPass"
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_SEAT_TRACK_POS_DRVR_NAME "AirBg_SeatTrackPosDrvr"
#define CANI1_NONM_ACM_ACTV_TRACKING_STATUS_AIR_BG_PASS_AIRBG_DEAC_STS_NAME "AirBg_PassAirbgDeacSts"
#define CANI1_NONM_IVI_DR_WNDW_CNTR_CRC_IVI_DR_WNDW_CNTR_NAME "CRC_IVI_DrWndw_Cntr"
#define CANI1_NONM_IVI_DR_WNDW_CNTR_ALV_CTR_IVI_DR_WNDW_CNTR_NAME "AlvCtr_IVI_DrWndw_Cntr"
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWD_DRV_DOOR_USR_AG_REQ_NAME "Pwd_DrvDoorUsrAgReq"
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWD_PASS_DOOR_USR_AG_REQ_NAME "Pwd_PassDoorUsrAgReq"
#define CANI1_NONM_IVI_DR_WNDW_CNTR_CEN_LOCK_AUDIO_VISUAL_CFG_NAME "CenLock_AudioVisualCfg"
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWR_SD_ST_LE_EXTND_RTRACT_REQ_NAME "PwrSdSt_LeExtndRtractReq"
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWR_SD_ST_RI_EXTND_RTRACT_REQ_NAME "PwrSdSt_RiExtndRtractReq"
#define CANI1_NONM_IVI_DR_WNDW_CNTR_PWIND_WNDW_UP_DWN_USR_REQ_NAME "Pwind_WndwUpDwnUsrReq"
#define CANI1_NONM_MFS_SWITCH_REQ_CRC_MFS_SWITCH_REQ_NAME "CRC_MFS_SwitchReq"
#define CANI1_NONM_MFS_SWITCH_REQ_ALV_CTR_MFS_SWITCH_REQ_NAME "AlvCtr_MFS_SwitchReq"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SCRL_SWT_REQ_NAME "Mfsw_AdasScrlSwtReq"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_SCROL_SWT_REQ_NAME "Mfsw_ScrolSwtReq"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_WIPER_ACVN_CMD_NAME "Mfsw_RimSwtWiperAcvnCmd"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_WIPER_MENU_REQ_NAME "Mfsw_WiperMenuReq"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_FAVO_SEL_REQ_NAME "Mfsw_PaddSwtFavoSelReq"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PADD_SWT_GEAR_SHIFT_REQ_NAME "Mfsw_PaddSwtGearShiftReq"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_ADAS_SWT_REQ_NAME "Mfsw_AdasSwtReq"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_VOICE_SWT_REQ_NAME "Mfsw_VoiceSwtReq"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_RIM_SWT_HI_BEAM_ACVN_CMD_NAME "Mfsw_RimSwtHiBeamAcvnCmd"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_DRV_MOD_SWT_REQ_NAME "Mfsw_DrvModSwtReq"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_PARK_SWT_REQ_NAME "Mfsw_ParkSwtReq"
#define CANI1_NONM_MFS_SWITCH_REQ_MFSW_FAVO_SWT_REQ_NAME "Mfsw_FavoSwtReq"
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_CRC_IVI_DRVR_SEAT_STORED_PROFILE_NAME "CRC_IVI_DrvrSeatStoredProfile"
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_ALV_CTR_IVI_DRVR_SEAT_STORED_PROFILE_NAME "AlvCtr_IVI_DrvrSeatStoredProfile"
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_SEAT_ADJMT_DRV_FOWD_BAWD_STORED_POSN_NAME "SeatAdjmt_DrvFowdBawdStoredPosn"
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_SEAT_ADJMT_DRV_RECLNR_STORED_POSN_NAME "SeatAdjmt_DrvReclnrStoredPosn"
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_SEAT_ADJMT_DRV_HEI_STORED_POSN_NAME "SeatAdjmt_DrvHeiStoredPosn"
#define CANI1_NONM_IVI_DRVR_SEAT_STORED_PROFILE_SEAT_ADJMT_DRV_TILT_STORED_POSN_NAME "SeatAdjmt_DrvTiltStoredPosn"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE1_NAME "DriverId_Byte1"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE2_NAME "DriverId_Byte2"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE3_NAME "DriverId_Byte3"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE4_NAME "DriverId_Byte4"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE5_NAME "DriverId_Byte5"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE6_NAME "DriverId_Byte6"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE7_NAME "DriverId_Byte7"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE8_NAME "DriverId_Byte8"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE9_NAME "DriverId_Byte9"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE10_NAME "DriverId_Byte10"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE11_NAME "DriverId_Byte11"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE12_NAME "DriverId_Byte12"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE13_NAME "DriverId_Byte13"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE14_NAME "DriverId_Byte14"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE15_NAME "DriverId_Byte15"
#define CANI1_NONM_TBOX_DRVR_ID_INFO_DRIVER_ID_BYTE16_NAME "DriverId_Byte16"
#define CANI1_NONM_IVI_HVAC_CNTRL_CRC_IVI_HVAC_CNTRL_NAME "CRC_IVI_HvacCntrl"
#define CANI1_NONM_IVI_HVAC_CNTRL_ALV_CTR_IVI_HVAC_CNTRL_NAME "AlvCtr_IVI_HvacCntrl"
#define CANI1_NONM_IVI_HVAC_CNTRL_CCSF_VENT_OP_MODE_REQ_NAME "Ccsf_VentOpModeReq"
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_AC_USR_I_REQ_NAME "Ccs_ReAcUsrIReq"
#define CANI1_NONM_IVI_HVAC_CNTRL_DEMIR_HEATG_SVMC_REQ_NAME "Demir_HeatgSVMCReq"
#define CANI1_NONM_IVI_HVAC_CNTRL_CCS_RE_BLOWR_LV_USRL_REQ_NAME "Ccs_ReBlowrLvUsrlReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_MIN_T_USR_BTN_NAME "Ccs_AcMinTUsrBtn"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_MAX_T_USR_BTN_NAME "Ccs_AcMaxTUsrBtn"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_RCL_ON_OFF_REQ_NAME "Ccs_RclOnOffReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_AC_USR_REQ_NAME "Ccs_FrntAcUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_RE_LE_T_USR_SET_REQ_NAME "Ccs_ReLeTUsrSetReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_RE_RI_T_USR_I_SET_VAL_NAME "Ccs_ReRiTUsrISetVal"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_SYNC_T_REQ_NAME "Ccs_SyncTReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AC_ECO_MODE_BTN_USR_REQ_NAME "Ccs_AcEcoModeBtnUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_AC_AUTO_MOD_USR_REQ_NAME "Ccs_FrntAcAutoModUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_IONISER_USR_REQ_NAME "Ccs_IoniserUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_ACVN_USR_REQ_NAME "Ccs_FrgrncAcvnUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_DEMIST_DEFRST_USR_REQ_NAME "Ccs_DemistDefrstUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_LE_T_USR_SET_VAL_NAME "Ccs_FrntLeTUsrSetVal"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_INTEN_USR_REQ_NAME "Ccs_FrgrncIntenUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_BLOWR_LVL_USR_REQ_NAME "Ccs_FrntBlowrLvlUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_AIR_MODE_SELN_USR_REQ_NAME "Ccs_AirModeSelnUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRNT_RI_T_USR_SET_VAL_NAME "Ccs_FrntRiTUsrSetVal"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRSET_USR_REQ_NAME "Ccs_ClimPrsetUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_FRGRNC_SLEN_USR_REQ_NAME "Ccs_FrgrncSlenUsrReq"
#define CANI1_NONM_IVI_HVAC_SWT_REQ_CCS_CLIM_PRFL_SELN_USR_REQ_NAME "Ccs_ClimPrflSelnUsrReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_CRC_IVI_USR_BODY_CNTRL_REQ_NAME "CRC_IVI_UsrBodyCntrl_Req"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_ALV_CTR_IVI_USR_BODY_CNTRL_REQ_NAME "AlvCtr_IVI_UsrBodyCntrl_Req"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_CHRGR_PORT_CHRG_PORT_LCK_UNLCK_USR_REQ_NAME "ChrgrPort_ChrgPortLckUnlckUsrReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_FOLD_UNFOLD_SVMC_REQ_NAME "Demir_FoldUnfoldSVMCReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_FOLD_UNFOLD_USR_REQ_NAME "Demir_FoldUnfoldUsrReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_DEMIR_HEATG_SVMC_ENA_NAME "Demir_HeatgSVMC_Ena"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_ACTTG_TAIL_GATE_USR_AG_REQ_NAME "Acttg_TailGateUsrAgReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_ACTTG_TAIL_GATE_USR_REQ_NAME "Acttg_TailGateUsrReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_SSADL_AUTO_SPD_LOCK_VAL_NAME "Ssadl_AutoSpdLockVal"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_SSADL_AUTO_SPD_LOCK_ON_OFF_TYP_STS_NAME "Ssadl_AutoSpdLockOnOffTypSts"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_RELAMP_RE_FOG_LI_REQ_NAME "Relamp_ReFogLiReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_LAMP_REQ_NAME "Hdlamp_LampReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_AUTO_MODE_CFG_REQ_NAME "Hdlamp_AutoModeCfgReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_HDLAMP_FOLLOW_ME_CFG_NAME "Hdlamp_FollowMeCfg"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_REQ_NAME "Wipr_FrntWiprReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_OPER_PARK_REQ_NAME "Wipr_FrntOperParkReq"
#define CANI1_NONM_IVI_USR_BODY_CNTRL_REQ_WIPR_FRNT_WIPR_SRV_POS_REQ_NAME "Wipr_FrntWiprSrvPosReq"
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_CRC_IVI_USR_CHASSIS_CNTRL_REQ_NAME "CRC_IVI_UsrChassisCntrl_Req"
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_ALV_CTR_IVI_USR_CHASSIS_CNTRL_REQ_NAME "AlvCtr_IVI_UsrChassisCntrl_Req"
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_HDC_SWT_STS_NAME "Hdc_SwtSts"
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_ESC_TCS_SWT_STS_NAME "EscTcs_SwtSts"
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_INGRS_MODE_CMD_NAME "IVI_IngrsModeCmd"
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_AVH_SWT_STS_NAME "AVH_Swt_Sts"
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SUSP_HEI_ADJ_REQ_NAME "IVI_SuspHeiAdjReq"
#define CANI1_NONM_IVI_USR_CHASSIS_CNTRL_REQ_IVI_SRV_MOD_CMD_NAME "IVI_SrvModCmd"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_CRC_IVI_USR_SEAT_ADJ_COMFRT_REQ_NAME "CRC_IVI_UsrSeatAdjComfrt_Req"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_ALV_CTR_IVI_USR_SEAT_ADJ_COMFRT_REQ_NAME "AlvCtr_IVI_UsrSeatAdjComfrt_Req"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_FOWD_BAWD_REQ_NAME "SeatAdjmt_DrvFowdBawdReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_HEI_UP_DWN_REQ_NAME "SeatAdjmt_DrvHeiUpDwnReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_LUM_IN_OUT_REQ_NAME "SeatAdjmt_DrvLumInOutReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_LUM_UP_DWN_REQ_NAME "SeatAdjmt_DrvLumUpDwnReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_RECL_UP_DOWN_REQ_NAME "SeatAdjmt_DrvReclUpDownReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_INTEN_SELN_REQ_NAME "SeatCfmt_DrvMassgIntenSelnReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_DRV_MASSG_PAT_SELN_REQ_NAME "SeatCfmt_DrvMassgPatSelnReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_FOWD_BAWD_REQ_NAME "SeatAdjmt_PassFowdBawdReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_HEI_UP_DWN_REQ_NAME "SeatAdjmt_PassHeiUpDwnReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_LUM_IN_OUT_REQ_NAME "SeatAdjmt_PassLumInOutReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_LUM_UP_DWN_REQ_NAME "SeatAdjmt_PassLumUpDwnReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_RECL_UP_DOWN_REQ_NAME "SeatAdjmt_PassReclUpDownReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_PASS_TILT_UP_DWN_REQ_NAME "SeatAdjmt_PassTiltUpDwnReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_ADJMT_DRV_TILT_UP_DWN_REQ_NAME "SeatAdjmt_DrvTiltUpDwnReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_INTEN_SELN_REQ_NAME "SeatCfmt_PassMassgIntenSelnReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_PASS_MASSG_PAT_SELN_REQ_NAME "SeatCfmt_PassMassgPatSelnReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_LE_VENTN_SPD_REQ_NAME "SeatCfmt_ReLeVentnSpdReq"
#define CANI1_NONM_IVI_USR_SEAT_ADJ_COMFRT_REQ_SEAT_CFMT_RE_RI_VENTN_SPD_REQ_NAME "SeatCfmt_ReRiVentnSpdReq"
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_CRC_IVI_VEHICLE_MODE_CTRL_NAME "CRC_IVI_Vehicle_Mode_Ctrl"
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_ALV_CTR_IVI_VEHICLE_MODE_CTRL_NAME "AlvCtr_IVI_Vehicle_Mode_Ctrl"
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_KLSS_USR_VEH_PWR_DN_REQ_NAME "Klss_UsrVehPwrDnReq"
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_HMI_KEEP_ALIVE_NAME "HMI_KeepAlive"
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LVM_LONG_PARK_MODE_REQ_NAME "Lvm_LongParkMode_Req"
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_LVM_STORAGE_MODE_REQ_NAME "Lvm_StorageMode_Req"
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_DRVMC_MODE_REQ_NAME "Drvmc_Mode_Req"
#define CANI1_NONM_IVI_VEHICLE_MODE_CTRL_ESHIFT_TAGT_GEAR_REQ_NAME "Eshift_TagtGear_Req"
#define CANI1_NONM_TBOX_WARNING_CRC_TBOX_WARNING_NAME "CRC_TBOX_Warning"
#define CANI1_NONM_TBOX_WARNING_ALV_CTR_TBOX_WARNING_NAME "AlvCtr_TBOX_Warning"
#define CANI1_NONM_TBOX_WARNING_KLE_NFC_CC_CARD_VLDTN_ST_WARN_NAME "Kle_NfcCcCardVldtn_St_Warn"
#define CANI1_NONM_VCU_WARNING_CRC_VCU_WARNING_NAME "CRC_VCU_Warning"
#define CANI1_NONM_VCU_WARNING_ALV_CTR_VCU_WARNING_NAME "AlvCtr_VCU_Warning"
#define CANI1_NONM_VCU_WARNING_ACCHG_CHG_GUN_UNLCK_WARN_NAME "Acchg_ChgGunUnlckWarn"
#define CANI1_NONM_VCU_WARNING_HVSCO_HV_SYS_WARN_NAME "Hvsco_HV_SysWarn"
#define CANI1_NONM_VCU_WARNING_THMGT_COOLT_OVER_T_WARN_NAME "Thmgt_CooltOverTWarn"
#define CANI1_NONM_VCU_WARNING_ESHIFT_PSD_BRK_TO_ENGE_GEAR_NAME "Eshift_PsdBrkToEngeGear"
#define CANI1_NONM_VCU_WARNING_AWD_WHL_DRV_MODE_WARN_NAME "Awd_WhlDrvModeWarn"
#define CANI1_NONM_VCU_WARNING_DRVMC_DRV_MODE_CHNG_RESTR_WARN_NAME "Drvmc_DrvModeChngRestrWarn"
#define CANI1_NONM_VCU_WARNING_ESHIFT_HV_DCNCT_NO_GEAR_CHNG_WARN_NAME "Eshift_HvDcnctNoGearChngWarn"
#define CANI1_NONM_VCU_WARNING_ESHIFT_GEAR_CHNG_EPB_ENGE_WARN_NAME "Eshift_GearChng_EPBEngeWarn"
#define CANI1_NONM_VCU_WARNING_THMGT_COOLT_LVL_LO_WARN_NAME "Thmgt_CooltLvlLoWarn"
#define CANI1_NONM_VCU_WARNING_ESHIFT_STOP_VEH_TO_MOVE_FOWD_DIR_NAME "Eshift_StopVehToMoveFowdDir"
#define CANI1_NONM_VCU_WARNING_HVSFT_HVSFT_STS_NAME "Hvsft_HvsftSts"
#define CANI1_NONM_VCU_WARNING_VCU_LIMPHM_WARN_NAME "VCU_LimphmWarn"
#define CANI1_NONM_VCU_WARNING_ESHIFT_EPP_FAI_WARN_NAME "Eshift_EppFaiWarn"
#define CANI1_NONM_VCU_WARNING_THMGT_THERM_FLT_WARN_NAME "Thmgt_Therm_FltWarn"
#define CANI1_NONM_VCU_WARNING_ACCHR_CHG_AUTH_WARN_NAME "Acchr_ChgAuthWarn"
#define CANI1_NONM_VCU_WARNING_ESHIFT_ACT_GEAR_WARN_NAME "Eshift_ACT_GearWarn"
#define CANI1_NONM_VCU_WARNING_ESHIFT_TAGT_GEAR_VLDTN_WARN_NAME "Eshift_TagtGearVldtnWarn"
#define CANI1_NONM_VCU_WARNING_HVSFT_HVIL_ERR_WARN_NAME "Hvsft_HvilErrWarn"
#define CANI1_NONM_VCU_WARNING_ESHIFT_STOP_VEH_TO_MOVE_RVS_DIR_NAME "Eshift_StopVehToMoveRvsDir"
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL1_WARN_NAME "VCU_HV_Sys_FltLvl1Warn"
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL2_WARN_NAME "VCU_HV_Sys_FltLvl2Warn"
#define CANI1_NONM_VCU_WARNING_VCU_HV_SYS_FLT_LVL3_WARN_NAME "VCU_HV_Sys_FltLvl3Warn"
#define CANI1_NONM_VCU_WARNING_CREGB_COAST_RGN_WARN_NAME "Cregb_CoastRgnWarn"
#define CANI1_NONM_ZCUF_WARNING_CRC_ZCUF_WARNING_NAME "CRC_ZCUF_Warning"
#define CANI1_NONM_ZCUF_WARNING_ALV_CTR_ZCUF_WARNING_NAME "AlvCtr_ZCUF_Warning"
#define CANI1_NONM_ZCUF_WARNING_CEN_LOCK_LOCK_UNLCK_STS_WARN_NAME "CenLock_LockUnlckSts_Warn"
#define CANI1_NONM_ZCUF_WARNING_WIPR_FRNT_RI_FAILD_WARN_NAME "Wipr_FrntRiFaild_Warn"
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_PASS_SEAT_HEATING_SW_FLT_WARN_NAME "SwtCtl_PassSeatHeatingSwFlt_Warn"
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_VOL_SWT_FLT_WARN_NAME "SwtCtl_VolSwtFlt_Warn"
#define CANI1_NONM_ZCUF_WARNING_WIPR_FRNT_LE_FAILD_WARN_NAME "Wipr_FrntLeFaild_Warn"
#define CANI1_NONM_ZCUF_WARNING_SWTT_CTL_DRVR_ST_HEATNG_SWT_FLT_WRN_NAME "SwttCtl_DrvrStHeatngSwtFlt_Wrn"
#define CANI1_NONM_ZCUF_WARNING_RELAMP_REV_LMP_WARN_NAME "Relamp_RevLmpWarn"
#define CANI1_NONM_ZCUF_WARNING_RLML_FOG_LMP_WARN_NAME "RLML_FogLmp_Warn"
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_CHD_LOCK_SWT_FAULT_WARN_NAME "SwtCtl_ChdLockSwtFault_Warn"
#define CANI1_NONM_ZCUF_WARNING_SWTT_CTL_RECLRN_MOD_ON_OFF_SWT_FLT_WRN_NAME "SwttCtl_ReclrnModOnOffSwtFlt_Wrn"
#define CANI1_NONM_ZCUF_WARNING_RLMR_FOG_LMP_WARN_NAME "RLMR_FogLmp_Warn"
#define CANI1_NONM_ZCUF_WARNING_RELAMP_CHMSL_WARN_NAME "Relamp_Chmsl_Warn"
#define CANI1_NONM_ZCUF_WARNING_SWT_CTL_HZRD_SWT_FLT_WARN_NAME "SwtCtl_HzrdSwtFlt_Warn"
#define CANI1_NONM_ZCUF_WARNING_SSADL_DOOR_ACT_WARN_NAME "Ssadl_DoorAct_Warn"
#define CANI1_NONM_ZCUF_WARNING_SSADL_DOOR_AJAR_WARN_NAME "Ssadl_DoorAjar_Warn"
#define CANI1_NONM_ZCUF_WARNING_CCS_SRV_WARN_NAME "Ccs_SrvWarn"
#define CANI1_NONM_ACM_WARNING_CRC_ACM_WARNING_NAME "CRC_ACM_Warning"
#define CANI1_NONM_ACM_WARNING_ALV_CTR_ACM_WARNING_NAME "AlvCtr_ACM_Warning"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_BLINKING_RMN_REQ_NAME "SbltWarn_BlinkingRmnReq"
#define CANI1_NONM_ACM_WARNING_AIR_BG_WARN_LAMP_NAME "AirBg_WarnLamp"
#define CANI1_NONM_ACM_WARNING_AIR_BG_PASS_AIRBG_DEAC_WARN_NAME "AirBg_PassAirbgDeac_Warn"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_DRVR_INDCR_STS_NAME "SbltWarn_DrvrIndcrSts"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_PASS_INDCR_STS_NAME "SbltWarn_PassIndcrSts"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_CENTR_INDCR_STS_NAME "SbltWarn_ReCentrIndcrSts"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_RI_INDCR_STS_NAME "SbltWarn_ReRiIndcrSts"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_LE_INDCR_STS_NAME "SbltWarn_ReLeIndcrSts"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_DRVR_BKL_STS_NAME "SbltWarn_DrvrBklSts"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_PASS_BKL_STS_NAME "SbltWarn_PassBklSts"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_CENTR_BKL_STS_NAME "SbltWarn_ReCentrBklSts"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_RI_BKL_STS_NAME "SbltWarn_ReRiBklSts"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_RE_LE_BKL_STS_NAME "SbltWarn_ReLeBklSts"
#define CANI1_NONM_ACM_WARNING_SBLT_WARN_CHIME_RMN_REQ_NAME "SbltWarn_ChimeRmnReq"
#define CANI1_NONM_DCMRL_WARNING_CRC_DCMRL_WARNING_NAME "CRC_DCMRL_Warning"
#define CANI1_NONM_DCMRL_WARNING_ALV_CTR_DCMRL_WARNING_NAME "AlvCtr_DCMRL_Warning"
#define CANI1_NONM_DCMRL_WARNING_PWIND_RE_LE_WNDW_WARN_NAME "Pwind_ReLeWndw_Warn"
#define CANI1_NONM_DCMRR_WARNING_CRC_DCMRR_WARNING_NAME "CRC_DCMRR_Warning"
#define CANI1_NONM_DCMRR_WARNING_ALV_CTR_DCMRR_WARNING_NAME "AlvCtr_DCMRR_Warning"
#define CANI1_NONM_DCMRR_WARNING_CEN_LOCK_RE_RI_DOOR_AJAR_WARN_NAME "CenLock_ReRiDoorAjar_Warn"
#define CANI1_NONM_DCMRR_WARNING_PWIND_RE_RI_WNDW_WARN_NAME "Pwind_ReRiWndw_Warn"
#define CANI1_NONM_ASU_WARNING_CRC_ASU_WARNING_NAME "CRC_ASU_Warning"
#define CANI1_NONM_ASU_WARNING_ALV_CTR_ASU_WARNING_NAME "AlvCtr_ASU_Warning"
#define CANI1_NONM_ASU_WARNING_AIR_SUSP_UNIT_WARN_NAME "AirSuspUnit_Warn"
#define CANI1_NONM_ASU_WARNING_AIR_SUSP_UNIT_SRV_MODE_NOT_ACTVD_WARN_NAME "AirSuspUnit_SrvModeNotActvdWarn"
#define CANI1_NONM_DCMP_WARNING_CRC_DCMP_WARNING_NAME "CRC_DCMP_Warning"
#define CANI1_NONM_DCMP_WARNING_ALV_CTR_DCMP_WARNING_NAME "AlvCtr_DCMP_Warning"
#define CANI1_NONM_DCMP_WARNING_CEN_LOCK_PASS_DOOR_AJAR_WARN_NAME "CenLock_PassDoorAjar_Warn"
#define CANI1_NONM_DCMP_WARNING_PWIND_PASS_WNDW_WARN_NAME "Pwind_PassWndw_Warn"
#define CANI1_NONM_BMS_WARNING_CRC_BMS_WARNING_NAME "CRC_BMS_Warning"
#define CANI1_NONM_BMS_WARNING_ALV_CTR_BMS_WARNING_NAME "AlvCtr_BMS_Warning"
#define CANI1_NONM_BMS_WARNING_BMS_CELL_U_DIF_ERR_WARN_NAME "Bms_CellUDifErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_COOLT_INLET_T_SNSR_FLT_WARN_NAME "Bms_CooltInletTSnsrFltWarn"
#define CANI1_NONM_BMS_WARNING_BMS_COOLT_OUTL_T_SNSR_FLT_WARN_NAME "Bms_CooltOutlTSnsrFltWarn"
#define CANI1_NONM_BMS_WARNING_BMS_DCFC_NEG_RLY_ERR_WARN_NAME "Bms_DCFCNegRlyErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_DCFC_POS_RLY_ERR_WARN_NAME "Bms_DCFCPosRlyErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_CTCTR_DCNCT_RSN_WARN_NAME "Bms_CtctrDcnctRsnWarn"
#define CANI1_NONM_BMS_WARNING_BMS_ERR_LEV_WARN_NAME "Bms_ErrLevWarn"
#define CANI1_NONM_BMS_WARNING_BMS_FUSE_STS_ERR_WARN_NAME "Bms_FuseStsErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_HVIL_ERR_WARN_NAME "Bms_HvilErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_LO_BAT_WARN_NAME "Bms_LoBatWarn"
#define CANI1_NONM_BMS_WARNING_BMS_MAIN_POS_RLY_ERR_WARN_NAME "Bms_MainPosRlyErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_PACK_HV_ERR_WARN_NAME "Bms_PackHvErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_PACK_INSU_ERR_WARN_NAME "Bms_PackInsuErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_PACK_LV_ERR_WARN_NAME "Bms_PackLvErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_PACK_OVCUR_ERR_WARN_NAME "Bms_PackOvcurErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_PACK_T_STS_WARN_NAME "Bms_PackTStsWarn"
#define CANI1_NONM_BMS_WARNING_BMS_PRE_CH_RLY_ERR_WARN_NAME "Bms_PreChRlyErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_CELL_OVER_T_ERR_WARN_NAME "Bms_CellOverTErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_CELL_UNDER_T_ERR_WARN_NAME "Bms_CellUnderTErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_RVS_I_DET_CHG_FLT_WARN_NAME "Bms_RvsIDetChgFltWarn"
#define CANI1_NONM_BMS_WARNING_BMS_SC_I_FLT_WARN_NAME "Bms_ScIFltWarn"
#define CANI1_NONM_BMS_WARNING_BMS_SOC_CHNG_FAST_FLT_WARN_NAME "Bms_SocChngFastFltWarn"
#define CANI1_NONM_BMS_WARNING_BMS_SRV_DUE_DETN_WARN_NAME "Bms_SrvDueDetnWarn"
#define CANI1_NONM_BMS_WARNING_BMS_THERM_RUNAWAY_WARN_NAME "Bms_ThermRunawayWarn"
#define CANI1_NONM_BMS_WARNING_BMS_TOT_NEG_RLY_ERR_WARN_NAME "Bms_TotNegRlyErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_BAT_BAL_ERR_WARN_NAME "Bms_BatBalErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_BAT_REPL_WARN_NAME "Bms_BatReplWarn"
#define CANI1_NONM_BMS_WARNING_BMS_CELL_HV_ERR_WARN_NAME "Bms_CellHvErrWarn"
#define CANI1_NONM_BMS_WARNING_BMS_CELL_LV_ERR_WARN_NAME "Bms_CellLvErrWarn"
#define CANI1_NONM_DCMD_WARNING_CRC_DCMD_WARNING_NAME "CRC_DCMD_Warning"
#define CANI1_NONM_DCMD_WARNING_ALV_CTR_DCMD_WARNING_NAME "AlvCtr_DCMD_Warning"
#define CANI1_NONM_DCMD_WARNING_PWIND_DRV_WNDW_WARN_NAME "Pwind_DrvWndw_Warn"
#define CANI1_NONM_DCMD_WARNING_CEN_LOCK_DRVR_DOOR_AJAR_WARN_NAME "CenLock_DrvrDoorAjar_Warn"
#define CANI1_NONM_DCMD_WARNING_PWD_DRVR_DOOR_WARN_NAME "Pwd_DrvrDoor_Warn"
#define CANI1_NONM_EBCM_WARNING_CRC_EBCM_WARNING_NAME "CRC_EBCM_Warning"
#define CANI1_NONM_EBCM_WARNING_ALV_CTR_EBCM_WARNING_NAME "AlvCtr_EBCM_Warning"
#define CANI1_NONM_EBCM_WARNING_ECPBK_SWT_FLT_NAME "Ecpbk_SwtFlt"
#define CANI1_NONM_EBCM_WARNING_ECPBK_INCLND_VEH_PARK_WARN_NAME "Ecpbk_InclndVehParkWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_BRK_F_NOT_EN_WARN_NAME "Ecpbk_BrkFNotEnWarn"
#define CANI1_NONM_EBCM_WARNING_BRB_RGN_WARN_NAME "Brb_RgnWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_NOT_APPLD_DOOR_OPEN_WARN_NAME "Ecpbk_NotAppldDoorOpenWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_ROLLR_BENCH_MODE_WARN_NAME "Ecpbk_RollrBenchModeWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_AUTO_RELS_WARN_NAME "Ecpbk_AutoRelsWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_RLSD_MNTN_MODE_WARN_NAME "Ecpbk_RlsdMntnModeWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_RLSD_TW_MODE_WARN_NAME "Ecpbk_RlsdTwModeWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_AUTO_APPLD_WARN_NAME "Ecpbk_AutoAppldWarn"
#define CANI1_NONM_EBCM_WARNING_DRVAC_HILL_STRT_ASSI_FLT_WARN_NAME "Drvac_HillStrtAssiFltWarn"
#define CANI1_NONM_EBCM_WARNING_EBD_SYS_WARN_NAME "Ebd_SysWarn"
#define CANI1_NONM_EBCM_WARNING_DRVAC_CORNERING_BRK_CTL_FLT_WARN_NAME "Drvac_CorneringBrkCtlFltWarn"
#define CANI1_NONM_EBCM_WARNING_DRVAC_HDC_WARN_NAME "Drvac_HdcWarn"
#define CANI1_NONM_EBCM_WARNING_DRVAC_FLD_LVL_INDCR_BRK_FLD_WARN_NAME "Drvac_FldLvlIndcrBrkFldWarn"
#define CANI1_NONM_EBCM_WARNING_DRVAC_TCS_WARN_NAME "Drvac_TcsWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_PSD_BRK_PEDL_TO_RELS_EPB_WARN_NAME "Ecpbk_PsdBrkPedlToRelsEpbWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_WARN_LAMP_ST_NAME "Ecpbk_WarnLampSt"
#define CANI1_NONM_EBCM_WARNING_ECPBK_PARK_BRK_FLT_WARN_NAME "Ecpbk_ParkBrkFltWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_DEGRADED_MODE_TO_BE_RLSD_WARN_NAME "Ecpbk_DegradedModeToBeRlsdWarn"
#define CANI1_NONM_EBCM_WARNING_ECPBK_DEGRADED_MODE_RLSD_WARN_NAME "Ecpbk_DegradedModeRlsdWarn"
#define CANI1_NONM_EBCM_WARNING_ABS_FLT_WARN_NAME "Abs_FltWarn"
#define CANI1_NONM_OBC_WARNING_CRC_OBC_WARNING_NAME "CRC_OBC_Warning"
#define CANI1_NONM_OBC_WARNING_ALV_CTR_OBC_WARNING_NAME "AlvCtr_OBC_Warning"
#define CANI1_NONM_OBC_WARNING_ACCHG_OBC_ERR_WARN_NAME "Acchg_ObcErrWarn"
#define CANI1_NONM_EPS_RWA1_WARNING_CRC_EPS_RWA1_WARNING_NAME "CRC_EPS_RWA1_Warning"
#define CANI1_NONM_EPS_RWA1_WARNING_ALV_CTR_EPS_RWA1_WARNING_NAME "AlvCtr_EPS_RWA1_Warning"
#define CANI1_NONM_EPS_RWA1_WARNING_STBWR_RDNDT_MODE_WARN_NAME "Stbwr_RdndtModeWarn"
#define CANI1_NONM_EPS_SFA1_WARNING_CRC_EPS_SFA1_WARNING_NAME "CRC_EPS_SFA1_Warning"
#define CANI1_NONM_EPS_SFA1_WARNING_ALV_CTR_EPS_SFA1_WARNING_NAME "AlvCtr_EPS_SFA1_Warning"
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_HPTC_WARN_STS_NAME "Stbwr_HptcWarnSts"
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_SFA_CLU_WARN_LAMP_NAME "Stbwr_SfaCluWarnLamp"
#define CANI1_NONM_EPS_SFA1_WARNING_STBWR_STEER_ALGNMT_WARN_NAME "Stbwr_SteerAlgnmtWarn"
#define CANI1_NONM_EPS_RWA2_WARNING_CRC_EPS_RWA2_WARNING_NAME "CRC_EPS_RWA2_Warning"
#define CANI1_NONM_EPS_RWA2_WARNING_ALV_CTR_EPS_RWA2_WARNING_NAME "AlvCtr_EPS_RWA2_Warning"
#define CANI1_NONM_EPS_RWA2_WARNING_STBWR_RDNDT_MODE_WARN_R_NAME "Stbwr_RdndtModeWarn_R"
#define CANI1_NONM_EPS_SFA2_WARNING_CRC_EPS_SFA2_WARNING_NAME "CRC_EPS_SFA2_Warning"
#define CANI1_NONM_EPS_SFA2_WARNING_ALV_CTR_EPS_SFA2_WARNING_NAME "AlvCtr_EPS_SFA2_Warning"
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_HPTC_WARN_STS_R_NAME "Stbwr_HptcWarnSts_R"
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_SFA_CLU_WARN_LAMP_R_NAME "Stbwr_SfaCluWarnLamp_R"
#define CANI1_NONM_EPS_SFA2_WARNING_STBWR_STEER_ALGNMT_WARN_R_NAME "Stbwr_SteerAlgnmtWarn_R"
#define CANI1_NONM_HDLML_WARNING_CRC_HDLML_WARNING_NAME "CRC_HDLML_Warning"
#define CANI1_NONM_HDLML_WARNING_ALV_CTR_HDLML_WARNING_NAME "AlvCtr_HDLML_Warning"
#define CANI1_NONM_HDLML_WARNING_HDLAMP_LE_LO_BEAM_LAMP_WARN_NAME "Hdlamp_LeLoBeamLampWarn"
#define CANI1_NONM_HDLML_WARNING_HDLAMP_LE_HI_BEAM_LAMP_WARN_NAME "Hdlamp_LeHiBeamLampWarn"
#define CANI1_NONM_HDLMR_WARNING_CRC_HDLMR_WARNING_NAME "CRC_HDLMR_Warning"
#define CANI1_NONM_HDLMR_WARNING_ALV_CTR_HDLMR_WARNING_NAME "AlvCtr_HDLMR_Warning"
#define CANI1_NONM_HDLMR_WARNING_HDLAMP_RI_LO_BEAM_LAMP_WARN_NAME "Hdlamp_RiLoBeamLampWarn"
#define CANI1_NONM_HDLMR_WARNING_HDLAMP_RI_HI_BEAM_LAMP_WARN_NAME "Hdlamp_RiHiBeamLamp_Warn"
#define CANI1_NONM_SBM_WARNING_CRC_SBM_WARNING_NAME "CRC_Sbm_Warning"
#define CANI1_NONM_SBM_WARNING_ALV_CTR_SBM_WARNING_NAME "AlvCtr_SBM_Warning"
#define CANI1_NONM_SBM_WARNING_SBM_CRITICAL_SO_C_ALERT_WARN_NAME "Sbm_CriticalSoCAlert_Warn"
#define CANI1_NONM_SBM_WARNING_SBM_HEALTH_ST_WARN_NAME "Sbm_HealthStWarn"
#define CANI1_NONM_SBM_WARNING_SBM_LV_BAT_T_SNSR_FLT_STS_WARN_NAME "Sbm_LvBatTSnsrFltSts_Warn"
#define CANI1_NONM_CCU_WARNING_CRC_CCU_WARNING_NAME "CRC_CCU_Warning"
#define CANI1_NONM_CCU_WARNING_ALV_CTR_CCU_WARNING_NAME "AlvCtr_CCU_Warning"
#define CANI1_NONM_CCU_WARNING_CCSF_IONISER_FLT_WARN_NAME "Ccsf_IoniserFlt_Warn"
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_DUCT_FLAP_FLT_WARN_NAME "Ccsf_FrntLeDuctFlapFlt_Warn"
#define CANI1_NONM_CCU_WARNING_CCSF_RE_RI_TEMP_MIX_FLAP_FLT_WARN_NAME "Ccsf_ReRiTempMixFlapFlt_Warn"
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_TEMP_MIX_FLAP_FLT_WARN_NAME "Ccsf_ReLeTempMixFlapFlt_Warn"
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_TEMP_MIX_FLAP_FLT_WARN_NAME "Ccsf_FrntLeTempMixFlapFlt_Warn"
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_VENT_DUCT_FLAP_FLT_WARN_NAME "Ccsf_ReLeVentDuctFlapFlt_Warn"
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_RI_DUCT_FLAP_FLT_WARN_NAME "Ccsf_FrntRiDuctFlapFlt_Warn"
#define CANI1_NONM_CCU_WARNING_CCSF_RE_LE_FOOT_DUCT_FLAP_FLT_WARN_NAME "Ccsf_ReLeFootDuctFlapFlt_Warn"
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_LE_VEN_DIR_STS_NAME "Ccsf_FrntLeVenDirSts"
#define CANI1_NONM_CCU_WARNING_CCSF_FRNT_RI_TEMP_MIX_FLAP_FLT_W_WARN_NAME "Ccsf_FrntRiTempMixFlapFltW_Warn"
#define CANI1_NONM_MCU_F_WARNING_CRC_MCU_F_WARNING_NAME "CRC_MCU_F_Warning"
#define CANI1_NONM_MCU_F_WARNING_ALV_CTR_MCU_F_WARNING_NAME "AlvCtr_MCU_F_Warning"
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_DERAT_WARN_NAME "Eds_FrntDeratWarn"
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_ER_WARN_NAME "Eds_FrntErWarn"
#define CANI1_NONM_MCU_F_WARNING_EDS_FRNT_PARK_LOCK_ERR_WARN_NAME "Eds_FrntParkLockErrWarn"
#define CANI1_NONM_MCU_R_WARNING_CRC_MCU_R_WARNING_NAME "CRC_MCU_R_Warning"
#define CANI1_NONM_MCU_R_WARNING_ALV_CTR_MCU_R_WARNING_NAME "AlvCtr_MCU_R_Warning"
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_PARK_LOCK_ERR_WARN_NAME "Eds_ReParkLockErrWarn"
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_ERR_WARN_NAME "Eds_ReErrWarn"
#define CANI1_NONM_MCU_R_WARNING_EDS_RE_DERAT_WARN_NAME "Eds_ReDeratWarn"
#define CANI1_NONM_MFS_WARNING_CRC_MFS_WARNING_NAME "CRC_MFS_Warning"
#define CANI1_NONM_MFS_WARNING_ALV_CTR_MFS_WARNING_NAME "AlvCtr_MFS_Warning"
#define CANI1_NONM_MFS_WARNING_MFSW_DRV_MOD_SWT_WARN_NAME "Mfsw_DrvModSwt_Warn"
#define CANI1_NONM_MFS_WARNING_MFS_ADAS_SWT_WARN_NAME "MFS_ADAS_Swt_Warn"
#define CANI1_NONM_MFS_WARNING_MFS_FAVORITE_SWT_WARN_NAME "MFS_Favorite_Swt_Warn"
#define CANI1_NONM_MFS_WARNING_MFS_RIM_SWT_HI_BEAM_WARN_NAME "MFS_Rim_Swt_Hi_Beam_Warn"
#define CANI1_NONM_MFS_WARNING_MFS_RIM_SWT_WIPER_WARN_NAME "MFS_Rim_Swt_Wiper_Warn"
#define CANI1_NONM_DCDC_WARNING_CRC_DCDC_WARNING_NAME "CRC_DCDC_Warning"
#define CANI1_NONM_DCDC_WARNING_ALV_CTR_DCDC_WARNING_NAME "AlvCtr_DCDC_Warning"
#define CANI1_NONM_DCDC_WARNING_HVSCO_DCDC_OPER_WARN_NAME "Hvsco_DcdcOperWarn"
#define CANI1_NONM_PSMD_WARNING_CRC_PSMD_WARNING_NAME "CRC_PSMD_Warning"
#define CANI1_NONM_PSMD_WARNING_ALV_CTR_PSMD_WARNING_NAME "AlvCtr_PSMD_Warning"
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_FRNT_BACK_MOT_WARN_NAME "SeatAdjmt_DrvFrntBackMotWarn"
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_HEATG_BACK_PAD_FAIL_WARN_NAME "SeatCfmt_DrvHeatgBackPadFailWarn"
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_VENTN_SQUB_FAN_FAIL_WARN_NAME "SeatCfmt_DrvVentnSqubFanFailWarn"
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_HEI_UP_DWN_MOT_WARN_NAME "SeatAdjmt_DrvHeiUpDwnMotWarn"
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_TILT_UP_DWN_MOT_WARN_NAME "SeatAdjmt_DrvTiltUpDwnMotWarn"
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_VENTN_CSHN_FAN_FAIL_WARN_NAME "SeatCfmt_DrvVentnCshnFanFailWarn"
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_ADJMT_WARN_NAME "SeatAdjmt_DrvAdjmtWarn"
#define CANI1_NONM_PSMD_WARNING_SEAT_ADJMT_DRV_RECL_UP_DWN_MOT_WARN_NAME "SeatAdjmt_DrvReclUpDwnMotWarn"
#define CANI1_NONM_PSMD_WARNING_SEAT_CFMT_DRV_MASSG_FAIL_WARN_NAME "SeatCfmt_DrvMassgFailWarn"
#define CANI1_NONM_PSMP_WARNING_CRC_PSMP_WARNING_NAME "CRC_PSMP_Warning"
#define CANI1_NONM_PSMP_WARNING_ALV_CTR_PSMP_WARNING_NAME "AlvCtr_PSMP_Warning"
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_TILT_UP_DWN_MOT_WARN_NAME "SeatAdjmt_PassTiltUpDwnMotWarn"
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_ADJMT_WARN_NAME "SeatAdjmt_PassAdjmtWarn"
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_VENTN_CSHN_FAN_FAIL_WRN_NAME "SeatCfmt_PassVentnCshnFanFailWrn"
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_RECL_UP_DWN_MOT_WARN_NAME "SeatAdjmt_PassReclUpDwnMotWarn"
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_HEI_UP_DWN_MOT_WARN_NAME "SeatAdjmt_PassHeiUpDwnMotWarn"
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_VENTN_SQUB_FAN_FAIL_WRN_NAME "SeatCfmt_PassVentnSqubFanFailWrn"
#define CANI1_NONM_PSMP_WARNING_SEAT_CFMT_PASS_MASSG_FAIL_WARN_NAME "SeatCfmt_PassMassgFailWarn"
#define CANI1_NONM_PSMP_WARNING_SEAT_ADJMT_PASS_FOWD_BAWD_MOT_WARN_NAME "SeatAdjmt_PassFowdBawdMotWarn"
#define CANI1_NONM_RWSM_WARNING_CRC_RWSM_WARNING_NAME "CRC_RWSM_Warning"
#define CANI1_NONM_RWSM_WARNING_ALV_CTR_RWSM_WARNING_NAME "AlvCtr_RWSM_Warning"
#define CANI1_NONM_RWSM_WARNING_RE_WHL_STEER_WARN_LAMP_NAME "ReWhlSteer_WarnLamp"
#define CANI1_NONM_ZCUR_WARNING_CRC_ZCUR_WARNING_NAME "CRC_ZCUR_Warning"
#define CANI1_NONM_ZCUR_WARNING_ALV_CTR_ZCUR_WARNING_NAME "AlvCtr_ZCUR_Warning"
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_LE_VENTN_CSHN_FAN_FAIL_WRN_NAME "SeatCfmt_ReLeVentnCshnFanFailWrn"
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_LE_VENTN_SQUB_FAN_FAIL_WRN_NAME "SeatCfmt_ReLeVentnSqubFanFailWrn"
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_RI_VENTN_CSHN_FAN_FAIL_WRN_NAME "SeatCfmt_ReRiVentnCshnFanFailWrn"
#define CANI1_NONM_ZCUR_WARNING_SEAT_CFMT_RE_RI_VENTN_SQUB_FAN_FAIL_WRN_NAME "SeatCfmt_ReRiVentnSqubFanFailWrn"
#define CANI1_NONM_ZCUR_WARNING_ACTTG_TAIL_GATE_WARN_NAME "Acttg_TailGate_Warn"
#define CANI1_NONM_ZCUR_WARNING_CHRGR_PORT_ILMN_LAMP_W_WARN_NAME "ChrgrPort_IlmnLampW_Warn"
#define CANI1_NONM_TLML_WARNING_CRC_TLML_WARNING_NAME "CRC_TLML_Warning"
#define CANI1_NONM_TLML_WARNING_ALV_CTR_TLML_WARNING_NAME "AlvCtr_TLML_Warning"
#define CANI1_NONM_TLML_WARNING_RELAMP_RE_LE_TLG_TURN_INDCR_WARN_NAME "Relamp_ReLeTLGTurnIndcr_Warn"
#define CANI1_NONM_TLML_WARNING_RELAMP_RE_LE_TLG_POSN_LAMP_WARN_NAME "Relamp_ReLeTLGPosnLamp_Warn"
#define CANI1_NONM_TLML_WARNING_RELAMP_LE_TLG_BRK_LAMP_WARN_NAME "Relamp_LeTLGBrkLamp_Warn"
#define CANI1_NONM_TLMR_WARNING_CRC_TLMR_WARNING_NAME "CRC_TLMR_Warning"
#define CANI1_NONM_TLMR_WARNING_ALV_CTR_TLMR_WARNING_NAME "AlvCtr_TLMR_Warning"
#define CANI1_NONM_TLMR_WARNING_RELAMP_RI_TLG_BRK_LAMP_WARN_NAME "Relamp_RiTLGBrkLamp_Warn"
#define CANI1_NONM_TLMR_WARNING_RELAMP_RE_RI_TLG_TURN_INDCR_WARN_NAME "Relamp_ReRiTLGTurnIndcr_Warn"
#define CANI1_NONM_TLMR_WARNING_RELAMP_RE_RI_TLG_POSN_LAMP_WARN_NAME "Relamp_ReRiTLGPosnLamp_Warn"
#define CANI1_NONM_RLML_WARNING_CRC_RLML_WARNING_NAME "CRC_RLML_Warning"
#define CANI1_NONM_RLML_WARNING_ALV_CTR_RLML_WARNING_NAME "AlvCtr_RLML_Warning"
#define CANI1_NONM_RLML_WARNING_RELAMP_LE_BODY_BRK_LAMP_WARN_NAME "Relamp_LeBodyBrkLamp_Warn"
#define CANI1_NONM_RLML_WARNING_RELAMP_RE_LE_BODY_TURN_INDCR_WARN_NAME "Relamp_ReLeBodyTurnIndcr_Warn"
#define CANI1_NONM_RLMR_WARNING_CRC_RLMR_WARNING_NAME "CRC_RLMR_Warning"
#define CANI1_NONM_RLMR_WARNING_ALV_CTR_RLMR_WARNING_NAME "AlvCtr_RLMR_Warning"
#define CANI1_NONM_RLMR_WARNING_RELAMP_RE_RI_BODY_TURN_INDCR_WARN_NAME "Relamp_ReRiBodyTurnIndcr_Warn"
#define CANI1_NONM_RLMR_WARNING_RELAMP_RI_BODY_BRK_LAMP_WARN_NAME "Relamp_RiBodyBrkLamp_Warn"
#define CANI1_NONM_SLMFC_WARNING_CRC_SLMFC_WARNING_NAME "CRC_SLMFC_Warning"
#define CANI1_NONM_SLMFC_WARNING_ALV_CTR_SLMFC_WARNING_NAME "AlvCtr_SLMFC_Warning"
#define CANI1_NONM_SLMFC_WARNING_HDLAMP_FRNT_CENTR_LE_SIGN_LAMP_WARN_NAME "Hdlamp_FrntCentr_LeSignLamp_Warn"
#define CANI1_NONM_SLMFC_WARNING_HDLAMP_FRNT_CENTR_RI_SIGN_LAMP_WARN_NAME "Hdlamp_FrntCentr_RiSignLamp_Warn"
#define CANI1_NONM_SLMFL_WARNING_CRC_SLMFL_WARNING_NAME "CRC_SLMFL_Warning"
#define CANI1_NONM_SLMFL_WARNING_ALV_CTR_SLMFL_WARNING_NAME "AlvCtr_SLMFL_Warning"
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_FRNT_LE_BODY_TURN_INDCR_WARN_NAME "Hdlamp_FrntLeBodyTurnIndcr_Warn"
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_LE_DRL_LAMP_WARN_NAME "Hdlamp_LeDRLLamp_Warn"
#define CANI1_NONM_SLMFL_WARNING_HDLAMP_LE_FRNT_POSN_LAMP_WARN_NAME "Hdlamp_LeFrntPosnLamp_Warn"
#define CANI1_NONM_SLMFR_WARNING_CRC_SLMFR_WARNING_NAME "CRC_SLMFR_Warning"
#define CANI1_NONM_SLMFR_WARNING_ALV_CTR_SLMFR_WARNING_NAME "AlvCtr_SLMFR_Warning"
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_FRNT_RI_BODY_TURN_INDCR_WARN_NAME "Hdlamp_FrntRiBodyTurnIndcr_Warn"
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_RI_DRL_LAMP_WARN_NAME "Hdlamp_RiDRLLamp_Warn"
#define CANI1_NONM_SLMFR_WARNING_HDLAMP_RI_FRNT_POSN_LAMP_WARN_NAME "Hdlamp_RiFrntPosnLamp_Warn"
#define CANI1_NONM_SLMRC_WARNING_CRC_SLMRC_WARNING_NAME "CRC_SLMRC_Warning"
#define CANI1_NONM_SLMRC_WARNING_ALV_CTR_SLMRC_WARNING_NAME "AlvCtr_SLMRC_Warning"
#define CANI1_NONM_SLMRC_WARNING_RELAMP_CENTR_RI_SIGN_LAMP_STS_NAME "Relamp_Centr_RiSignLampSts"
#define CANI1_NONM_SLMRC_WARNING_RELAMP_CENTR_LE_SIGN_LAMP_STS_NAME "Relamp_Centr_LeSignLampSts"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE0_NAME "IVI_DiagResp_Byte0"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE1_NAME "IVI_DiagResp_Byte1"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE2_NAME "IVI_DiagResp_Byte2"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE3_NAME "IVI_DiagResp_Byte3"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE4_NAME "IVI_DiagResp_Byte4"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE5_NAME "IVI_DiagResp_Byte5"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE6_NAME "IVI_DiagResp_Byte6"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE7_NAME "IVI_DiagResp_Byte7"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE8_NAME "IVI_DiagResp_Byte8"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE9_NAME "IVI_DiagResp_Byte9"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE10_NAME "IVI_DiagResp_Byte10"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE11_NAME "IVI_DiagResp_Byte11"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE12_NAME "IVI_DiagResp_Byte12"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE13_NAME "IVI_DiagResp_Byte13"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE14_NAME "IVI_DiagResp_Byte14"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE15_NAME "IVI_DiagResp_Byte15"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE16_NAME "IVI_DiagResp_Byte16"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE17_NAME "IVI_DiagResp_Byte17"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE18_NAME "IVI_DiagResp_Byte18"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE19_NAME "IVI_DiagResp_Byte19"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE20_NAME "IVI_DiagResp_Byte20"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE21_NAME "IVI_DiagResp_Byte21"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE22_NAME "IVI_DiagResp_Byte22"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE23_NAME "IVI_DiagResp_Byte23"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE24_NAME "IVI_DiagResp_Byte24"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE25_NAME "IVI_DiagResp_Byte25"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE26_NAME "IVI_DiagResp_Byte26"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE27_NAME "IVI_DiagResp_Byte27"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE28_NAME "IVI_DiagResp_Byte28"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE29_NAME "IVI_DiagResp_Byte29"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE30_NAME "IVI_DiagResp_Byte30"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE31_NAME "IVI_DiagResp_Byte31"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE32_NAME "IVI_DiagResp_Byte32"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE33_NAME "IVI_DiagResp_Byte33"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE34_NAME "IVI_DiagResp_Byte34"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE35_NAME "IVI_DiagResp_Byte35"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE36_NAME "IVI_DiagResp_Byte36"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE37_NAME "IVI_DiagResp_Byte37"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE38_NAME "IVI_DiagResp_Byte38"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE39_NAME "IVI_DiagResp_Byte39"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE40_NAME "IVI_DiagResp_Byte40"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE41_NAME "IVI_DiagResp_Byte41"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE42_NAME "IVI_DiagResp_Byte42"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE43_NAME "IVI_DiagResp_Byte43"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE44_NAME "IVI_DiagResp_Byte44"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE45_NAME "IVI_DiagResp_Byte45"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE46_NAME "IVI_DiagResp_Byte46"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE47_NAME "IVI_DiagResp_Byte47"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE48_NAME "IVI_DiagResp_Byte48"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE49_NAME "IVI_DiagResp_Byte49"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE50_NAME "IVI_DiagResp_Byte50"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE51_NAME "IVI_DiagResp_Byte51"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE52_NAME "IVI_DiagResp_Byte52"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE53_NAME "IVI_DiagResp_Byte53"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE54_NAME "IVI_DiagResp_Byte54"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE55_NAME "IVI_DiagResp_Byte55"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE56_NAME "IVI_DiagResp_Byte56"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE57_NAME "IVI_DiagResp_Byte57"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE58_NAME "IVI_DiagResp_Byte58"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE59_NAME "IVI_DiagResp_Byte59"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE60_NAME "IVI_DiagResp_Byte60"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE61_NAME "IVI_DiagResp_Byte61"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE62_NAME "IVI_DiagResp_Byte62"
#define CANI1_NONM_IVI_DIAG_RESP_IVI_DIAG_RESP_BYTE63_NAME "IVI_DiagResp_Byte63"
#define CANI1_NONM_WLC_DIAG_RESP_WLC_DIAG_RESP_BYTE0_NAME "WLC_DiagResp_Byte0"
#define CANI1_NONM_WLC_DIAG_RESP_WLC_DIAG_RESP_BYTE1_NAME "WLC_DiagResp_Byte1"
#define CANI1_NONM_WLC_DIAG_RESP_WLC_DIAG_RESP_BYTE2_NAME "WLC_DiagResp_Byte2"
#define CANI1_NONM_WLC_DIAG_RESP_WLC_DIAG_RESP_BYTE3_NAME "WLC_DiagResp_Byte3"
#define CANI1_NONM_WLC_DIAG_RESP_WLC_DIAG_RESP_BYTE4_NAME "WLC_DiagResp_Byte4"
#define CANI1_NONM_WLC_DIAG_RESP_WLC_DIAG_RESP_BYTE5_NAME "WLC_DiagResp_Byte5"
#define CANI1_NONM_WLC_DIAG_RESP_WLC_DIAG_RESP_BYTE6_NAME "WLC_DiagResp_Byte6"
#define CANI1_NONM_WLC_DIAG_RESP_WLC_DIAG_RESP_BYTE7_NAME "WLC_DiagResp_Byte7"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE0_NAME "IVI_DiagReq_Byte0"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE1_NAME "IVI_DiagReq_Byte1"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE2_NAME "IVI_DiagReq_Byte2"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE3_NAME "IVI_DiagReq_Byte3"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE4_NAME "IVI_DiagReq_Byte4"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE5_NAME "IVI_DiagReq_Byte5"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE6_NAME "IVI_DiagReq_Byte6"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE7_NAME "IVI_DiagReq_Byte7"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE8_NAME "IVI_DiagReq_Byte8"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE9_NAME "IVI_DiagReq_Byte9"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE10_NAME "IVI_DiagReq_Byte10"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE11_NAME "IVI_DiagReq_Byte11"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE12_NAME "IVI_DiagReq_Byte12"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE13_NAME "IVI_DiagReq_Byte13"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE14_NAME "IVI_DiagReq_Byte14"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE15_NAME "IVI_DiagReq_Byte15"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE16_NAME "IVI_DiagReq_Byte16"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE17_NAME "IVI_DiagReq_Byte17"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE18_NAME "IVI_DiagReq_Byte18"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE19_NAME "IVI_DiagReq_Byte19"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE20_NAME "IVI_DiagReq_Byte20"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE21_NAME "IVI_DiagReq_Byte21"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE22_NAME "IVI_DiagReq_Byte22"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE23_NAME "IVI_DiagReq_Byte23"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE24_NAME "IVI_DiagReq_Byte24"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE25_NAME "IVI_DiagReq_Byte25"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE26_NAME "IVI_DiagReq_Byte26"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE27_NAME "IVI_DiagReq_Byte27"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE28_NAME "IVI_DiagReq_Byte28"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE29_NAME "IVI_DiagReq_Byte29"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE30_NAME "IVI_DiagReq_Byte30"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE31_NAME "IVI_DiagReq_Byte31"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE32_NAME "IVI_DiagReq_Byte32"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE33_NAME "IVI_DiagReq_Byte33"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE34_NAME "IVI_DiagReq_Byte34"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE35_NAME "IVI_DiagReq_Byte35"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE36_NAME "IVI_DiagReq_Byte36"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE37_NAME "IVI_DiagReq_Byte37"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE38_NAME "IVI_DiagReq_Byte38"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE39_NAME "IVI_DiagReq_Byte39"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE40_NAME "IVI_DiagReq_Byte40"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE41_NAME "IVI_DiagReq_Byte41"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE42_NAME "IVI_DiagReq_Byte42"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE43_NAME "IVI_DiagReq_Byte43"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE44_NAME "IVI_DiagReq_Byte44"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE45_NAME "IVI_DiagReq_Byte45"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE46_NAME "IVI_DiagReq_Byte46"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE47_NAME "IVI_DiagReq_Byte47"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE48_NAME "IVI_DiagReq_Byte48"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE49_NAME "IVI_DiagReq_Byte49"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE50_NAME "IVI_DiagReq_Byte50"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE51_NAME "IVI_DiagReq_Byte51"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE52_NAME "IVI_DiagReq_Byte52"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE53_NAME "IVI_DiagReq_Byte53"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE54_NAME "IVI_DiagReq_Byte54"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE55_NAME "IVI_DiagReq_Byte55"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE56_NAME "IVI_DiagReq_Byte56"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE57_NAME "IVI_DiagReq_Byte57"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE58_NAME "IVI_DiagReq_Byte58"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE59_NAME "IVI_DiagReq_Byte59"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE60_NAME "IVI_DiagReq_Byte60"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE61_NAME "IVI_DiagReq_Byte61"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE62_NAME "IVI_DiagReq_Byte62"
#define CANI1_NONM_IVI_DIAG_REQ_IVI_DIAG_REQ_BYTE63_NAME "IVI_DiagReq_Byte63"
#define CANI1_NONM_WLC_DIAG_REQ_WLC_DIAG_REQ_BYTE0_NAME "WLC_DiagReq_Byte0"
#define CANI1_NONM_WLC_DIAG_REQ_WLC_DIAG_REQ_BYTE1_NAME "WLC_DiagReq_Byte1"
#define CANI1_NONM_WLC_DIAG_REQ_WLC_DIAG_REQ_BYTE2_NAME "WLC_DiagReq_Byte2"
#define CANI1_NONM_WLC_DIAG_REQ_WLC_DIAG_REQ_BYTE3_NAME "WLC_DiagReq_Byte3"
#define CANI1_NONM_WLC_DIAG_REQ_WLC_DIAG_REQ_BYTE4_NAME "WLC_DiagReq_Byte4"
#define CANI1_NONM_WLC_DIAG_REQ_WLC_DIAG_REQ_BYTE5_NAME "WLC_DiagReq_Byte5"
#define CANI1_NONM_WLC_DIAG_REQ_WLC_DIAG_REQ_BYTE6_NAME "WLC_DiagReq_Byte6"
#define CANI1_NONM_WLC_DIAG_REQ_WLC_DIAG_REQ_BYTE7_NAME "WLC_DiagReq_Byte7"
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_OBD_FUNC_DIAG_REQ_BYTE0_NAME "OBD_FuncDiagReq_Byte0"
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_OBD_FUNC_DIAG_REQ_BYTE1_NAME "OBD_FuncDiagReq_Byte1"
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_OBD_FUNC_DIAG_REQ_BYTE2_NAME "OBD_FuncDiagReq_Byte2"
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_OBD_FUNC_DIAG_REQ_BYTE3_NAME "OBD_FuncDiagReq_Byte3"
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_OBD_FUNC_DIAG_REQ_BYTE4_NAME "OBD_FuncDiagReq_Byte4"
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_OBD_FUNC_DIAG_REQ_BYTE5_NAME "OBD_FuncDiagReq_Byte5"
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_OBD_FUNC_DIAG_REQ_BYTE6_NAME "OBD_FuncDiagReq_Byte6"
#define CANI1_NONM_OBD_FUNC_DIAG_REQ_OBD_FUNC_DIAG_REQ_BYTE7_NAME "OBD_FuncDiagReq_Byte7"

/**
 * Signals in message OBD_FuncDiagResp.
 *
 * Diagnostic Functional Request

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_obd_func_diag_resp_t {
    /**
     * Diagnostic Signal Data Request Byte0
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_resp_byte0;

    /**
     * Diagnostic Signal Data Request Byte1
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_resp_byte1;

    /**
     * Diagnostic Signal Data Request Byte2
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_resp_byte2;

    /**
     * Diagnostic Signal Data Request Byte3
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_resp_byte3;

    /**
     * Diagnostic Signal Data Request Byte4
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_resp_byte4;

    /**
     * Diagnostic Signal Data Request Byte5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_resp_byte5;

    /**
     * Diagnostic Signal Data Request Byte6
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_resp_byte6;

    /**
     * Diagnostic Signal Data Request Byte7
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_resp_byte7;
};

/**
 * Signals in message ACM_CrashStat.
 *
 * Airbag Control Module Crash Status

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_acm_crash_stat_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_acm_crash_stat;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_acm_crash_stat;

    /**
     * crash status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t airbg_crash_sts;
};

/**
 * Signals in message EPS_SFA_SteerWhl_Pub_Info.
 *
 * Electric Power Steering-Steering Feedback Actuator 1 (Except SFA And RWA)
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_eps_sfa_steer_whl_pub_info_t {
    /**
     * Cyclic redundancy check Profile 1C
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_eps_sfa_steer_whl_pub_info;

    /**
     * Alive Counter Profile 1C
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_eps_sfa_steer_whl_pub_info;

    /**
     * Torque applied to the steering wheel
     *
     * Range: 0..4000 (-40..40 Nm)
     * Scale: 0.02
     * Offset: -40
     */
    uint16_t stbwr_sfa_steer_whl_tq;

    /**
     * Steering emergency request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_sfa_emgcy_req;

    /**
     * SFA Calculated Steering Angle
     *
     * Range: 0..65500 (-655..655 degree)
     * Scale: 0.02
     * Offset: -655
     */
    uint16_t stbwr_sfa_steer_whl_ag;

    /**
     * Status feedback based on vehicle mode
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_tun_sts;

    /**
     * SFA Centering status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_centrg_sts;

    /**
     * SFA control mode for Soft lock information to driver
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_sfa_ctl_mode;
};

/**
 * Signals in message VCU_ETractSys_Info.
 *
 * Vehicle Control Unit Traction system Information
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_vcu_e_tract_sys_info_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_vcu_e_tract_sys_info;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_vcu_e_tract_sys_info;

    /**
     * Target torque of electric machine system 1
     *
     * Range: 0..4095 (-1023..1024.5 Nm)
     * Scale: 0.5
     * Offset: -1023
     */
    uint16_t dtqmt_tgt_tq_eds_re;

    /**
     * Target torque of electric machine system 2
     *
     * Range: 0..4095 (-1023..1024.5 Nm)
     * Scale: 0.5
     * Offset: -1023
     */
    uint16_t dtqmt_tgt_tq_eds_frnt;
};

/**
 * Signals in message RWSM_Info.
 *
 * Rear Wheel Steering Module Info
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_rwsm_info_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_rwsm_info;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_rwsm_info;

    /**
     * REAR_RWA_Measured Stroke Value
     *
     * Range: 32767..65532 (0..327.65 mm)
     * Scale: 0.01
     * Offset: -327.67
     */
    uint16_t re_whl_steer_measd_stk_val;

    /**
     * Rear wheel steering status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t re_whl_steer_sts;
};

/**
 * Signals in message BMS_Sts.
 *
 * Battery Management System Status

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_bms_sts_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_bms_sts;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_bms_sts;

    /**
     * HV battery preconditioning status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_pre_cdn_sts;
};

/**
 * Signals in message EPS_RWA_Pinion_Pub_Info.
 *
 * Electric Power Steering-Road Wheel Actuator 1 Pinion Info exchanged (Except SFA And RWA)
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_eps_rwa_pinion_pub_info_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_eps_rwa_pinion_pub_info;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_eps_rwa_pinion_pub_info;

    /**
     * RWA pinion angle value
     *
     * Range: 0..65500 (-655..655 degree)
     * Scale: 0.02
     * Offset: -655
     */
    uint16_t stbwr_rwa_pinion_ag;

    /**
     * RWA Pinion Angle Speed
     *
     * Range: 0..65520 (-1638..1638 deg/s)
     * Scale: 0.05
     * Offset: -1638
     */
    uint16_t stbwr_rwa_pinion_ag_spd;

    /**
     * RWA Current Rack Position
     *
     * Range: 0..1048000 (-524..524 mm)
     * Scale: 0.001
     * Offset: -524
     */
    uint32_t stbwr_rwa_rack_posn;

    /**
     * RWA Speed Feedback
     *
     * Range: 0..1048575 (-524..524.575 mm/s)
     * Scale: 0.001
     * Offset: -524
     */
    uint32_t stbwr_rwa_rack_spd;
};

/**
 * Signals in message EBCM_Veh_Info.
 *
 * Electronic Brake Control Module Vehicle Information

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ebcm_veh_info_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ebcm_veh_info;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ebcm_veh_info;

    /**
     * Actual vehicle speed
     *
     * Range: 0..22400 (0..350 kmph)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t abs_act_veh_spd;
};

/**
 * Signals in message ZCUF_Clamp_Info.
 *
 * Front Zone Control Unit Clamp Information

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_zcuf_clamp_info_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_zcuf_clamp_info;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_zcuf_clamp_info;

    /**
     * Vehicle State
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clmmg_veh_st;

    /**
     * Ignition switch status - KL15
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clmmg_cl15_l;

    /**
     * Switched clamp 30 power supply.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t clmmg_cl30_s_l;

    /**
     * load shedding request for LV
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lvm_loa_shed_req;
};

/**
 * Signals in message ASU_SnsrInfo.
 *
 * Air Spring Suspension Unit Sensor Info
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_asu_snsr_info_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_asu_snsr_info;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_asu_snsr_info;

    /**
     * Front Left Height Sensor Info
     *
     * Range: 0..4095 (0..4095 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t air_susp_unit_hei_fl;

    /**
     * Front Right Height Sensor Info
     *
     * Range: 0..4095 (0..4095 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t air_susp_unit_hei_fr;

    /**
     * Rear Right Height Sensor Info
     *
     * Range: 0..4095 (0..4095 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t air_susp_unit_hei_rr;

    /**
     * Rear Left Height Sensor Info
     *
     * Range: 0..4095 (0..4095 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t air_susp_unit_hei_rl;

    /**
     * Height status depend on level sensor information
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_susp_unit_hei_sts;

    /**
     * Damping Stiffness status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_susp_unit_cdc_mode_sts;

    /**
     * In-Egress mode Acknowledgement
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_susp_unit_ingrs_mod_ack;

    /**
     * Spring Stiffness status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_susp_unit_sprg_mode_sts;

    /**
     * Compressor status Info
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_susp_unit_cmpr_sts;

    /**
     * ASU sends Service mode enable/Disabled status to IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_susp_unit_srv_mode_sts;

    /**
     * Air_Tank_pressure_information
     *
     * Range: 0..253 (0..2530 bar)
     * Scale: 10
     * Offset: 0
     */
    uint8_t air_susp_unit_air_tank_p;

    /**
     * Air suspension available unavailable status to user
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_susp_unit_sts;
};

/**
 * Signals in message VCU_Batt_Info.
 *
 * Vehicle Control Unit Battery information
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_vcu_batt_info_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_vcu_batt_info;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_vcu_batt_info;

    /**
     * Battery Pack Total Current
     *
     * Range: 0..30000 (-1500..1500 A)
     * Scale: 0.1
     * Offset: -1500
     */
    uint16_t bms_pack_i;

    /**
     * Pack Voltage
     *
     * Range: 0..6000 (0..600 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_pack_u;

    /**
     * BMS Remain Charging Time
     *
     * Range: 0..1500 (0..1500 minute)
     * Scale: 1
     * Offset: 0
     */
    uint16_t acchg_rmng_chg_ti;

    /**
     * BMS Remaining Charging Time for displaying only
     *
     * Range: 0..1500 (0..1500 minute)
     * Scale: 1
     * Offset: 0
     */
    uint16_t fschg_rmng_chg_ti;
};

/**
 * Signals in message VCU_Charging_Info.
 *
 * Vehicle Control Unit Charging Information
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_vcu_charging_info_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_vcu_charging_info;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_vcu_charging_info;

    /**
     * Connection Status Of Dc Fast Charging Gun
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fschg_dc_chg_gun_in;

    /**
     * Slow Charge Gun Insert Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acchg_ac_chg_gun_in;
};

/**
 * Signals in message VCU_HVDrvSys_Status.
 *
 * Vehicle Control Unit HV Drive system status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_vcu_hv_drv_sys_status_t {
    /**
     * Cyclic redundancy check Profile 1C
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_vcu_hv_drv_sys_status;

    /**
     * Alive Counter Profile 1C
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_vcu_hv_drv_sys_status;

    /**
     * Active Drive mode
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvmc_act_drv_mode;

    /**
     * HV Drive System Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t enmgt_hv_drv_sys_sts;

    /**
     * Vehicle drive mode status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvmc_act_drv_mode_vld;

    /**
     * Actual Gear Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_act_gear;
};

/**
 * Signals in message EBCM_Sts_Req.
 *
 * Electronic Brake Control Module status request
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ebcm_sts_req_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ebcm_sts_req;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ebcm_sts_req;

    /**
     * ABS activation indication
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_intv_sts;

    /**
     * Traction control system available
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_tcs_avl;

    /**
     * Brake Fluid Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_fld_lvl_indcr_brk_fld_sts;

    /**
     * Brake lights on requested by EPB auto apply
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_brk_li_on_req;

    /**
     * indicates EBD active deactive status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ebd_sys_sts;

    /**
     * Status of HDC system
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_hdc_sts;

    /**
     * Status of TCS system
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_tcs_sts;

    /**
     * Status of CBC system
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_cornering_brk_ctl_sts;

    /**
     * Status of Hill Start Assist system
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_hill_strt_assi_sts;

    /**
     * Status signal for electric park brake function
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_sts;
};

/**
 * Signals in message ZCUR_LampCmd.
 *
 * Rear Zone Control Unit Lamp Command
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_zcur_lamp_cmd_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_zcur_lamp_cmd;

    /**
     * Alive Counter Profile 5
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_zcur_lamp_cmd;
};

/**
 * Signals in message SBM_LVBatInfo_1.
 *
 * Smart Battery Module LV Battery Information 1
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_sbm_lv_bat_info_1_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_sbm_lv_bat_info_1;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_sbm_lv_bat_info_1;

    /**
     * LV battery voltage
     *
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t sbm_lv_batt_v;

    /**
     * SBM Thermal Runaway Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sbm_lv_bat_therm_runawy;
};

/**
 * Signals in message SBM_LVBatInfo_2.
 *
 * Smart Battery Module LV Battery Information 2

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_sbm_lv_bat_info_2_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_sbm_lv_bat_info_2;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_sbm_lv_bat_info_2;

    /**
     * LV battery actual SoH
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sbm_lv_bat_act_soh;

    /**
     * LV Battery critical Soc Alert (<10%) (ASIL B)
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sbm_critical_so_c_alert;

    /**
     * LV Battery Temprature
     *
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t sbm_lv_batt_t;
};

/**
 * Signals in message VCU_Consumption_Info.
 *
 * Vehicle Control Unit Consumption Information
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_vcu_consumption_info_t {
    /**
     * Average energy consumption of LV auxilixaries
     *
     * Range: 0..14400 (0..1440 Kwh/100Km)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t engmt_lv_aux_avg_eng_cns;

    /**
     * Instataneous energy consumpution
     *
     * Range: 0..1023 (0..1023 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t engmt_intts_eng_cns_rate;

    /**
     * Total Average energy consumption value
     *
     * Range: 0..14400 (0..1440 Kwh/100Km)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t engmt_tot_avg_eng_cns;

    /**
     * Average energy consumption of EDS
     *
     * Range: 0..14400 (0..1440 Kwh/100Km)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t engmt_eds_avg_eng_cns;

    /**
     * Average energy consumption of CCU
     *
     * Range: 0..14400 (0..1440 Kwh/100Km)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t engmt_therm_avg_eng_cns;
};

/**
 * Signals in message VCU_To_Veh_Info.
 *
 * Vehicle Control Unit features info to IVI
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_vcu_to_veh_info_t {
    /**
     * Cyclic Redundancy check Profilr 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_vcu_to_veh_info;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_vcu_to_veh_info;

    /**
     * HV battery SOC for displaying only
     *
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t acchg_hv_bat_soc;

    /**
     * Charge Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acchg_ac_chg_sts;

    /**
     * Actual wheel drive mode
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t awd_act_whl_drv_mode;

    /**
     * Total Power delivered by charger while charging
     *
     * Range: 0..14400 (0..1440 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t engmt_chrgr_dlv_pwr;

    /**
     * Remaining Range information
     *
     * Range: 0..1023 (0..1023 km)
     * Scale: 1
     * Offset: 0
     */
    uint16_t engmt_veh_rmng_drv_rng;

    /**
     * Actual coasting level
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cregb_coast_rgn_lvl_indcr;

    /**
     * Vehicle Charging Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fschg_veh_chrgn_sts;

    /**
     * Change gear alert from P to drive
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_chng_gear_from_park;

    /**
     * Vehicle milage information
     *
     * Range: 0..1023 (0..1023 km/kWh)
     * Scale: 1
     * Offset: 0
     */
    uint16_t engmt_veh_milg;

    /**
     * HV Battery SOC for displaying only
     *
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fschg_hv_bat_soc;

    /**
     * Charging gun status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fschg_chg_gun_lock_sts;

    /**
     * Validity of All wheel drive mode
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t awd_act_whl_drv_mode_vld;
};

/**
 * Signals in message ZCUF_RlhsLight_Info.
 *
 * Zone Control Unit-Front RLHS Information
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_zcuf_rlhs_light_info_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_zcuf_rlhs_light_info;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_zcuf_rlhs_light_info;

    /**
     * Driver Side Solar intensity
     *
     * Range: 0..250 (0..1000 W/m2)
     * Scale: 4
     * Offset: 0
     */
    uint8_t rlhs_solar_drvr;

    /**
     * Passenger Side Solar intensity
     *
     * Range: 0..250 (0..1000 W/m2)
     * Scale: 4
     * Offset: 0
     */
    uint8_t rlhs_solar_pass;
};

/**
 * Signals in message HDLML_FrontLamp_Sts.
 *
 * Headlamp Module-Left Front Lamp Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_hdlml_front_lamp_sts_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_hdlml_front_lamp_sts;

    /**
     * Alive Counter Profile 5
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_hdlml_front_lamp_sts;

    /**
     * Low Beam LH On Off Status by HDLM Fusa signal (ASIL B)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_le_lo_beam_lamp_sts;

    /**
     * High Beam LH On Off Status by HDLM Fusa signal (ASIL B)
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_le_hi_beam_lamp_sts;
};

/**
 * Signals in message HDLMR_FrontLamp_Sts.
 *
 * Headlamp Module-Right Front Lamp Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_hdlmr_front_lamp_sts_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_hdlmr_front_lamp_sts;

    /**
     * Alive Counter Profile 5
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_hdlmr_front_lamp_sts;

    /**
     * Low Beam RH On Off Status by HDLM Fusa signal (ASIL B)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_ri_lo_beam_lamp_sts;

    /**
     * High  Beam RH On Off Status by HDLM
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_ri_hi_beam_lamp_sts;
};

/**
 * Signals in message SLMFL_FrontLamp_Sts.
 *
 * Signal Lamp Module Front Left Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_slmfl_front_lamp_sts_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_slmfl_front_lamp_sts;

    /**
     * Alive Counter Profile 5
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_slmfl_front_lamp_sts;

    /**
     *  Left Position light status combination of  Front and rear
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_le_frnt_posn_lamp_sts;

    /**
     * Left DRL  lamp  ON ,OFF Status (Fusa ASIL B)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_le_drl_lamp_sts;

    /**
     * Left side turn indicator On OFF status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_frnt_le_body_turn_indcr_sts;
};

/**
 * Signals in message SLMFR_FrontLamp_Sts.
 *
 * Signal Lamp Module Front Right Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_slmfr_front_lamp_sts_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_slmfr_front_lamp_sts;

    /**
     * Alive Counter Profile 5
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_slmfr_front_lamp_sts;

    /**
     *  Right Position light status combination of  Front and rear
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_ri_frnt_posn_lamp_sts;

    /**
     * Right DRL  lamp  ON ,OFF Status (Fusa ASIL B)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_ri_drl_lamp_sts;

    /**
     * Right side turn indicator On OFF status for IVI display and audible warning
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_frnt_ri_body_turn_indcr_sts;
};

/**
 * Signals in message RLML_RearLampSts.
 *
 * Rear Lamp Module Left Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_rlml_rear_lamp_sts_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_rlml_rear_lamp_sts;

    /**
     * Alive Counter Profile 5
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_rlml_rear_lamp_sts;

    /**
     * Left brake lamp OnOff Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_le_body_brk_lamp_sts;

    /**
     * Rear Left  Turn light on off status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_le_body_posn_lamp_sts;

    /**
     * Rear Left Position light status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_le_body_turn_indcr_sts;
};

/**
 * Signals in message RLMR_RearLampSts.
 *
 * Rear Lamp Module Right Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_rlmr_rear_lamp_sts_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_rlmr_rear_lamp_sts;

    /**
     * Alive Counter Profile 5
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_rlmr_rear_lamp_sts;

    /**
     * Right brake lamp OnOff Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_ri_body_brk_lamp_sts;

    /**
     * Rear Right Position light status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_ri_body_posn_lamp_sts;

    /**
     * Rear Right Turn light on off status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_ri_body_turn_indcr_sts;
};

/**
 * Signals in message TLML_RearLampSts.
 *
 * Tail Lamp Module Rear left Lamp status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_tlml_rear_lamp_sts_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_tlml_rear_lamp_sts;

    /**
     * Alive Counter Profile 5
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_tlml_rear_lamp_sts;

    /**
     * Left brake lamp OnOff Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_le_tlg_brk_lamp_sts;

    /**
     * Rear Left Position light status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_le_tlg_posn_lamp_sts;

    /**
     * Rear Left  Turn light on off status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_le_tlg_turn_indcr_sts;
};

/**
 * Signals in message SLMFC_LampSts.
 *
 * Front Center Signature Light Module Lamp Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_slmfc_lamp_sts_t {
    /**
     * Cyclic Redundancy check Profilr 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_slmfc_lamp_sts;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_slmfc_lamp_sts;

    /**
     * Front left signature lamp status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_frnt_centr_le_sign_lamp_sts;

    /**
     * Front right signature lamp status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_frnt_centr_ri_sign_lamp_sts;
};

/**
 * Signals in message SLMRC_LampSts.
 *
 * Signature Light Module - Rear Center Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_slmrc_lamp_sts_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_slmrc_lamp_sts;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_slmrc_lamp_sts;

    /**
     * Rear left signature lamp status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_frnt_centr_le_sign_lamp_sts;

    /**
     * Rear Right signature lamp status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_frnt_centr_ri_sign_lamp_sts;
};

/**
 * Signals in message TLMR_RearLampSts.
 *
 * Tail Lamp Module Rear Right Lamp status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_tlmr_rear_lamp_sts_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_tlmr_rear_lamp_sts;

    /**
     * Alive Counter Profile 5
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_tlmr_rear_lamp_sts;

    /**
     * Right brake lamp OnOff Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_ri_tlg_brk_lamp_sts;

    /**
     * Rear Right Position light status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_ri_tlg_posn_lamp_sts;

    /**
     * Rear Right Turn light on off status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_ri_tlg_turn_indcr_sts;
};

/**
 * Signals in message CCU_CompPwr_Req.
 *
 * Climate Control Unit Power Request
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ccu_comp_pwr_req_t {
    /**
     * Grill Open/Close Request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_ags_open_req;
};

/**
 * Signals in message CCU_TemperatureFbk.
 *
 * Climate Control Unit Temperature Feedback
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ccu_temperature_fbk_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ccu_temperature_fbk;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ccu_temperature_fbk;

    /**
     * Ambient Temperature
     *
     * Range: 0..250 (-40..85 °C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t caclh_amb_t;
};

/**
 * Signals in message ZCUF_RlhsRainHumidity_Info.
 *
 * Zone Control Unit-Front RLHS Information
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_zcuf_rlhs_rain_humidity_info_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_zcuf_rlhs_rain_humidity_info;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_zcuf_rlhs_rain_humidity_inf;

    /**
     * Rainfall status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlhs_rain_fall_sts;
};

/**
 * Signals in message ADAS_Rvc_Info.
 *
 * Rear View Camera Information
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_adas_rvc_info_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_adas_rvc_info;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_adas_rvc_info;

    /**
     * Current Status of 'Rear Blind Spot Monitoring' arround Vehicle
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rvc_re_blind_spot_sts;
};

/**
 * Signals in message IVI_Ept_Feature_Info.
 *
 * In Vehicle Infotainment Ept Feature Information
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_ept_feature_info_t {
    /**
     * Charge gun unlock command via IVI,Mobile,Key Fob
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_acchr_chrggun_unlck_cmd;

    /**
     * Charge stop request via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acchg_ivi_chg_stop_req;

    /**
     * Scheduled charge start time by IVI touch screen.
     *
     * Range: 0..2359 (0..2359 minute)
     * Scale: 1
     * Offset: 0
     */
    uint16_t acchg_chrgn_sdle_ti;

    /**
     * Max charge current limit for Scheduled Charging via IVI
     *
     * Range: 0..15000 (0..1500 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t acchg_ivi_max_chg_i_lim;

    /**
     * Peak hour Management enable for schedule charging via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acchg_peak_hour_mngt_ena;

    /**
     * Enabling /disabling command for scheduled charging.via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acchg_ivi_ena_sdle_chrgn;

    /**
     *  Target SOC limit from IVI
     *
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t acchg_ivi_tgt_chg_soc_lvl;

    /**
     * Driver wheel drive mode selection request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t awd_whl_drv_mode_seln;

    /**
     * Tow mode set from IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_tow_mode_req;

    /**
     * This signal indicates Valet Mode active deasctive statu
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvmc_valet_mode_acvn_sts;

    /**
     * This signal indicates Wash Mode active deactive status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvmc_wash_mode_acvn_sts;

    /**
     *  speed Limit for Service mode from IVI
     *
     * Range: 0..22400 (0..350 kmph)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t dtqmt_srv_mode_spd_lim;

    /**
     * This signal indicates showroom Mode active deactive status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvmc_showroom_mode_acvn_sts;

    /**
     * Service Mode Speed Override Enable
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dtqmt_srv_spd_ovrr_ena;

    /**
     * This signal indicates Transport mode active deactive status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvmc_trspt_mode_acvn_sts;

    /**
     *  speed Limit for valet mode from IVI
     *
     * Range: 0..22400 (0..350 kmph)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t dtqmt_valet_mode_spd_lim;

    /**
     * Vehicle drive mode Request from IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvmc_drv_mode_seln_req;

    /**
     * Regen level request
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cregb_regen_lvl_req;
};

/**
 * Signals in message ZCUR_IVI_Sts.
 *
 * Rear Zone Control Unit IVI Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_zcur_ivi_sts_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_zcur_ivi_sts;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_zcur_ivi_sts;

    /**
     * Tailgate Open/Close status
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acttg_tail_gate_sts;

    /**
     * Tailgate Normalised state
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acttg_tail_gate_nmlzn_sts;

    /**
     * TLG ajar Switch status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acttg_tail_gate_ajar_sts;

    /**
     * Tailgate Actual position
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acttg_act_posn_ag_sts;

    /**
     * RearLH seat ventilation status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_le_ventn_sts;

    /**
     * RearRH seat ventilation status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_ri_ventn_sts;

    /**
     * RearLH seat ventilation seat cushion fan failuare status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_le_ventn_cshn_fan_fail_sts;

    /**
     * RearLH seat ventilation squab fan failuare status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_le_ventn_squb_fan_fail_sts;

    /**
     * RearRH seat ventilation cushion fan failuare status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_ri_ventn_cshn_fan_fail_sts;

    /**
     * RearRH seat ventilation squab fan failuare status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_ri_ventn_squb_fan_fail_sts;

    /**
     * Charge port lock unlock actuator status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chrgr_port_lock_unlck_sts;

    /**
     * Charge Port  Door Open/Close Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chrgr_port_ajar_sts;

    /**
     * Rear Right License plate lamp status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_ri_lice_plate_sts;

    /**
     * Rear Left License plate lamp status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_le_lice_plate_sts;

    /**
     * Rear Fog lamp status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_fog_lamp_sts;

    /**
     * Rear center high mount stop lamp status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_chmsl_sts;

    /**
     * Reverse lamp status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_rev_lmp_sts;
};

/**
 * Signals in message CCU_FaultSts.
 *
 * Climate Control Unit Fault Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ccu_fault_sts_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ccu_fault_sts;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ccu_fault_sts;

    /**
     * Front blower fail status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frnt_blowr_flt_sts;

    /**
     * rear blower motor fails status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsr_re_blowr_flt_sts;

    /**
     * Ionizer fail status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_ioniser_flt_sts;

    /**
     * Failure of connectivity between CCU and Fragrance Selection Module
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_fragn_conn_loss;

    /**
     * Fragarance module fail status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frgrnc_flt_sts;

    /**
     * failure of connectivity between CCU and Ioniser Module
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_ioniser_conn_loss;

    /**
     * Defrost Flap Fault
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_demist_flap_flt_sts;
};

/**
 * Signals in message CCU_ClimSys_Sts.
 *
 * Climate Control Unit System Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ccu_clim_sys_sts_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ccu_clim_sys_sts;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ccu_clim_sys_sts;

    /**
     * Air mode selection feedback
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_air_mode_seln_fb;

    /**
     * Front blower speed feedback
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frnt_blowr_lvl_fb;

    /**
     * Ionizer on off status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_ioniser_on_off_sts;

    /**
     * HVAC Front Defrost Recommadation to driver
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_drvr_demist_rcmn;

    /**
     * rear blower motor Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsr_re_blowr_lvl_fb;

    /**
     * Recirculation flap position
     *
     * Range: 0..10 (0..100 %)
     * Scale: 10
     * Offset: 0
     */
    uint8_t ccsf_rcl_flap_pos;

    /**
     * Co2 level status
     *
     * Range: 0..10 (0..100 ppm)
     * Scale: 10
     * Offset: 0
     */
    uint8_t ccsf_co2_lvl;

    /**
     * Vent motor Front Left Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_cen_le_ven_dir_sts;

    /**
     * Vent motor Front Right Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_cen_ri_ven_dir_sts;

    /**
     * Air quality status
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_air_qly_idx;

    /**
     * Recirculation mode Feedback
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_rcl_mod_fb;
};

/**
 * Signals in message CCU_AcOpMode_Sts.
 *
 * Climate Control Unit AC Op Mode Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ccu_ac_op_mode_sts_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ccu_ac_op_mode_sts;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ccu_ac_op_mode_sts;

    /**
     * Current Halo Temperature Status
     *
     * Range: 0..250 (-40..85 °C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t ccsr_halo_t_sts;

    /**
     * Auto AC ON/OFF status from CCU for display
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_ac_auto_mode_sts;

    /**
     * AC in low power mode
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t caclh_ac_low_pwr_mode_sts;

    /**
     * Demist on/off status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_demist_defrst_sts;

    /**
     * HVAC Status Front
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frnt_ac_on_off_sts;

    /**
     * Front AC opmode status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t caclh_frnt_ac_op_mode_sts;

    /**
     * Rear AC opmode status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t caclh_re_ac_op_mode_sts;

    /**
     * Rear AC (Halo) OnOff Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsr_re_ac_on_off_sts;
};

/**
 * Signals in message CCU_ClimFrgrnc_Sts.
 *
 * Climate Control Unit Fragnance Status

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ccu_clim_frgrnc_sts_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ccu_clim_frgrnc_sts;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ccu_clim_frgrnc_sts;

    /**
     * HVAC Front Fragnace3 Level status
     *
     * Range: 0..1000 (0..100 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ccsf_frgrnc3level_sts;

    /**
     * Fragrance intensity status
     *
     * Range: 0..10 (0..100 -)
     * Scale: 10
     * Offset: 0
     */
    uint8_t ccsf_frgrnc_inten_sts;

    /**
     * Fragrance on off status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frgrnc_on_off_sts;

    /**
     * HVAC Front Fragnace1 Level status
     *
     * Range: 0..1000 (0..100 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ccsf_frgrnc1level_sts;

    /**
     * Fragrance selection status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frgrnc_seln_sts;

    /**
     * HVAC Front Fragnace2 Level status
     *
     * Range: 0..1000 (0..100 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ccsf_frgrnc2level_sts;
};

/**
 * Signals in message PSMD_SeatAdjustment_Status.
 *
 * Power Seat Module – Driver Seat Adjustment Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_psmd_seat_adjustment_status_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_psmd_seat_adjustment_status;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_psmd_seat_adjmt_sts;

    /**
     * Driver seat lumbar pump in/out position status to IVI for notification
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_lum_in_out_posn;

    /**
     * Driver seat recliner pump up/down position status  to IVI for notification
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_lum_up_dwn_posn;

    /**
     * Lumbar support pneumatic pump failure status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_lum_sys_fail_sts;

    /**
     * Driver seat height motor  status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_hei_up_dwn_mot_sts;

    /**
     * Driver seat recliner motor status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_recl_up_dwn_mot_sts;

    /**
     * Driver seat user profile recall adjustment status notification to IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_adjmt_sts;

    /**
     * Driver seat forward backward motor status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_frnt_back_mot_sts;

    /**
     * Driver seat cushion tilt motor status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_tilt_up_dwn_mot_sts;
};

/**
 * Signals in message PSMP_SeatAdjustment_Status.
 *
 * Power Seat Module – Passenger Seat Adjustment Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_psmp_seat_adjustment_status_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_psmp_seat_adjustment_status;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_psmp_seat_adjmt_sts;

    /**
     * Passenger seat lumbar pump in/out position status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_lum_in_out_posn;

    /**
     * Passenger seat lumbar pump up/down position status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_lum_up_down_posn;

    /**
     * Passenger seat lumbar system fail status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_lum_sys_fail_sts;

    /**
     * Passanger seat recliner motor  status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_recl_up_dwn_mot_sts;

    /**
     * Passanger  seat height motor  status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_hei_up_dwn_mot_sts_;

    /**
     * Passanger seat user profile recall adjustment status notification to IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_adjmt_sts;

    /**
     * Passenger seat forward backward motor status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_fowd_bawd_mot_sts;

    /**
     * Passenger seat cushion tilt motor status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_tilt_up_dwn_mot_sts;
};

/**
 * Signals in message PSMD_SeatPos_Status.
 *
 * Power Seat Module – Driver Seat Position Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_psmd_seat_pos_status_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_psmd_seat_pos_status;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_psmd_seat_pos_status;

    /**
     * Driver seat forward backward motor position status to IVI for notification
     *
     * Range: 0..1400 (0..1400 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_drv_fowd_bawd_posn;

    /**
     * Driver seat height motor position status to IVI for notification
     *
     * Range: 0..1600 (0..1600 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_drv_hei_up_dwn_posn;

    /**
     * Driver seat recliner motor position status to IVI for notification
     *
     * Range: 0..5000 (0..5000 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_drv_recl_up_dwn_posn;

    /**
     * Driver seat tilt motor  position status to IVI for notification
     *
     * Range: 0..1000 (0..1000 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_drv_tilt_up_dwn_posn;
};

/**
 * Signals in message PSMD_SeatCmfrt_Status.
 *
 * Power Seat Module – Driver Seat Comfort Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_psmd_seat_cmfrt_status_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_psmd_seat_cmfrt_status;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_psmd_seat_cmfrt_status;

    /**
     * Driver seat heating Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_heatg_sts;

    /**
     * Driver seat ventilation status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_ventn_sts;

    /**
     * Driver seat ventilation cushion fan failure status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_ventn_cshn_fan_fail_sts;

    /**
     * Driver seat heating back pad failure status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_heatg_back_pad_fail_sts;

    /**
     * Driver seat massage fail status via PSMD
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_massg_fail_sts;

    /**
     * Driver seat heating cushion pad failure status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_heatg_cshn_pad_fail_sts;

    /**
     * Driver seat massage on/off status via PSMD
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_massg_sts;

    /**
     * Driver seat ventilation squab fan failure status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_ventn_squb_fan_fail_sts;
};

/**
 * Signals in message PSMP_SeatCmfrt_Status.
 *
 * Power Seat Module – Passenger Seat Comfort Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_psmp_seat_cmfrt_status_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_psmp_seat_cmfrt_status;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_psmp_seat_cmfrt_status;

    /**
     * Passanger seat ventilation status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_ventn_sts;

    /**
     * Passanger seat heating status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_heatg_sts;

    /**
     * Passenger seat massage on/off status via PSMP
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_massg_sts;

    /**
     * Passanger seat ventilation squab fan failure status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_ventn_squb_fan_fail_sts;

    /**
     * Passenger seat massage fail status via PSMP
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_massg_fail_sts;

    /**
     * Passanger seat ventilation cushion fan failure status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_ventn_cshn_fan_fail_sts;

    /**
     * Passanger seat heating back pad failure status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_heatg_back_pad_fail_sts;

    /**
     * Passanger seat heating cushion pad failure status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_heatg_cshn_pad_fail_sts;
};

/**
 * Signals in message PSMP_SeatPos_Status.
 *
 * Power Seat Module – Passenger Seat Position Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_psmp_seat_pos_status_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_psmp_seat_pos_status;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_psmp_seat_pos_status;

    /**
     * Passenger seat forward backward motor position status to IVI for notification
     *
     * Range: 0..1400 (0..1400 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_pass_fowd_bawd_posn;

    /**
     * Passenger seat height motor position status to IVI for notification
     *
     * Range: 0..1600 (0..1600 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_pass_hei_up_dwn_posn;

    /**
     * Passenger seat recliner motor position status to IVI for notification
     *
     * Range: 0..5000 (0..5000 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_pass_recl_up_dwn_posn;

    /**
     * Passenger seat tilt motor  position status to IVI for notification
     *
     * Range: 0..1000 (0..1000 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_pass_tilt_up_dwn_posn;
};

/**
 * Signals in message DCMD_ClosureSts.
 *
 * Door Control Module Driver Closure Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_dcmd_closure_sts_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_dcmd_closure_sts;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_dcmd_closure_sts;

    /**
     * Driver  Gullwing Doors Ajar status
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwd_drvr_door_sts;

    /**
     * Driver door lock_Unlcok actuator Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_drvr_door_lock_unlck_sts;

    /**
     * Driver  Gullwing Doors Normalised_state
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwd_drvr_door_nmlzn_sts;

    /**
     * Driver Door Ajar Open/Close Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_drvr_door_ajar_sts;

    /**
     * Driver Power Window Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwind_drv_wndw_sts;

    /**
     * Driver Gullwing Door  Position Angle
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwd_drv_door_act_pos;
};

/**
 * Signals in message IVI_PssngrSeatStoredProfile.
 *
 * In Vehicle Infotainment Passenger Seat Stored Profile
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_pssngr_seat_stored_profile_t {
    /**
     * Passanger seat height motor position stored in passanger user profile
     *
     * Range: 0..1600 (0..1600 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_pass_hei_stored_posn;

    /**
     * Passanger seat recliner motor position stored in passanger user profile
     *
     * Range: 0..5000 (0..5000 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_pass_recl_stored_posn;

    /**
     * Passanger seat tilt motor position stored in passanger user profile
     *
     * Range: 0..1000 (0..1000 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_pass_tilt_stored_posn;

    /**
     * Passanger seat forward backward motor position stored in passanger user profile
     *
     * Range: 0..1400 (0..1400 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_pass_fowd_bawd_stored_posn;
};

/**
 * Signals in message VCU_Sts.
 *
 * Vehicle Control Unit Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_vcu_sts_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_vcu_sts;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_vcu_sts;

    /**
     * limp home mode enable Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t engmt_limphm_sts;

    /**
     * Charging authetication from VCU
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fschg_chg_authen_sts;

    /**
     * Charging authetication from VCU
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acchg_chg_authn_sts;

    /**
     * Individual fault status of thermal components
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t thmgt_therm_flt_sts;

    /**
     * Coasting Torque percetage value signal for IVI display purpose
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cregb_coast_rgn_tq_pctg;

    /**
     * High Voltage Interlock loop circuit error
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hfdia_remd_actn;

    /**
     * High Voltage system status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvsco_hv_sys_sts;
};

/**
 * Signals in message DCMP_ClosureSts.
 *
 * Door Control Module Passenger Closure Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_dcmp_closure_sts_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_dcmp_closure_sts;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_dcmp_closure_sts;

    /**
     * Passenger Door Open/Close Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_pass_door_ajar_sts;

    /**
     * Passenger door lock_Unlcok actuator Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_pass_door_lock_unlck_sts;

    /**
     * Passenger Gullwing Doors Ajar status
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwd_pass_door_sts;

    /**
     * Passenger Gullwing Doors Actual Position
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwd_pass_door_act_pos;

    /**
     * PassengerPower  Window  Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwind_pass_wndw_sts;

    /**
     * Passenger Gullwing Doors Normalised state
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwd_pass_door_nmlzn_sts;
};

/**
 * Signals in message DCMRR_ClosureSts.
 *
 * Door Control Module Rear Right Closure Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_dcmrr_closure_sts_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_dcmrr_closure_sts;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_dcmrr_closure_sts;

    /**
     * Rear Right  Door Lock/Unlock Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_re_ri_door_lock_unlck_sts;

    /**
     * Rear Right Door Power Window Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwind_re_ri_wndw_sts;
};

/**
 * Signals in message DCMRL_ClosureSts.
 *
 * Door Control Module Rear Left Closure Status

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_dcmrl_closure_sts_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_dcmrl_closure_sts;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_dcmrl_closure_sts;

    /**
     * Rear door RH lock_Unlcok actuator Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_re_le_door_lock_unlck_sts;

    /**
     * Rear door LH lock_Unlcok actuator Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_re_le_door_ajar_sts;

    /**
     * Rear Left Door Power Window Status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwind_re_le_wndw_sts;
};

/**
 * Signals in message ZCUF_WiperSts.
 *
 * Zone Control Unit-Front Wiper Status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_zcuf_wiper_sts_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_zcuf_wiper_sts;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_zcuf_wiper_sts;

    /**
     * Left side Wiper Motor park Position status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_le_park_pos_sts;

    /**
     * Front Left wiper service position Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_le_ser_pos_sts;

    /**
     * Wiper Motor send Left  Hand  motor ON/OFF status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_le_sts;

    /**
     * Right side Wiper Motor park Position status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_ri_park_pos_sts;

    /**
     * Front Right wiper service position Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_ri_ser_pos_sts;

    /**
     * Wiper motor On/OFF status Front Left
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_ri_sts;

    /**
     * Front washer status to IVI for indication
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_wshr_sts;

    /**
     * Washer Fluid Level Sts
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_wshr_fluid_level_sts;

    /**
     * Wiper motor failure status Front Right
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_ri_faild_sts;

    /**
     * Wiper motor failure status Front Left
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_le_faild_sts;
};

/**
 * Signals in message ZCUF_ClimSttgTemperatureFbk.
 *
 * Zone Control Unit-Front Climate Setting Temperature feedback
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_zcuf_clim_sttg_temperature_fbk_t {
    /**
     * Display set value of temperature Driver side
     *
     * Range: 0..12 (16..28 °C)
     * Scale: 1
     * Offset: 16
     */
    uint8_t ccs_drvr_side_set_t_val_sts;

    /**
     * Display set value of temperature Passenger side
     *
     * Range: 0..12 (16..28 °C)
     * Scale: 1
     * Offset: 16
     */
    uint8_t ccs_pass_side_set_t_val_sts;

    /**
     * Display set value of temperature Rear Right side
     *
     * Range: 0..12 (16..28 °C)
     * Scale: 1
     * Offset: 16
     */
    uint8_t ccs_re_ri_side_set_t_val_sts;

    /**
     * Display set value of temperature Rear Left side
     *
     * Range: 0..12 (16..28 °C)
     * Scale: 1
     * Offset: 16
     */
    uint8_t ccs_re_le_side_set_t_val_sts;

    /**
     * Display set value of temperature Halo side
     *
     * Range: 0..12 (16..28 °C)
     * Scale: 1
     * Offset: 16
     */
    uint8_t ccs_halo_set_t_val_sts;
};

/**
 * Signals in message ZCUF_CenLock_Info.
 *
 * Central Lock Information
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_zcuf_cen_lock_info_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_zcuf_cen_lock_info;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_zcuf_cen_lock_info;

    /**
     * Central lock Remote lock unlock status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_c_app_lock_unlck_st;

    /**
     * Central lock unlock current status
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_lock_unlck_sts;
};

/**
 * Signals in message ACM_ActvTrackingStatus.
 *
 * Airbag Control Module Active Tracking Status

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_acm_actv_tracking_status_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_acm_actv_tracking_status;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_acm_actv_tracking_status;

    /**
     * passenger seat position on track
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_bg_seat_track_pos_pass;

    /**
     * driver seat position on track
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_bg_seat_track_pos_drvr;

    /**
     * passenger airbag deactivation confirmation status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_bg_pass_airbg_deac_sts;
};

/**
 * Signals in message IVI_DrWndw_Cntr.
 *
 * In Vehicle Infotainment Driver Window Control
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_dr_wndw_cntr_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ivi_dr_wndw_cntr;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ivi_dr_wndw_cntr;

    /**
     * Gwllwing Driver door Height Adjustment from IVI
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwd_drv_door_usr_ag_req;

    /**
     * Gwllwing Passenger door Height Adjustment from IVI
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwd_pass_door_usr_ag_req;

    /**
     * IVI Configuration for Audio Visual Configuration
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_audio_visual_cfg;

    /**
     * Power side step left extend/rectract request ny user via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwr_sd_st_le_extnd_rtract_req;

    /**
     * Power side step Right extend/rectract request ny user via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwr_sd_st_ri_extnd_rtract_req;

    /**
     * Window Up/Down Request From voice command for all door window
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwind_wndw_up_dwn_usr_req;
};

/**
 * Signals in message MFS_SwitchReq.
 *
 * Multi-Function Switches Switch Request
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_mfs_switch_req_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_mfs_switch_req;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_mfs_switch_req;

    /**
     * ADAS scroll switch press
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_adas_scrl_swt_req;

    /**
     * IVI scroll switch press
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_scrol_swt_req;

    /**
     * Wash/Wipe Switch (Rear Right)
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_rim_swt_wiper_acvn_cmd;

    /**
     * Wiper mode menu on Driver Display
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_wiper_menu_req;

    /**
     * Paddle Switch managing favourite option functions e.g. B+ increasing level of regen, B- decreasing level of braking B+ moving sunvisor in upper position, B- moving sunvisor in down position
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_padd_swt_favo_sel_req;

    /**
     * Paddle Switch managing favourite option functions e.g. B+ increasing level of regen, B- decreasing level of braking B+ moving sunvisor in upper position, B- moving sunvisor in down position
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_padd_swt_gear_shift_req;

    /**
     * ADAS button on the MFS for display on IVI (center console display)/cluster (digital horizon display) of various ADAS options
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_adas_swt_req;

    /**
     * IVI Voice Activate Switch Press
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_voice_swt_req;

    /**
     * High Beam Switch Pressed (Rear Left)
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_rim_swt_hi_beam_acvn_cmd;

    /**
     * drive mode selection request
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_drv_mod_swt_req;

    /**
     * Paddle Switch Gear Shift Pressed
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_park_swt_req;

    /**
     * Favorite Switch Pressed
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_favo_swt_req;
};

/**
 * Signals in message IVI_DrvrSeatStoredProfile.
 *
 * In Vehicle Infotainment Driver seat stored Profile
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_drvr_seat_stored_profile_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ivi_drvr_seat_stored_profile;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ivi_drvr_seat_stored_profile;

    /**
     * Driver seat forward backward motor position stored in driver user profile
     *
     * Range: 0..1400 (0..1400 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_drv_fowd_bawd_stored_posn;

    /**
     * Driver seat recliner motor position stored in driver user profile
     *
     * Range: 0..5000 (0..5000 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_drv_reclnr_stored_posn;

    /**
     * Driver seat height motor position stored in driver user profile
     *
     * Range: 0..1600 (0..1600 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_drv_hei_stored_posn;

    /**
     * Driver seat tilt motor position stored in driver user profile
     *
     * Range: 0..1000 (0..1000 Count)
     * Scale: 1
     * Offset: 0
     */
    uint16_t seat_adjmt_drv_tilt_stored_posn;
};

/**
 * Signals in message TBOX_DrvrId_Info.
 *
 * Driver ID Information
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_tbox_drvr_id_info_t {
    /**
     * Byte 1 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte1;

    /**
     * Byte 2 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte2;

    /**
     * Byte 3 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte3;

    /**
     * Byte 4 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte4;

    /**
     * Byte 5 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte5;

    /**
     * Byte 6 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte6;

    /**
     * Byte 7 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte7;

    /**
     * Byte 8 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte8;

    /**
     * Byte 9 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte9;

    /**
     * Byte 10 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte10;

    /**
     * Byte 11 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte11;

    /**
     * Byte 12 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte12;

    /**
     * Byte 13 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte13;

    /**
     * Byte 14 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte14;

    /**
     * Byte 15 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte15;

    /**
     * Byte 16 of Driver ID
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_id_byte16;
};

/**
 * Signals in message IVI_HvacCntrl.
 *
 * In Vehicle Infotainment HVAC Control
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_hvac_cntrl_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ivi_hvac_cntrl;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ivi_hvac_cntrl;

    /**
     * Vent Motor Operation Mode Request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_vent_op_mode_req;

    /**
     * Rear AC (Halo) OnOff request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_re_ac_usr_i_req;

    /**
     * Request to enable/disable Heating of Digital Exterior Mirror Mounts
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t demir_heatg_svmc_req;

    /**
     * Blower Speed increase/decrease Request via IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_re_blowr_lv_usrl_req;
};

/**
 * Signals in message IVI_HvacSwt_Req.
 *
 * In Vehicle Infotainment HVAC Switch Request
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_hvac_swt_req_t {
    /**
     * Minimum temperature or maximum AC mode button
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_ac_min_t_usr_btn;

    /**
     * Maximum temperature or max heater mode button
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_ac_max_t_usr_btn;

    /**
     * Fresh Air - Recirculation Mode ON/OFF  Request via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_rcl_on_off_req;

    /**
     * Front AC ON/OFF request via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_frnt_ac_usr_req;

    /**
     * Rear LH temperature request via IVI
     *
     * Range: 0..12 (16..28 °C)
     * Scale: 1
     * Offset: 16
     */
    uint8_t ccs_re_le_t_usr_set_req;

    /**
     * Rear RH temperature request via IVI
     *
     * Range: 0..12 (16..28 °C)
     * Scale: 1
     * Offset: 16
     */
    uint8_t ccs_re_ri_t_usr_i_set_val;

    /**
     * Sync driver passenger HVAC Temperature via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_sync_t_req;

    /**
     * ECO button press status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_ac_eco_mode_btn_usr_req;

    /**
     * AC auto mode ON/OFF request via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_frnt_ac_auto_mod_usr_req;

    /**
     * Air Ionizer ON/OFF request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_ioniser_usr_req;

    /**
     * Fragrance system ON/OFF request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_frgrnc_acvn_usr_req;

    /**
     * Demist on/off command via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_demist_defrst_usr_req;

    /**
     * Front Left zone temperature request via IVI
     *
     * Range: 0..12 (16..28 °C)
     * Scale: 1
     * Offset: 16
     */
    uint8_t ccs_frnt_le_t_usr_set_val;

    /**
     * Fragrance intensity selection request
     *
     * Range: 0..10 (0..100 -)
     * Scale: 10
     * Offset: 0
     */
    uint8_t ccs_frgrnc_inten_usr_req;

    /**
     * Front blower Speed increase/decrease Request via IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_frnt_blowr_lvl_usr_req;

    /**
     * Select Air control mode via IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_air_mode_seln_usr_req;

    /**
     * Front Right zone temperature request via IVI
     *
     * Range: 0..12 (16..28 °C)
     * Scale: 1
     * Offset: 16
     */
    uint8_t ccs_frnt_ri_t_usr_set_val;

    /**
     * Selected Climate Preset
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_clim_prset_usr_req;

    /**
     * Fragrance selection request
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_frgrnc_slen_usr_req;

    /**
     * Selected user profile
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_clim_prfl_seln_usr_req;
};

/**
 * Signals in message IVI_UsrBodyCntrl_Req.
 *
 * In Vehicle Infotainment User Body Control Request
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_usr_body_cntrl_req_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_ivi_usr_body_cntrl_req;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ivi_usr_body_cntrl_req;

    /**
     * Charge port unlock Command through IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chrgr_port_chrg_port_lck_unlck_usr_req;

    /**
     * Request to Fold or Unfold Digital Exterior Mirror Mounts
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t demir_fold_unfold_svmc_req;

    /**
     * Request to Fold or Unfold Digital Exterior Mirror through user request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t demir_fold_unfold_usr_req;

    /**
     * Request to enable/disable Heating of Digital Exterior Mirror Mounts through user request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t demir_heatg_svmc_ena;

    /**
     * Tailgate angle adjustment by user via IVI
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acttg_tail_gate_usr_ag_req;

    /**
     * Tailgate Open request by user through IVI (Voice command)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acttg_tail_gate_usr_req;

    /**
     * Set speed value by user for Auto speed door lock value from IVI
     *
     * Range: 0..50 (0..50 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssadl_auto_spd_lock_val;

    /**
     * Auto speed lock unlock enable/Disable by user via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssadl_auto_spd_lock_on_off_typ_sts;

    /**
     * Rear fog lamp on off request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_fog_li_req;

    /**
     * Headlamp OnOff request by user via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_lamp_req;

    /**
     * HDLM Auto mode feature enable disable  cconfigration from IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_auto_mode_cfg_req;

    /**
     * HDLM  Follow me  feature enable disable  configration from IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_follow_me_cfg;

    /**
     * Front wiper mode selection through IVI (OFF/AUTO/LOW/HIGH)
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_wipr_req;

    /**
     * Right side wiper motor operating park position request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_oper_park_req;

    /**
     * Front wiper service position request by user
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_wipr_srv_pos_req;
};

/**
 * Signals in message IVI_UsrChassisCntrl_Req.
 *
 * IVI User Request and various Mode status
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_usr_chassis_cntrl_req_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_ivi_usr_chassis_cntrl_req;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ivi_usr_chassis_cntrl_req;

    /**
     * Status of HDC system
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdc_swt_sts;

    /**
     * ESC (Electronic stability control)TCS (Traction Control System) switch demand from driver
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_tcs_swt_sts;

    /**
     * In-Egress mode Enable/Disable status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_ingrs_mode_cmd;

    /**
     * AVH (Automatic Vehicle Hold) switch position depend on driver demand.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t avh_swt_sts;

    /**
     * Suspension Height Adjustment Request
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_susp_hei_adj_req;

    /**
     * Service Mode Command
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_srv_mod_cmd;
};

/**
 * Signals in message IVI_UsrSeatAdjComfrt_Req.
 *
 * In Vehicle Infotainment User Seat Adjustment Comfort Request
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_usr_seat_adj_comfrt_req_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ivi_usr_seat_adj_comfrt_req;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ivi_usr_seat_adj_comfrt_req;

    /**
     * Driver seat forward backward movement request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_fowd_bawd_req;

    /**
     * Driver seat height up/down request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_hei_up_dwn_req;

    /**
     * Driver seat lumbar in/out request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_lum_in_out_req;

    /**
     * Driver seat lumbar up/down request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_lum_up_dwn_req;

    /**
     * Driver seat reclininer up/down request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_recl_up_down_req;

    /**
     * Driver seat massage intensity selection request via IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_massg_inten_seln_req;

    /**
     * Driver seat massage pattern selection request via IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_massg_pat_seln_req;

    /**
     * Passenger seat forward backward movement request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_fowd_bawd_req;

    /**
     * Passenger seat height up/down request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_hei_up_dwn_req;

    /**
     * Passenger seat lumbar in/out request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_lum_in_out_req;

    /**
     * Passenger seat Lumbar Up Down Request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_lum_up_dwn_req;

    /**
     * Passenger seat tilt up/down request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_recl_up_down_req;

    /**
     * Passenger seat tilt up/down request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_tilt_up_dwn_req;

    /**
     * Driver seat tilt up/down request Via IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_tilt_up_dwn_req;

    /**
     * Passenger seat massage intensity selection request via IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_massg_inten_seln_req;

    /**
     * Passenger seat massage pattern selection request via IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_massg_pat_seln_req;

    /**
     * Rear LH seat ventilation speed request via IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_le_ventn_spd_req;

    /**
     * Rear RH seat ventilation speed request via IVI
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_ri_ventn_spd_req;
};

/**
 * Signals in message IVI_Vehicle_Mode_Ctrl.
 *
 * In Vehicle Infotainment Mode Control
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_vehicle_mode_ctrl_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_ivi_vehicle_mode_ctrl;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ivi_vehicle_mode_ctrl;

    /**
     * Vehicle Shutdown Request triggered by User via HMI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t klss_usr_veh_pwr_dn_req;

    /**
     * HMI keep Alive button Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hmi_keep_alive;

    /**
     * Long park mode activation by user
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lvm_long_park_mode_req;

    /**
     * Storage mode activation request via diagnostic
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lvm_storage_mode_req;

    /**
     * Drive mode input from IVI (Rx) (VCU)
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvmc_mode_req;

    /**
     * Target gear request
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_tagt_gear_req;
};

/**
 * Signals in message TBOX_Warning.
 *
 * Telematic Box Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_tbox_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_tbox_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_tbox_warning;

    /**
     * Warning related to NFC card validation staus
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t kle_nfc_cc_card_vldtn_st_warn;
};

/**
 * Signals in message VCU_Warning.
 *
 * Vehicle Control Unit Warnings

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_vcu_warning_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_vcu_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_vcu_warning;

    /**
     * Charge gun not unlock warning while active charging session
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acchg_chg_gun_unlck_warn;

    /**
     * High Voltage system status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvsco_hv_sys_warn;

    /**
     * Coolant Temp exceed limit
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t thmgt_coolt_over_t_warn;

    /**
     * Press Brake to engage gear hint
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_psd_brk_to_enge_gear;

    /**
     * Wheel drive mode rejection warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t awd_whl_drv_mode_warn;

    /**
     * Drive Mode change restriction warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvmc_drv_mode_chng_restr_warn;

    /**
     * No gear change warning due to HV disconnect
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_hv_dcnct_no_gear_chng_warn;

    /**
     * No gear change warning due to EPB engage
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_gear_chng_epb_enge_warn;

    /**
     * Cooolant liquid level warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t thmgt_coolt_lvl_lo_warn;

    /**
     * Stop vehicle to move Forward direction warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_stop_veh_to_move_fowd_dir;

    /**
     * HV safety Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvsft_hvsft_sts;

    /**
     * limp home mode enable Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_limphm_warn;

    /**
     * Epp Failure warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_epp_fai_warn;

    /**
     * Individual fault status of thermal components
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t thmgt_therm_flt_warn;

    /**
     * Charging authetication from VCU
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acchr_chg_auth_warn;

    /**
     * Actual Gear Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_act_gear_warn;

    /**
     * Target gear validation status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_tagt_gear_vldtn_warn;

    /**
     * High Voltage Interlock Loop Circuit Error
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvsft_hvil_err_warn;

    /**
     * Stop vehicle to move reverse direction warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eshift_stop_veh_to_move_rvs_dir;

    /**
     * Warning Fault level 1 from HV Diagnostics feature
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_hv_sys_flt_lvl1_warn;

    /**
     * Warning Fault level 2 from HV Diagnostics feature
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_hv_sys_flt_lvl2_warn;

    /**
     * Warning Fault level 3 from HV Diagnostics feature
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_hv_sys_flt_lvl3_warn;

    /**
     * Coasting regen Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cregb_coast_rgn_warn;
};

/**
 * Signals in message ZCUF_Warning.
 *
 * Front  Zone Control Unit Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_zcuf_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_zcuf_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_zcuf_warning;

    /**
     * Central lock unlcok request by FZCU Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_lock_unlck_sts_warn;

    /**
     * Front right wiper  Fail Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_ri_faild_warn;

    /**
     * Passenger Seat Heating Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t swt_ctl_pass_seat_heating_sw_flt_warn;

    /**
     * Volume +/- from User Fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t swt_ctl_vol_swt_flt_warn;

    /**
     * Front Left wiper  Fail Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_frnt_le_faild_warn;

    /**
     * Driver Seat ventilation Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t swtt_ctl_drvr_st_heatng_swt_flt_wrn;

    /**
     * Relamp_RevLmpWarn: Warning realted to Rear right reverse lamp Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_rev_lmp_warn;

    /**
     * RLML Fog Lamp Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlml_fog_lmp_warn;

    /**
     * Child Inhibit switch activation Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t swt_ctl_chd_lock_swt_fault_warn;

    /**
     * Recirculation Mode Switch Fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t swtt_ctl_reclrn_mod_on_off_swt_flt_wrn;

    /**
     * RLMR Fog Lamp Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlmr_fog_lmp_warn;

    /**
     * Warning related to CHMSL Light  OnOff Status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_chmsl_warn;

    /**
     * Hazard Light Switch Fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t swt_ctl_hzrd_swt_flt_warn;

    /**
     * Warning related to Door Actuator status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssadl_door_act_warn;

    /**
     * Warning related to Door ajar status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssadl_door_ajar_warn;

    /**
     * Servicing Required Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_srv_warn;
};

/**
 * Signals in message ACM_Warning.
 *
 * Airbag Control Module Warning
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_acm_warning_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_acm_warning;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_acm_warning;

    /**
     * Seat Belt reminder Blinking Request
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_blinking_rmn_req;

    /**
     * Airbag Warning Lamp
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_bg_warn_lamp;

    /**
     * passenger airbag deactivation confirmation status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_bg_pass_airbg_deac_warn;

    /**
     * Driver Seat Belt Indicator Status Grey (Unoccupied) Red (Unbuckled) Green (Buckled
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_drvr_indcr_sts;

    /**
     * Passenger Seat Belt Indicator Status Grey (Unoccupied) Red (Unbuckled) Green (Buckled
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_pass_indcr_sts;

    /**
     * Rear Center Seat Belt Indicator Status Grey (Unoccupied) Red (Unbuckled) Green (Buckled
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_re_centr_indcr_sts;

    /**
     * Rear Right Seat Belt Indicator Status Grey (Unoccupied) Red (Unbuckled) Green (Buckled
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_re_ri_indcr_sts;

    /**
     * Rear Left Seat Belt Indicator Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_re_le_indcr_sts;

    /**
     * Seat Buckle Status Driver Side
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_drvr_bkl_sts;

    /**
     * Seat Buckle Status Passenger Side
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_pass_bkl_sts;

    /**
     * Seat Buckle Status Rear Center Side
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_re_centr_bkl_sts;

    /**
     * Seat Buckle Status Rear Right Side
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_re_ri_bkl_sts;

    /**
     * Seat Buckle Status Rear Left Side
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_re_le_bkl_sts;

    /**
     * Seat Belt reminder Chime Request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sblt_warn_chime_rmn_req;
};

/**
 * Signals in message DCMRL_Warning.
 *
 * Door Control Module Left Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_dcmrl_warning_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_dcmrl_warning;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_dcmrl_warning;

    /**
     * Rear Left Door Power Window Status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwind_re_le_wndw_warn;
};

/**
 * Signals in message DCMRR_Warning.
 *
 * Door Control Module Right Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_dcmrr_warning_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_dcmrr_warning;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_dcmrr_warning;

    /**
     * Rear Right  Door Open/Close Status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_re_ri_door_ajar_warn;

    /**
     * Rear Right Door Power Window Status  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwind_re_ri_wndw_warn;
};

/**
 * Signals in message ASU_Warning.
 *
 * Air Spring Suspension Unit  Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_asu_warning_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_asu_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_asu_warning;

    /**
     * Air Spring Suspension Unit Warnings
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_susp_unit_warn;

    /**
     * Service mode can not be activated as park bake is not applied warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_susp_unit_srv_mode_not_actvd_warn;
};

/**
 * Signals in message DCMP_Warning.
 *
 * Door Control Module Passenger Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_dcmp_warning_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_dcmp_warning;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_dcmp_warning;

    /**
     * Passenger door lock_Unlcok actuator Status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_pass_door_ajar_warn;

    /**
     * Passenger Power Window Status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwind_pass_wndw_warn;
};

/**
 * Signals in message BMS_Warning.
 *
 * Battery Management System Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_bms_warning_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_bms_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_bms_warning;

    /**
     * Max And Min Cell Voltage Difference is Too Larg
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_u_dif_err_warn;

    /**
     * Coolant Inlet Temperature Sensor Fault
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_coolt_inlet_t_snsr_flt_warn;

    /**
     * Coolant Outlet Temperature Sensor Fault
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_coolt_outl_t_snsr_flt_warn;

    /**
     * Main DC fast charge  Negative Relay Error
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_dcfc_neg_rly_err_warn;

    /**
     * Main DC fast charge  Position Relay Error
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_dcfc_pos_rly_err_warn;

    /**
     * Reason For Contactor Off Request
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ctctr_dcnct_rsn_warn;

    /**
     * Bms Requesting Vcu To Operate At The Limited Operating Strategy (Los)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_err_lev_warn;

    /**
     * Fuse And Pyro Fuse Blowup Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fuse_sts_err_warn;

    /**
     * High Voltage Interlock Loop Circuit Error Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hvil_err_warn;

    /**
     * Low Battery Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_lo_bat_warn;

    /**
     * Main Position Relay Error
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_main_pos_rly_err_warn;

    /**
     * Pack Voltage is Higher Than The Permittable Value
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pack_hv_err_warn;

    /**
     * Insulation Check Lines Errors
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pack_insu_err_warn;

    /**
     * Pack Voltage is Lower Than The Permittable Value
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pack_lv_err_warn;

    /**
     * When The Over Current is Detected During Charging And Discharging For The Given Period Of Time, Then The Bms_Packovercurr_Err Will Set
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pack_ovcur_err_warn;

    /**
     * Pack Temperature Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pack_t_sts_warn;

    /**
     * Precharge Relay Error
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pre_ch_rly_err_warn;

    /**
     * Over Temperature Of The Cell is Detecte
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_over_t_err_warn;

    /**
     * Under Temperature Of The Cell is Detected
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_under_t_err_warn;

    /**
     * Reverse current detected while charging
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_rvs_i_det_chg_flt_warn;

    /**
     * Short Circuit Current Fault for HV line
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_sc_i_flt_warn;

    /**
     * SOC Jump alarm
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_chng_fast_flt_warn;

    /**
     * HV Battery Pack service detection due information
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_srv_due_detn_warn;

    /**
     * Thermal Runaway Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_therm_runaway_warn;

    /**
     * Main Negative Relay Error
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_tot_neg_rly_err_warn;

    /**
     * Bms Requesting Vcu To Operate At The Limited Operating Strategy (Los)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_bal_err_warn;

    /**
     * Separate Signal To indicate The Battery Replacement information(Battery Replacement Mh
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_repl_warn;

    /**
     * Over Voltage Of The Cell is Detected
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_hv_err_warn;

    /**
     * Pack Voltage is Lower Than The Permittable Value
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_lv_err_warn;
};

/**
 * Signals in message DCMD_Warning.
 *
 * Door Control Module Driver Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_dcmd_warning_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_dcmd_warning;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_dcmd_warning;

    /**
     * Driver Power Window Status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwind_drv_wndw_warn;

    /**
     * Driver Door Open/Close Status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cen_lock_drvr_door_ajar_warn;

    /**
     * Driver  Gullwing Doors Ajar status  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwd_drvr_door_warn;
};

/**
 * Signals in message EBCM_Warning.
 *
 * Electronic Brake Control Module  Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ebcm_warning_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_ebcm_warning;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ebcm_warning;

    /**
     * EPB Switch fault status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_swt_flt;

    /**
     * Vehicle parked on a steep inclination warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_inclnd_veh_park_warn;

    /**
     * Brake force not enough warning, Demand clamp force not achieved
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_brk_f_not_en_warn;

    /**
     * Braking regenration warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brb_rgn_warn;

    /**
     * EPB not release if driver door is open
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_not_appld_door_open_warn;

    /**
     * EPB in Roller bench mode
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_rollr_bench_mode_warn;

    /**
     * EPB shall give warning to Driver with Audio
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_auto_rels_warn;

    /**
     * EPB released warning when vehicle is in maitainance mode
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_rlsd_mntn_mode_warn;

    /**
     * EPB released warning when vehicle is in tow mode
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_rlsd_tw_mode_warn;

    /**
     * EPB auto applied warning under auto vehicle hold function
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_auto_appld_warn;

    /**
     * Hill Start Assist system Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_hill_strt_assi_flt_warn;

    /**
     * EBD System Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ebd_sys_warn;

    /**
     * Cornering Brake Control Brake Fault Warning
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_cornering_brk_ctl_flt_warn;

    /**
     * HDC System Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_hdc_warn;

    /**
     * Brake Fluid level Indicator Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_fld_lvl_indcr_brk_fld_warn;

    /**
     * TCS system Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvac_tcs_warn;

    /**
     * EPB shall provide warning message if driver try to release EPB without pressing brake pedal and provide alert to driver press brake pedal to release EPB.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_psd_brk_pedl_to_rels_epb_warn;

    /**
     * Electric park bake warning lamp state
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_warn_lamp_st;

    /**
     * Electric park brake fault warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_park_brk_flt_warn;

    /**
     * EPB to be released in degraded mode warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_degraded_mode_to_be_rlsd_warn;

    /**
     * EPB cant be released without pressing Brake pedal degraded mode warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecpbk_degraded_mode_rlsd_warn;

    /**
     * Abs Fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_flt_warn;
};

/**
 * Signals in message OBC_Warning.
 *
 * On Board Charger Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_obc_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_obc_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_obc_warning;

    /**
     * Warning related to OBC error
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acchg_obc_err_warn;
};

/**
 * Signals in message EPS_RWA1_Warning.
 *
 * Electric Power Steering-Road Wheel Actuator 1 Warnings


 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_eps_rwa1_warning_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_eps_rwa1_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_eps_rwa1_warning;

    /**
     * RWA, SFA are running in redundant mode
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_rdndt_mode_warn;
};

/**
 * Signals in message EPS_SFA1_Warning.
 *
 * Electric Power Steering-Steering Feedback Actuator 1 Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_eps_sfa1_warning_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_eps_sfa1_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_eps_sfa1_warning;

    /**
     * Status of Haptic warning on steering wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_hptc_warn_sts;

    /**
     * Cluster lamp warning States
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_sfa_clu_warn_lamp;

    /**
     * Warning to user to keep hands off the steering wheel during steering alignment
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_steer_algnmt_warn;
};

/**
 * Signals in message EPS_RWA2_Warning.
 *
 * Electric Power Steering-Road Wheel Actuator 2 Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_eps_rwa2_warning_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_eps_rwa2_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_eps_rwa2_warning;

    /**
     * RWA, SFA are running in redundant mode
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_rdndt_mode_warn_r;
};

/**
 * Signals in message EPS_SFA2_Warning.
 *
 * Electric Power Steering-Steering Feedback Actuator 2 Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_eps_sfa2_warning_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_eps_sfa2_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_eps_sfa2_warning;

    /**
     * Status of Haptic warning on steering wheel
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_hptc_warn_sts_r;

    /**
     * Cluster lamp warning States
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_sfa_clu_warn_lamp_r;

    /**
     * Warning to user to keep hands off the steering wheel during steering alignment
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbwr_steer_algnmt_warn_r;
};

/**
 * Signals in message HDLML_Warning.
 *
 * Headlamp Left Module Warnings


 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_hdlml_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_hdlml_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_hdlml_warning;

    /**
     * Low Beam LH On Off Status by HDLM
     * Fusa signal (ASIL B) Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_le_lo_beam_lamp_warn;

    /**
     * High Beam LH On Off Status by HDLM
     * Fusa signal (ASIL B) Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_le_hi_beam_lamp_warn;
};

/**
 * Signals in message HDLMR_Warning.
 *
 * Headlamp Right Module Warnings


 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_hdlmr_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_hdlmr_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_hdlmr_warning;

    /**
     * Low Beam RH On Off Status by HDLM Fusa signal (ASIL B) Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_ri_lo_beam_lamp_warn;

    /**
     * High  Beam RH On Off Status by HDLM Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_ri_hi_beam_lamp_warn;
};

/**
 * Signals in message SBM_Warning.
 *
 * Smart Battery Module Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_sbm_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_sbm_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_sbm_warning;

    /**
     * LV Battery critical Soc Alert (<10%) (ASIL B) Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sbm_critical_so_c_alert_warn;

    /**
     * IBS health Warning (ASIL B)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sbm_health_st_warn;

    /**
     * LV Battery Temperature Sensor Fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sbm_lv_bat_t_snsr_flt_sts_warn;
};

/**
 * Signals in message CCU_Warning.
 *
 * Climate Control Unit Warning
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ccu_warning_t {
    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_ccu_warning;

    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_ccu_warning;

    /**
     * Ionizer fail Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_ioniser_flt_warn;

    /**
     * Front LH flap duct fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frnt_le_duct_flap_flt_warn;

    /**
     * Rear Right Temperature mixer flap fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_re_ri_temp_mix_flap_flt_warn;

    /**
     * Rear Right Temperature mixer flap fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_re_le_temp_mix_flap_flt_warn;

    /**
     * Front Left Temperature mixer flap fault  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frnt_le_temp_mix_flap_flt_warn;

    /**
     * Rear Vent LH duct fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_re_le_vent_duct_flap_flt_warn;

    /**
     * Front RH flap duct fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frnt_ri_duct_flap_flt_warn;

    /**
     * Rear Foot LH duct fault Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_re_le_foot_duct_flap_flt_warn;

    /**
     * Vent motor Front Center 1 status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frnt_le_ven_dir_sts;

    /**
     * Front Right Temperature mixer flap Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccsf_frnt_ri_temp_mix_flap_flt_w_warn;
};

/**
 * Signals in message MCU_F_Warning.
 *
 * Front Motor Control Unit Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_mcu_f_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_mcu_f_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_mcu_f_warning;

    /**
     * Warning related to Actual derating status of electric machine system 2.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eds_frnt_derat_warn;

    /**
     * Warning related to Actual error status of electric machine system 2.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eds_frnt_er_warn;

    /**
     * Warning related to Error status of the parking lock on electric machine 2.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eds_frnt_park_lock_err_warn;
};

/**
 * Signals in message MCU_R_Warning.
 *
 * Rear Motor Control Unit Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_mcu_r_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_mcu_r_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_mcu_r_warning;

    /**
     * Warning related to Error status of the parking lock on electric machine 1.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eds_re_park_lock_err_warn;

    /**
     * Warning related to Actual error status of electric machine system 1.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eds_re_err_warn;

    /**
     * Warning related to Actual derating status of electric machine system 1.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eds_re_derat_warn;
};

/**
 * Signals in message MFS_Warning.
 *
 * Multi-Function Switches Warning
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_mfs_warning_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_mfs_warning;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_mfs_warning;

    /**
     * drive mode selection Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfsw_drv_mod_swt_warn;

    /**
     * Warning related to ADAS button on the MFS for display on IVI( center console display)/cluster(digital horizon display) of various ADAS options
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_adas_swt_warn;

    /**
     * Warning related to Favourite switch pressed
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_favorite_swt_warn;

    /**
     * Warning related to High Beam switch Pressed
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_rim_swt_hi_beam_warn;

    /**
     * Warning related to wash/wipe switch
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_rim_swt_wiper_warn;
};

/**
 * Signals in message DCDC_Warning.
 *
 * DC to DC Converter Warning
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_dcdc_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_dcdc_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_dcdc_warning;

    /**
     * DCDC warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvsco_dcdc_oper_warn;
};

/**
 * Signals in message PSMD_Warning.
 *
 * Driver Power Seat Module Warnings  
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_psmd_warning_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_psmd_warning;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_psmd_warning;

    /**
     * Driver seat forward backward motor Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_frnt_back_mot_warn;

    /**
     * Driver seat heating back pad failure Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_heatg_back_pad_fail_warn;

    /**
     * Driver seat ventilation squab fan failure Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_ventn_squb_fan_fail_warn;

    /**
     * Driver seat height motor Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_hei_up_dwn_mot_warn;

    /**
     * Driver seat cushion tilt motor  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_tilt_up_dwn_mot_warn;

    /**
     * Driver seat ventilation cushion fan failure warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_ventn_cshn_fan_fail_warn;

    /**
     * Driver seat user profile recall adjustment status notification to IVI Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_adjmt_warn;

    /**
     * Driver seat recliner motor Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_drv_recl_up_dwn_mot_warn;

    /**
     * Driver seat massage fail warning via PSMD
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_drv_massg_fail_warn;
};

/**
 * Signals in message PSMP_Warning.
 *
 * Passenger Power Seat Module Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_psmp_warning_t {
    /**
     * Cyclic Redundancy Check Profile 1c
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_psmp_warning;

    /**
     * Alive Counter Profile 1c
     *
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_psmp_warning;

    /**
     * Passenger seat cushion tilt motor warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_tilt_up_dwn_mot_warn;

    /**
     * Passanger seat user profile recall adjustment warning notification to IVI
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_adjmt_warn;

    /**
     * Passanger seat ventilation cushion fan failure warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_ventn_cshn_fan_fail_wrn;

    /**
     * Passenger seat lumbar pump up/down position Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_recl_up_dwn_mot_warn;

    /**
     * Passanger  seat height motor  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_hei_up_dwn_mot_warn;

    /**
     * Passanger seat ventilation squab fan failure warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_ventn_squb_fan_fail_wrn;

    /**
     * Passenger seat massage warning status via PSMP
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_pass_massg_fail_warn;

    /**
     * Passenger seat forward backward motor warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_adjmt_pass_fowd_bawd_mot_warn;
};

/**
 * Signals in message RWSM_Warning.
 *
 * Rear Wheel Steering Module Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_rwsm_warning_t {
    /**
     * Cyclic redundancy check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_rwsm_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_rwsm_warning;

    /**
     * Rear wheel steering Warning lamp
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t re_whl_steer_warn_lamp;
};

/**
 * Signals in message ZCUR_Warning.
 *
 * Rear Zone Control Unit Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_zcur_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_zcur_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_zcur_warning;

    /**
     * RearLH seat ventilation seat cushion fan failuare status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_le_ventn_cshn_fan_fail_wrn;

    /**
     * RearLH seat ventilation squab fan failuare status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_le_ventn_squb_fan_fail_wrn;

    /**
     * RearRH seat ventilation cushion fan failuare status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_ri_ventn_cshn_fan_fail_wrn;

    /**
     * RearRH seat ventilation squab fan failuare status Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_cfmt_re_ri_ventn_squb_fan_fail_wrn;

    /**
     * Tailgate Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acttg_tail_gate_warn;

    /**
     * Illumination Lamp lamp on off Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chrgr_port_ilmn_lamp_w_warn;
};

/**
 * Signals in message TLML_Warning.
 *
 * Left Tail Lamp Module Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_tlml_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_tlml_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_tlml_warning;

    /**
     * Rear Left  Turn light on off s Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_le_tlg_turn_indcr_warn;

    /**
     * Rear Left Position light  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_le_tlg_posn_lamp_warn;

    /**
     * Left brake lamp OnOff  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_le_tlg_brk_lamp_warn;
};

/**
 * Signals in message TLMR_Warning.
 *
 * Right Tail Lamp Module Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_tlmr_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_tlmr_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_tlmr_warning;

    /**
     * Right brake lamp OnOff  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_ri_tlg_brk_lamp_warn;

    /**
     * Rear Right Turn light on off  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_ri_tlg_turn_indcr_warn;

    /**
     * Rear Right Position light  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_ri_tlg_posn_lamp_warn;
};

/**
 * Signals in message RLML_Warning.
 *
 * Rear Lamp Module Left Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_rlml_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_rlml_warning;

    /**
     * Alive Counter Profile 5
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_rlml_warning;

    /**
     * Left brake lamp OnOff Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_le_body_brk_lamp_warn;

    /**
     * Rear Left Position light Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_le_body_turn_indcr_warn;
};

/**
 * Signals in message RLMR_Warning.
 *
 * Rear Lamp Module Right Warning
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_rlmr_warning_t {
    /**
     * Cyclic Redundancy check Profilr 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_rlmr_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_rlmr_warning;

    /**
     * Warning realted to rear right body turn indicator
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_re_ri_body_turn_indcr_warn;

    /**
     * Warning related to rear right brake lamp
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_ri_body_brk_lamp_warn;
};

/**
 * Signals in message SLMFC_Warning.
 *
 * Front Center Signature Light Module Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_slmfc_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_slmfc_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_slmfc_warning;

    /**
     * Status of front left Signature Lamp
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_frnt_centr_le_sign_lamp_warn;

    /**
     * Status of front right Signature Lamp
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_frnt_centr_ri_sign_lamp_warn;
};

/**
 * Signals in message SLMFL_Warning.
 *
 * Front Left Signature Light Module Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_slmfl_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_slmfl_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_slmfl_warning;

    /**
     * Left side turn indicator On OFF status  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_frnt_le_body_turn_indcr_warn;

    /**
     * Left DRL  lamp  ON ,OFF Status (Fusa ASIL B) Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_le_drl_lamp_warn;

    /**
     * Left Position light status combination of  Front and rear  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_le_frnt_posn_lamp_warn;
};

/**
 * Signals in message SLMFR_Warning.
 *
 * Front Right Signature Light Module Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_slmfr_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_slmfr_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_slmfr_warning;

    /**
     * Right side turn indicator On OFF status for IVI display and audible warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_frnt_ri_body_turn_indcr_warn;

    /**
     * Right DRL lamp ON ,OFF  (Fusa ASIL B)  Warning
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_ri_drl_lamp_warn;

    /**
     * Right Position light warning combination of Front and rear
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdlamp_ri_frnt_posn_lamp_warn;
};

/**
 * Signals in message SLMRC_Warning.
 *
 * Right Center Signature Light Module Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_slmrc_warning_t {
    /**
     * Cyclic Redundancy Check Profile 5
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t crc_slmrc_warning;

    /**
     * Alive Counter Profile 5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t alv_ctr_slmrc_warning;

    /**
     * Status of Rear right Signature Lamp
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_centr_ri_sign_lamp_sts;

    /**
     * Status of Rear left Signature Lamp
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t relamp_centr_le_sign_lamp_sts;
};

/**
 * Signals in message IVI_DiagResp.
 *
 * In Vehicle Infotainment Diagnostic Response
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_diag_resp_t {
    /**
     * Diagnostic Signal Data Response Byte0
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte0;

    /**
     * Diagnostic Signal Data Response Byte1
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte1;

    /**
     * Diagnostic Signal Data Response Byte2
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte2;

    /**
     * Diagnostic Signal Data Response Byte3
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte3;

    /**
     * Diagnostic Signal Data Response Byte4
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte4;

    /**
     * Diagnostic Signal Data Response Byte5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte5;

    /**
     * Diagnostic Signal Data Response Byte6
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte6;

    /**
     * Diagnostic Signal Data Response Byte7
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte7;

    /**
     * Diagnostic Signal Data Response Byte8
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte8;

    /**
     * Diagnostic Signal Data Response Byte9
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte9;

    /**
     * Diagnostic Signal Data Response Byte10
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte10;

    /**
     * Diagnostic Signal Data Response Byte11
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte11;

    /**
     * Diagnostic Signal Data Response Byte12
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte12;

    /**
     * Diagnostic Signal Data Response Byte13
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte13;

    /**
     * Diagnostic Signal Data Response Byte14
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte14;

    /**
     * Diagnostic Signal Data Response Byte15
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte15;

    /**
     * Diagnostic Signal Data Response Byte16
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte16;

    /**
     * Diagnostic Signal Data Response Byte17
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte17;

    /**
     * Diagnostic Signal Data Response Byte18
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte18;

    /**
     * Diagnostic Signal Data Response Byte19
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte19;

    /**
     * Diagnostic Signal Data Response Byte20
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte20;

    /**
     * Diagnostic Signal Data Response Byte21
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte21;

    /**
     * Diagnostic Signal Data Response Byte22
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte22;

    /**
     * Diagnostic Signal Data Response Byte23
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte23;

    /**
     * Diagnostic Signal Data Response Byte24
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte24;

    /**
     * Diagnostic Signal Data Response Byte25
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte25;

    /**
     * Diagnostic Signal Data Response Byte26
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte26;

    /**
     * Diagnostic Signal Data Response Byte27
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte27;

    /**
     * Diagnostic Signal Data Response Byte28
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte28;

    /**
     * Diagnostic Signal Data Response Byte29
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte29;

    /**
     * Diagnostic Signal Data Response Byte30
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte30;

    /**
     * Diagnostic Signal Data Response Byte31
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte31;

    /**
     * Diagnostic Signal Data Response Byte32
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte32;

    /**
     * Diagnostic Signal Data Response Byte33
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte33;

    /**
     * Diagnostic Signal Data Response Byte34
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte34;

    /**
     * Diagnostic Signal Data Response Byte35
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte35;

    /**
     * Diagnostic Signal Data Response Byte36
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte36;

    /**
     * Diagnostic Signal Data Response Byte37
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte37;

    /**
     * Diagnostic Signal Data Response Byte38
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte38;

    /**
     * Diagnostic Signal Data Response Byte39
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte39;

    /**
     * Diagnostic Signal Data Response Byte40
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte40;

    /**
     * Diagnostic Signal Data Response Byte41
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte41;

    /**
     * Diagnostic Signal Data Response Byte42
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte42;

    /**
     * Diagnostic Signal Data Response Byte43
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte43;

    /**
     * Diagnostic Signal Data Response Byte44
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte44;

    /**
     * Diagnostic Signal Data Response Byte45
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte45;

    /**
     * Diagnostic Signal Data Response Byte46
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte46;

    /**
     * Diagnostic Signal Data Response Byte47
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte47;

    /**
     * Diagnostic Signal Data Response Byte48
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte48;

    /**
     * Diagnostic Signal Data Response Byte49
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte49;

    /**
     * Diagnostic Signal Data Response Byte50
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte50;

    /**
     * Diagnostic Signal Data Response Byte51
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte51;

    /**
     * Diagnostic Signal Data Response Byte52
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte52;

    /**
     * Diagnostic Signal Data Response Byte53
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte53;

    /**
     * Diagnostic Signal Data Response Byte54
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte54;

    /**
     * Diagnostic Signal Data Response Byte55
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte55;

    /**
     * Diagnostic Signal Data Response Byte56
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte56;

    /**
     * Diagnostic Signal Data Response Byte57
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte57;

    /**
     * Diagnostic Signal Data Response Byte58
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte58;

    /**
     * Diagnostic Signal Data Response Byte59
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte59;

    /**
     * Diagnostic Signal Data Response Byte60
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte60;

    /**
     * Diagnostic Signal Data Response Byte61
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte61;

    /**
     * Diagnostic Signal Data Response Byte62
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte62;

    /**
     * Diagnostic Signal Data Response Byte63
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_resp_byte63;
};

/**
 * Signals in message WLC_DiagResp.
 *
 * Wireless Charging Module Diagnostic Response
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_wlc_diag_resp_t {
    /**
     * Diagnostic Signal Data Response Byte0
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_resp_byte0;

    /**
     * Diagnostic Signal Data Response Byte1
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_resp_byte1;

    /**
     * Diagnostic Signal Data Response Byte2
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_resp_byte2;

    /**
     * Diagnostic Signal Data Response Byte3
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_resp_byte3;

    /**
     * Diagnostic Signal Data Response Byte4
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_resp_byte4;

    /**
     * Diagnostic Signal Data Response Byte5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_resp_byte5;

    /**
     * Diagnostic Signal Data Response Byte6
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_resp_byte6;

    /**
     * Diagnostic Signal Data Response Byte7
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_resp_byte7;
};

/**
 * Signals in message IVI_DiagReq.
 *
 * In Vehicle Infotainment Diagnostic Request
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_ivi_diag_req_t {
    /**
     * Diagnostic Signal Data Request Byte0
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte0;

    /**
     * Diagnostic Signal Data Request Byte1
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte1;

    /**
     * Diagnostic Signal Data Request Byte2
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte2;

    /**
     * Diagnostic Signal Data Request Byte3
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte3;

    /**
     * Diagnostic Signal Data Request Byte4
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte4;

    /**
     * Diagnostic Signal Data Request Byte5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte5;

    /**
     * Diagnostic Signal Data Request Byte6
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte6;

    /**
     * Diagnostic Signal Data Request Byte7
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte7;

    /**
     * Diagnostic Signal Data Request Byte8
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte8;

    /**
     * Diagnostic Signal Data Request Byte9
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte9;

    /**
     * Diagnostic Signal Data Request Byte10
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte10;

    /**
     * Diagnostic Signal Data Request Byte11
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte11;

    /**
     * Diagnostic Signal Data Request Byte12
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte12;

    /**
     * Diagnostic Signal Data Request Byte13
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte13;

    /**
     * Diagnostic Signal Data Request Byte14
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte14;

    /**
     * Diagnostic Signal Data Request Byte15
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte15;

    /**
     * Diagnostic Signal Data Request Byte16
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte16;

    /**
     * Diagnostic Signal Data Request Byte17
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte17;

    /**
     * Diagnostic Signal Data Request Byte18
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte18;

    /**
     * Diagnostic Signal Data Request Byte19
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte19;

    /**
     * Diagnostic Signal Data Request Byte20
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte20;

    /**
     * Diagnostic Signal Data Request Byte21
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte21;

    /**
     * Diagnostic Signal Data Request Byte22
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte22;

    /**
     * Diagnostic Signal Data Request Byte23
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte23;

    /**
     * Diagnostic Signal Data Request Byte24
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte24;

    /**
     * Diagnostic Signal Data Request Byte25
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte25;

    /**
     * Diagnostic Signal Data Request Byte26
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte26;

    /**
     * Diagnostic Signal Data Request Byte27
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte27;

    /**
     * Diagnostic Signal Data Request Byte28
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte28;

    /**
     * Diagnostic Signal Data Request Byte29
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte29;

    /**
     * Diagnostic Signal Data Request Byte30
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte30;

    /**
     * Diagnostic Signal Data Request Byte31
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte31;

    /**
     * Diagnostic Signal Data Request Byte32
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte32;

    /**
     * Diagnostic Signal Data Request Byte33
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte33;

    /**
     * Diagnostic Signal Data Request Byte34
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte34;

    /**
     * Diagnostic Signal Data Request Byte35
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte35;

    /**
     * Diagnostic Signal Data Request Byte36
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte36;

    /**
     * Diagnostic Signal Data Request Byte37
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte37;

    /**
     * Diagnostic Signal Data Request Byte38
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte38;

    /**
     * Diagnostic Signal Data Request Byte39
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte39;

    /**
     * Diagnostic Signal Data Request Byte40
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte40;

    /**
     * Diagnostic Signal Data Request Byte41
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte41;

    /**
     * Diagnostic Signal Data Request Byte42
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte42;

    /**
     * Diagnostic Signal Data Request Byte43
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte43;

    /**
     * Diagnostic Signal Data Request Byte44
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte44;

    /**
     * Diagnostic Signal Data Request Byte45
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte45;

    /**
     * Diagnostic Signal Data Request Byte46
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte46;

    /**
     * Diagnostic Signal Data Request Byte47
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte47;

    /**
     * Diagnostic Signal Data Request Byte48
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte48;

    /**
     * Diagnostic Signal Data Request Byte49
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte49;

    /**
     * Diagnostic Signal Data Request Byte50
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte50;

    /**
     * Diagnostic Signal Data Request Byte51
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte51;

    /**
     * Diagnostic Signal Data Request Byte52
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte52;

    /**
     * Diagnostic Signal Data Request Byte53
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte53;

    /**
     * Diagnostic Signal Data Request Byte54
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte54;

    /**
     * Diagnostic Signal Data Request Byte55
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte55;

    /**
     * Diagnostic Signal Data Request Byte56
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte56;

    /**
     * Diagnostic Signal Data Request Byte57
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte57;

    /**
     * Diagnostic Signal Data Request Byte58
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte58;

    /**
     * Diagnostic Signal Data Request Byte59
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte59;

    /**
     * Diagnostic Signal Data Request Byte60
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte60;

    /**
     * Diagnostic Signal Data Request Byte61
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte61;

    /**
     * Diagnostic Signal Data Request Byte62
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte62;

    /**
     * Diagnostic Signal Data Request Byte63
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_diag_req_byte63;
};

/**
 * Signals in message WLC_DiagReq.
 *
 * Wireless Charging Module Diagnostic Request
 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_wlc_diag_req_t {
    /**
     * Diagnostic Signal Data Request Byte0
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_req_byte0;

    /**
     * Diagnostic Signal Data Request Byte1
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_req_byte1;

    /**
     * Diagnostic Signal Data Request Byte2
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_req_byte2;

    /**
     * Diagnostic Signal Data Request Byte3
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_req_byte3;

    /**
     * Diagnostic Signal Data Request Byte4
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_req_byte4;

    /**
     * Diagnostic Signal Data Request Byte5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_req_byte5;

    /**
     * Diagnostic Signal Data Request Byte6
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_req_byte6;

    /**
     * Diagnostic Signal Data Request Byte7
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wlc_diag_req_byte7;
};

/**
 * Signals in message OBD_FuncDiagReq.
 *
 * Diagnostic Functional Request

 *
 * All signal values are as on the CAN bus.
 */
struct CanI1_noNM_obd_func_diag_req_t {
    /**
     * Diagnostic Signal Data Request Byte0
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_req_byte0;

    /**
     * Diagnostic Signal Data Request Byte1
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_req_byte1;

    /**
     * Diagnostic Signal Data Request Byte2
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_req_byte2;

    /**
     * Diagnostic Signal Data Request Byte3
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_req_byte3;

    /**
     * Diagnostic Signal Data Request Byte4
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_req_byte4;

    /**
     * Diagnostic Signal Data Request Byte5
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_req_byte5;

    /**
     * Diagnostic Signal Data Request Byte6
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_req_byte6;

    /**
     * Diagnostic Signal Data Request Byte7
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obd_func_diag_req_byte7;
};

/**
 * Pack message OBD_FuncDiagResp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_obd_func_diag_resp_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_obd_func_diag_resp_t *src_p,
    size_t size);

/**
 * Unpack message OBD_FuncDiagResp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_obd_func_diag_resp_unpack(
    struct CanI1_noNM_obd_func_diag_resp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from OBD_FuncDiagResp.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_obd_func_diag_resp_init(struct CanI1_noNM_obd_func_diag_resp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_resp_obd_func_diag_resp_byte7_is_in_range(uint8_t value);

/**
 * Pack message ACM_CrashStat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_acm_crash_stat_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_acm_crash_stat_t *src_p,
    size_t size);

/**
 * Unpack message ACM_CrashStat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_acm_crash_stat_unpack(
    struct CanI1_noNM_acm_crash_stat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACM_CrashStat.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_acm_crash_stat_init(struct CanI1_noNM_acm_crash_stat_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_crash_stat_crc_acm_crash_stat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_crash_stat_crc_acm_crash_stat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_crash_stat_crc_acm_crash_stat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_crash_stat_alv_ctr_acm_crash_stat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_crash_stat_alv_ctr_acm_crash_stat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_crash_stat_alv_ctr_acm_crash_stat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_crash_stat_airbg_crash_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_crash_stat_airbg_crash_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_crash_stat_airbg_crash_sts_is_in_range(uint8_t value);

/**
 * Pack message EPS_SFA_SteerWhl_Pub_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_eps_sfa_steer_whl_pub_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_eps_sfa_steer_whl_pub_info_t *src_p,
    size_t size);

/**
 * Unpack message EPS_SFA_SteerWhl_Pub_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_eps_sfa_steer_whl_pub_info_unpack(
    struct CanI1_noNM_eps_sfa_steer_whl_pub_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPS_SFA_SteerWhl_Pub_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_eps_sfa_steer_whl_pub_info_init(struct CanI1_noNM_eps_sfa_steer_whl_pub_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa_steer_whl_pub_info_crc_eps_sfa_steer_whl_pub_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa_steer_whl_pub_info_crc_eps_sfa_steer_whl_pub_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa_steer_whl_pub_info_crc_eps_sfa_steer_whl_pub_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa_steer_whl_pub_info_alv_ctr_eps_sfa_steer_whl_pub_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa_steer_whl_pub_info_alv_ctr_eps_sfa_steer_whl_pub_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa_steer_whl_pub_info_alv_ctr_eps_sfa_steer_whl_pub_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_steer_whl_tq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_steer_whl_tq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_steer_whl_tq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_emgcy_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_emgcy_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_emgcy_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_steer_whl_ag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_steer_whl_ag_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_steer_whl_ag_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_tun_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_tun_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_tun_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_centrg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_centrg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_centrg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_ctl_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_ctl_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa_steer_whl_pub_info_stbwr_sfa_ctl_mode_is_in_range(uint8_t value);

/**
 * Pack message VCU_ETractSys_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_vcu_e_tract_sys_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_vcu_e_tract_sys_info_t *src_p,
    size_t size);

/**
 * Unpack message VCU_ETractSys_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_vcu_e_tract_sys_info_unpack(
    struct CanI1_noNM_vcu_e_tract_sys_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_ETractSys_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_vcu_e_tract_sys_info_init(struct CanI1_noNM_vcu_e_tract_sys_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_e_tract_sys_info_crc_vcu_e_tract_sys_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_e_tract_sys_info_crc_vcu_e_tract_sys_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_e_tract_sys_info_crc_vcu_e_tract_sys_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_e_tract_sys_info_alv_ctr_vcu_e_tract_sys_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_e_tract_sys_info_alv_ctr_vcu_e_tract_sys_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_e_tract_sys_info_alv_ctr_vcu_e_tract_sys_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_e_tract_sys_info_dtqmt_tgt_tq_eds_re_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_e_tract_sys_info_dtqmt_tgt_tq_eds_re_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_e_tract_sys_info_dtqmt_tgt_tq_eds_re_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_e_tract_sys_info_dtqmt_tgt_tq_eds_frnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_e_tract_sys_info_dtqmt_tgt_tq_eds_frnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_e_tract_sys_info_dtqmt_tgt_tq_eds_frnt_is_in_range(uint16_t value);

/**
 * Pack message RWSM_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_rwsm_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_rwsm_info_t *src_p,
    size_t size);

/**
 * Unpack message RWSM_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_rwsm_info_unpack(
    struct CanI1_noNM_rwsm_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RWSM_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_rwsm_info_init(struct CanI1_noNM_rwsm_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_rwsm_info_crc_rwsm_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rwsm_info_crc_rwsm_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rwsm_info_crc_rwsm_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rwsm_info_alv_ctr_rwsm_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rwsm_info_alv_ctr_rwsm_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rwsm_info_alv_ctr_rwsm_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_rwsm_info_re_whl_steer_measd_stk_val_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rwsm_info_re_whl_steer_measd_stk_val_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rwsm_info_re_whl_steer_measd_stk_val_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rwsm_info_re_whl_steer_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rwsm_info_re_whl_steer_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rwsm_info_re_whl_steer_sts_is_in_range(uint8_t value);

/**
 * Pack message BMS_Sts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_bms_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_bms_sts_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Sts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_bms_sts_unpack(
    struct CanI1_noNM_bms_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Sts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_bms_sts_init(struct CanI1_noNM_bms_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_bms_sts_crc_bms_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_sts_crc_bms_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_sts_crc_bms_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_sts_alv_ctr_bms_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_sts_alv_ctr_bms_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_sts_alv_ctr_bms_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_sts_bms_bat_pre_cdn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_sts_bms_bat_pre_cdn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_sts_bms_bat_pre_cdn_sts_is_in_range(uint8_t value);

/**
 * Pack message EPS_RWA_Pinion_Pub_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_eps_rwa_pinion_pub_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_eps_rwa_pinion_pub_info_t *src_p,
    size_t size);

/**
 * Unpack message EPS_RWA_Pinion_Pub_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_eps_rwa_pinion_pub_info_unpack(
    struct CanI1_noNM_eps_rwa_pinion_pub_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPS_RWA_Pinion_Pub_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_eps_rwa_pinion_pub_info_init(struct CanI1_noNM_eps_rwa_pinion_pub_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_eps_rwa_pinion_pub_info_crc_eps_rwa_pinion_pub_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa_pinion_pub_info_crc_eps_rwa_pinion_pub_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa_pinion_pub_info_crc_eps_rwa_pinion_pub_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_rwa_pinion_pub_info_alv_ctr_eps_rwa_pinion_pub_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa_pinion_pub_info_alv_ctr_eps_rwa_pinion_pub_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa_pinion_pub_info_alv_ctr_eps_rwa_pinion_pub_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_pinion_ag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_pinion_ag_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_pinion_ag_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_pinion_ag_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_pinion_ag_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_pinion_ag_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_rack_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_rack_posn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_rack_posn_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_rack_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_rack_spd_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa_pinion_pub_info_stbwr_rwa_rack_spd_is_in_range(uint32_t value);

/**
 * Pack message EBCM_Veh_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ebcm_veh_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ebcm_veh_info_t *src_p,
    size_t size);

/**
 * Unpack message EBCM_Veh_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ebcm_veh_info_unpack(
    struct CanI1_noNM_ebcm_veh_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EBCM_Veh_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ebcm_veh_info_init(struct CanI1_noNM_ebcm_veh_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_veh_info_crc_ebcm_veh_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_veh_info_crc_ebcm_veh_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_veh_info_crc_ebcm_veh_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_veh_info_alv_ctr_ebcm_veh_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_veh_info_alv_ctr_ebcm_veh_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_veh_info_alv_ctr_ebcm_veh_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ebcm_veh_info_abs_act_veh_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_veh_info_abs_act_veh_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_veh_info_abs_act_veh_spd_is_in_range(uint16_t value);

/**
 * Pack message ZCUF_Clamp_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_zcuf_clamp_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_zcuf_clamp_info_t *src_p,
    size_t size);

/**
 * Unpack message ZCUF_Clamp_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_zcuf_clamp_info_unpack(
    struct CanI1_noNM_zcuf_clamp_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ZCUF_Clamp_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_zcuf_clamp_info_init(struct CanI1_noNM_zcuf_clamp_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clamp_info_crc_zcuf_clamp_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clamp_info_crc_zcuf_clamp_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clamp_info_crc_zcuf_clamp_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clamp_info_alv_ctr_zcuf_clamp_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clamp_info_alv_ctr_zcuf_clamp_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clamp_info_alv_ctr_zcuf_clamp_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clamp_info_clmmg_veh_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clamp_info_clmmg_veh_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clamp_info_clmmg_veh_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clamp_info_clmmg_cl15_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clamp_info_clmmg_cl15_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clamp_info_clmmg_cl15_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clamp_info_clmmg_cl30_s_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clamp_info_clmmg_cl30_s_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clamp_info_clmmg_cl30_s_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clamp_info_lvm_loa_shed_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clamp_info_lvm_loa_shed_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clamp_info_lvm_loa_shed_req_is_in_range(uint8_t value);

/**
 * Pack message ASU_SnsrInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_asu_snsr_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_asu_snsr_info_t *src_p,
    size_t size);

/**
 * Unpack message ASU_SnsrInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_asu_snsr_info_unpack(
    struct CanI1_noNM_asu_snsr_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ASU_SnsrInfo.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_asu_snsr_info_init(struct CanI1_noNM_asu_snsr_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_asu_snsr_info_crc_asu_snsr_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_crc_asu_snsr_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_crc_asu_snsr_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_snsr_info_alv_ctr_asu_snsr_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_alv_ctr_asu_snsr_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_alv_ctr_asu_snsr_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_asu_snsr_info_air_susp_unit_hei_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_hei_fl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_hei_fl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_asu_snsr_info_air_susp_unit_hei_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_hei_fr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_hei_fr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_asu_snsr_info_air_susp_unit_hei_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_hei_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_hei_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_asu_snsr_info_air_susp_unit_hei_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_hei_rl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_hei_rl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_snsr_info_air_susp_unit_hei_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_hei_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_hei_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_snsr_info_air_susp_unit_cdc_mode_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_cdc_mode_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_cdc_mode_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_snsr_info_air_susp_unit_ingrs_mod_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_ingrs_mod_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_ingrs_mod_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_snsr_info_air_susp_unit_sprg_mode_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_sprg_mode_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_sprg_mode_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_snsr_info_air_susp_unit_cmpr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_cmpr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_cmpr_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_snsr_info_air_susp_unit_srv_mode_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_srv_mode_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_srv_mode_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_snsr_info_air_susp_unit_air_tank_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_air_tank_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_air_tank_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_snsr_info_air_susp_unit_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_snsr_info_air_susp_unit_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_snsr_info_air_susp_unit_sts_is_in_range(uint8_t value);

/**
 * Pack message VCU_Batt_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_vcu_batt_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_vcu_batt_info_t *src_p,
    size_t size);

/**
 * Unpack message VCU_Batt_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_vcu_batt_info_unpack(
    struct CanI1_noNM_vcu_batt_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_Batt_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_vcu_batt_info_init(struct CanI1_noNM_vcu_batt_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_batt_info_crc_vcu_batt_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_batt_info_crc_vcu_batt_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_batt_info_crc_vcu_batt_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_batt_info_alv_ctr_vcu_batt_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_batt_info_alv_ctr_vcu_batt_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_batt_info_alv_ctr_vcu_batt_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_batt_info_bms_pack_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_batt_info_bms_pack_i_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_batt_info_bms_pack_i_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_batt_info_bms_pack_u_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_batt_info_bms_pack_u_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_batt_info_bms_pack_u_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_batt_info_acchg_rmng_chg_ti_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_batt_info_acchg_rmng_chg_ti_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_batt_info_acchg_rmng_chg_ti_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_batt_info_fschg_rmng_chg_ti_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_batt_info_fschg_rmng_chg_ti_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_batt_info_fschg_rmng_chg_ti_is_in_range(uint16_t value);

/**
 * Pack message VCU_Charging_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_vcu_charging_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_vcu_charging_info_t *src_p,
    size_t size);

/**
 * Unpack message VCU_Charging_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_vcu_charging_info_unpack(
    struct CanI1_noNM_vcu_charging_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_Charging_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_vcu_charging_info_init(struct CanI1_noNM_vcu_charging_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_charging_info_crc_vcu_charging_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_charging_info_crc_vcu_charging_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_charging_info_crc_vcu_charging_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_charging_info_alv_ctr_vcu_charging_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_charging_info_alv_ctr_vcu_charging_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_charging_info_alv_ctr_vcu_charging_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_charging_info_fschg_dc_chg_gun_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_charging_info_fschg_dc_chg_gun_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_charging_info_fschg_dc_chg_gun_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_charging_info_acchg_ac_chg_gun_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_charging_info_acchg_ac_chg_gun_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_charging_info_acchg_ac_chg_gun_in_is_in_range(uint8_t value);

/**
 * Pack message VCU_HVDrvSys_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_vcu_hv_drv_sys_status_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_vcu_hv_drv_sys_status_t *src_p,
    size_t size);

/**
 * Unpack message VCU_HVDrvSys_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_vcu_hv_drv_sys_status_unpack(
    struct CanI1_noNM_vcu_hv_drv_sys_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_HVDrvSys_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_vcu_hv_drv_sys_status_init(struct CanI1_noNM_vcu_hv_drv_sys_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_hv_drv_sys_status_crc_vcu_hv_drv_sys_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_hv_drv_sys_status_crc_vcu_hv_drv_sys_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_hv_drv_sys_status_crc_vcu_hv_drv_sys_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_hv_drv_sys_status_alv_ctr_vcu_hv_drv_sys_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_hv_drv_sys_status_alv_ctr_vcu_hv_drv_sys_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_hv_drv_sys_status_alv_ctr_vcu_hv_drv_sys_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_hv_drv_sys_status_drvmc_act_drv_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_hv_drv_sys_status_drvmc_act_drv_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_hv_drv_sys_status_drvmc_act_drv_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_hv_drv_sys_status_enmgt_hv_drv_sys_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_hv_drv_sys_status_enmgt_hv_drv_sys_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_hv_drv_sys_status_enmgt_hv_drv_sys_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_hv_drv_sys_status_drvmc_act_drv_mode_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_hv_drv_sys_status_drvmc_act_drv_mode_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_hv_drv_sys_status_drvmc_act_drv_mode_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_hv_drv_sys_status_eshift_act_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_hv_drv_sys_status_eshift_act_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_hv_drv_sys_status_eshift_act_gear_is_in_range(uint8_t value);

/**
 * Pack message EBCM_Sts_Req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ebcm_sts_req_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ebcm_sts_req_t *src_p,
    size_t size);

/**
 * Unpack message EBCM_Sts_Req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ebcm_sts_req_unpack(
    struct CanI1_noNM_ebcm_sts_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EBCM_Sts_Req.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ebcm_sts_req_init(struct CanI1_noNM_ebcm_sts_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_crc_ebcm_sts_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_crc_ebcm_sts_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_crc_ebcm_sts_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_alv_ctr_ebcm_sts_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_alv_ctr_ebcm_sts_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_alv_ctr_ebcm_sts_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_abs_intv_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_abs_intv_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_abs_intv_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_drvac_tcs_avl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_drvac_tcs_avl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_drvac_tcs_avl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_drvac_fld_lvl_indcr_brk_fld_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_drvac_fld_lvl_indcr_brk_fld_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_drvac_fld_lvl_indcr_brk_fld_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_ecpbk_brk_li_on_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_ecpbk_brk_li_on_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_ecpbk_brk_li_on_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_ebd_sys_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_ebd_sys_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_ebd_sys_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_drvac_hdc_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_drvac_hdc_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_drvac_hdc_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_drvac_tcs_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_drvac_tcs_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_drvac_tcs_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_drvac_cornering_brk_ctl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_drvac_cornering_brk_ctl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_drvac_cornering_brk_ctl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_drvac_hill_strt_assi_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_drvac_hill_strt_assi_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_drvac_hill_strt_assi_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_sts_req_ecpbk_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_sts_req_ecpbk_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_sts_req_ecpbk_sts_is_in_range(uint8_t value);

/**
 * Pack message ZCUR_LampCmd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_zcur_lamp_cmd_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_zcur_lamp_cmd_t *src_p,
    size_t size);

/**
 * Unpack message ZCUR_LampCmd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_zcur_lamp_cmd_unpack(
    struct CanI1_noNM_zcur_lamp_cmd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ZCUR_LampCmd.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_zcur_lamp_cmd_init(struct CanI1_noNM_zcur_lamp_cmd_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_zcur_lamp_cmd_crc_zcur_lamp_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_lamp_cmd_crc_zcur_lamp_cmd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_lamp_cmd_crc_zcur_lamp_cmd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_lamp_cmd_alv_ctr_zcur_lamp_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_lamp_cmd_alv_ctr_zcur_lamp_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_lamp_cmd_alv_ctr_zcur_lamp_cmd_is_in_range(uint8_t value);

/**
 * Pack message SBM_LVBatInfo_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_sbm_lv_bat_info_1_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_sbm_lv_bat_info_1_t *src_p,
    size_t size);

/**
 * Unpack message SBM_LVBatInfo_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_sbm_lv_bat_info_1_unpack(
    struct CanI1_noNM_sbm_lv_bat_info_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SBM_LVBatInfo_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_sbm_lv_bat_info_1_init(struct CanI1_noNM_sbm_lv_bat_info_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_lv_bat_info_1_crc_sbm_lv_bat_info_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_lv_bat_info_1_crc_sbm_lv_bat_info_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_lv_bat_info_1_crc_sbm_lv_bat_info_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_lv_bat_info_1_alv_ctr_sbm_lv_bat_info_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_lv_bat_info_1_alv_ctr_sbm_lv_bat_info_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_lv_bat_info_1_alv_ctr_sbm_lv_bat_info_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_sbm_lv_bat_info_1_sbm_lv_batt_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_lv_bat_info_1_sbm_lv_batt_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_lv_bat_info_1_sbm_lv_batt_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_lv_bat_info_1_sbm_lv_bat_therm_runawy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_lv_bat_info_1_sbm_lv_bat_therm_runawy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_lv_bat_info_1_sbm_lv_bat_therm_runawy_is_in_range(uint8_t value);

/**
 * Pack message SBM_LVBatInfo_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_sbm_lv_bat_info_2_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_sbm_lv_bat_info_2_t *src_p,
    size_t size);

/**
 * Unpack message SBM_LVBatInfo_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_sbm_lv_bat_info_2_unpack(
    struct CanI1_noNM_sbm_lv_bat_info_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SBM_LVBatInfo_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_sbm_lv_bat_info_2_init(struct CanI1_noNM_sbm_lv_bat_info_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_sbm_lv_bat_info_2_crc_sbm_lv_bat_info_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_lv_bat_info_2_crc_sbm_lv_bat_info_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_lv_bat_info_2_crc_sbm_lv_bat_info_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_lv_bat_info_2_alv_ctr_sbm_lv_bat_info_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_lv_bat_info_2_alv_ctr_sbm_lv_bat_info_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_lv_bat_info_2_alv_ctr_sbm_lv_bat_info_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_lv_bat_info_2_sbm_lv_bat_act_soh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_lv_bat_info_2_sbm_lv_bat_act_soh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_lv_bat_info_2_sbm_lv_bat_act_soh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_lv_bat_info_2_sbm_critical_so_c_alert_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_lv_bat_info_2_sbm_critical_so_c_alert_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_lv_bat_info_2_sbm_critical_so_c_alert_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_lv_bat_info_2_sbm_lv_batt_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_lv_bat_info_2_sbm_lv_batt_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_lv_bat_info_2_sbm_lv_batt_t_is_in_range(uint8_t value);

/**
 * Pack message VCU_Consumption_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_vcu_consumption_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_vcu_consumption_info_t *src_p,
    size_t size);

/**
 * Unpack message VCU_Consumption_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_vcu_consumption_info_unpack(
    struct CanI1_noNM_vcu_consumption_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_Consumption_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_vcu_consumption_info_init(struct CanI1_noNM_vcu_consumption_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_consumption_info_engmt_lv_aux_avg_eng_cns_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_consumption_info_engmt_lv_aux_avg_eng_cns_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_consumption_info_engmt_lv_aux_avg_eng_cns_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_consumption_info_engmt_intts_eng_cns_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_consumption_info_engmt_intts_eng_cns_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_consumption_info_engmt_intts_eng_cns_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_consumption_info_engmt_tot_avg_eng_cns_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_consumption_info_engmt_tot_avg_eng_cns_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_consumption_info_engmt_tot_avg_eng_cns_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_consumption_info_engmt_eds_avg_eng_cns_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_consumption_info_engmt_eds_avg_eng_cns_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_consumption_info_engmt_eds_avg_eng_cns_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_consumption_info_engmt_therm_avg_eng_cns_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_consumption_info_engmt_therm_avg_eng_cns_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_consumption_info_engmt_therm_avg_eng_cns_is_in_range(uint16_t value);

/**
 * Pack message VCU_To_Veh_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_vcu_to_veh_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_vcu_to_veh_info_t *src_p,
    size_t size);

/**
 * Unpack message VCU_To_Veh_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_vcu_to_veh_info_unpack(
    struct CanI1_noNM_vcu_to_veh_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_To_Veh_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_vcu_to_veh_info_init(struct CanI1_noNM_vcu_to_veh_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_to_veh_info_crc_vcu_to_veh_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_crc_vcu_to_veh_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_crc_vcu_to_veh_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_to_veh_info_alv_ctr_vcu_to_veh_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_alv_ctr_vcu_to_veh_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_alv_ctr_vcu_to_veh_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_to_veh_info_acchg_hv_bat_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_acchg_hv_bat_soc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_acchg_hv_bat_soc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_to_veh_info_acchg_ac_chg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_acchg_ac_chg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_acchg_ac_chg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_to_veh_info_awd_act_whl_drv_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_awd_act_whl_drv_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_awd_act_whl_drv_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_to_veh_info_engmt_chrgr_dlv_pwr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_engmt_chrgr_dlv_pwr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_engmt_chrgr_dlv_pwr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_to_veh_info_engmt_veh_rmng_drv_rng_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_engmt_veh_rmng_drv_rng_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_engmt_veh_rmng_drv_rng_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_to_veh_info_cregb_coast_rgn_lvl_indcr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_cregb_coast_rgn_lvl_indcr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_cregb_coast_rgn_lvl_indcr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_to_veh_info_fschg_veh_chrgn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_fschg_veh_chrgn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_fschg_veh_chrgn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_to_veh_info_eshift_chng_gear_from_park_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_eshift_chng_gear_from_park_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_eshift_chng_gear_from_park_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_to_veh_info_engmt_veh_milg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_engmt_veh_milg_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_engmt_veh_milg_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_to_veh_info_fschg_hv_bat_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_fschg_hv_bat_soc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_fschg_hv_bat_soc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_to_veh_info_fschg_chg_gun_lock_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_fschg_chg_gun_lock_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_fschg_chg_gun_lock_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_to_veh_info_awd_act_whl_drv_mode_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_to_veh_info_awd_act_whl_drv_mode_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_to_veh_info_awd_act_whl_drv_mode_vld_is_in_range(uint8_t value);

/**
 * Pack message ZCUF_RlhsLight_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_zcuf_rlhs_light_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_zcuf_rlhs_light_info_t *src_p,
    size_t size);

/**
 * Unpack message ZCUF_RlhsLight_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_zcuf_rlhs_light_info_unpack(
    struct CanI1_noNM_zcuf_rlhs_light_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ZCUF_RlhsLight_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_zcuf_rlhs_light_info_init(struct CanI1_noNM_zcuf_rlhs_light_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_rlhs_light_info_crc_zcuf_rlhs_light_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_rlhs_light_info_crc_zcuf_rlhs_light_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_rlhs_light_info_crc_zcuf_rlhs_light_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_rlhs_light_info_alv_ctr_zcuf_rlhs_light_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_rlhs_light_info_alv_ctr_zcuf_rlhs_light_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_rlhs_light_info_alv_ctr_zcuf_rlhs_light_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_rlhs_light_info_rlhs_solar_drvr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_rlhs_light_info_rlhs_solar_drvr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_rlhs_light_info_rlhs_solar_drvr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_rlhs_light_info_rlhs_solar_pass_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_rlhs_light_info_rlhs_solar_pass_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_rlhs_light_info_rlhs_solar_pass_is_in_range(uint8_t value);

/**
 * Pack message HDLML_FrontLamp_Sts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_hdlml_front_lamp_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_hdlml_front_lamp_sts_t *src_p,
    size_t size);

/**
 * Unpack message HDLML_FrontLamp_Sts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_hdlml_front_lamp_sts_unpack(
    struct CanI1_noNM_hdlml_front_lamp_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HDLML_FrontLamp_Sts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_hdlml_front_lamp_sts_init(struct CanI1_noNM_hdlml_front_lamp_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_hdlml_front_lamp_sts_crc_hdlml_front_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlml_front_lamp_sts_crc_hdlml_front_lamp_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlml_front_lamp_sts_crc_hdlml_front_lamp_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlml_front_lamp_sts_alv_ctr_hdlml_front_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlml_front_lamp_sts_alv_ctr_hdlml_front_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlml_front_lamp_sts_alv_ctr_hdlml_front_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlml_front_lamp_sts_hdlamp_le_lo_beam_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlml_front_lamp_sts_hdlamp_le_lo_beam_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlml_front_lamp_sts_hdlamp_le_lo_beam_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlml_front_lamp_sts_hdlamp_le_hi_beam_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlml_front_lamp_sts_hdlamp_le_hi_beam_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlml_front_lamp_sts_hdlamp_le_hi_beam_lamp_sts_is_in_range(uint8_t value);

/**
 * Pack message HDLMR_FrontLamp_Sts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_hdlmr_front_lamp_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_hdlmr_front_lamp_sts_t *src_p,
    size_t size);

/**
 * Unpack message HDLMR_FrontLamp_Sts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_hdlmr_front_lamp_sts_unpack(
    struct CanI1_noNM_hdlmr_front_lamp_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HDLMR_FrontLamp_Sts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_hdlmr_front_lamp_sts_init(struct CanI1_noNM_hdlmr_front_lamp_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_hdlmr_front_lamp_sts_crc_hdlmr_front_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlmr_front_lamp_sts_crc_hdlmr_front_lamp_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlmr_front_lamp_sts_crc_hdlmr_front_lamp_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlmr_front_lamp_sts_alv_ctr_hdlmr_front_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlmr_front_lamp_sts_alv_ctr_hdlmr_front_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlmr_front_lamp_sts_alv_ctr_hdlmr_front_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlmr_front_lamp_sts_hdlamp_ri_lo_beam_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlmr_front_lamp_sts_hdlamp_ri_lo_beam_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlmr_front_lamp_sts_hdlamp_ri_lo_beam_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlmr_front_lamp_sts_hdlamp_ri_hi_beam_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlmr_front_lamp_sts_hdlamp_ri_hi_beam_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlmr_front_lamp_sts_hdlamp_ri_hi_beam_lamp_sts_is_in_range(uint8_t value);

/**
 * Pack message SLMFL_FrontLamp_Sts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_slmfl_front_lamp_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_slmfl_front_lamp_sts_t *src_p,
    size_t size);

/**
 * Unpack message SLMFL_FrontLamp_Sts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_slmfl_front_lamp_sts_unpack(
    struct CanI1_noNM_slmfl_front_lamp_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SLMFL_FrontLamp_Sts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_slmfl_front_lamp_sts_init(struct CanI1_noNM_slmfl_front_lamp_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_slmfl_front_lamp_sts_crc_slmfl_front_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfl_front_lamp_sts_crc_slmfl_front_lamp_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfl_front_lamp_sts_crc_slmfl_front_lamp_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfl_front_lamp_sts_alv_ctr_slmfl_front_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfl_front_lamp_sts_alv_ctr_slmfl_front_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfl_front_lamp_sts_alv_ctr_slmfl_front_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfl_front_lamp_sts_hdlamp_le_frnt_posn_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfl_front_lamp_sts_hdlamp_le_frnt_posn_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfl_front_lamp_sts_hdlamp_le_frnt_posn_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfl_front_lamp_sts_hdlamp_le_drl_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfl_front_lamp_sts_hdlamp_le_drl_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfl_front_lamp_sts_hdlamp_le_drl_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfl_front_lamp_sts_hdlamp_frnt_le_body_turn_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfl_front_lamp_sts_hdlamp_frnt_le_body_turn_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfl_front_lamp_sts_hdlamp_frnt_le_body_turn_indcr_sts_is_in_range(uint8_t value);

/**
 * Pack message SLMFR_FrontLamp_Sts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_slmfr_front_lamp_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_slmfr_front_lamp_sts_t *src_p,
    size_t size);

/**
 * Unpack message SLMFR_FrontLamp_Sts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_slmfr_front_lamp_sts_unpack(
    struct CanI1_noNM_slmfr_front_lamp_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SLMFR_FrontLamp_Sts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_slmfr_front_lamp_sts_init(struct CanI1_noNM_slmfr_front_lamp_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_slmfr_front_lamp_sts_crc_slmfr_front_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfr_front_lamp_sts_crc_slmfr_front_lamp_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfr_front_lamp_sts_crc_slmfr_front_lamp_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfr_front_lamp_sts_alv_ctr_slmfr_front_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfr_front_lamp_sts_alv_ctr_slmfr_front_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfr_front_lamp_sts_alv_ctr_slmfr_front_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfr_front_lamp_sts_hdlamp_ri_frnt_posn_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfr_front_lamp_sts_hdlamp_ri_frnt_posn_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfr_front_lamp_sts_hdlamp_ri_frnt_posn_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfr_front_lamp_sts_hdlamp_ri_drl_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfr_front_lamp_sts_hdlamp_ri_drl_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfr_front_lamp_sts_hdlamp_ri_drl_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfr_front_lamp_sts_hdlamp_frnt_ri_body_turn_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfr_front_lamp_sts_hdlamp_frnt_ri_body_turn_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfr_front_lamp_sts_hdlamp_frnt_ri_body_turn_indcr_sts_is_in_range(uint8_t value);

/**
 * Pack message RLML_RearLampSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_rlml_rear_lamp_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_rlml_rear_lamp_sts_t *src_p,
    size_t size);

/**
 * Unpack message RLML_RearLampSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_rlml_rear_lamp_sts_unpack(
    struct CanI1_noNM_rlml_rear_lamp_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RLML_RearLampSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_rlml_rear_lamp_sts_init(struct CanI1_noNM_rlml_rear_lamp_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_rlml_rear_lamp_sts_crc_rlml_rear_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlml_rear_lamp_sts_crc_rlml_rear_lamp_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlml_rear_lamp_sts_crc_rlml_rear_lamp_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlml_rear_lamp_sts_alv_ctr_rlml_rear_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlml_rear_lamp_sts_alv_ctr_rlml_rear_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlml_rear_lamp_sts_alv_ctr_rlml_rear_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlml_rear_lamp_sts_relamp_le_body_brk_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlml_rear_lamp_sts_relamp_le_body_brk_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlml_rear_lamp_sts_relamp_le_body_brk_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlml_rear_lamp_sts_relamp_re_le_body_posn_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlml_rear_lamp_sts_relamp_re_le_body_posn_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlml_rear_lamp_sts_relamp_re_le_body_posn_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlml_rear_lamp_sts_relamp_re_le_body_turn_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlml_rear_lamp_sts_relamp_re_le_body_turn_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlml_rear_lamp_sts_relamp_re_le_body_turn_indcr_sts_is_in_range(uint8_t value);

/**
 * Pack message RLMR_RearLampSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_rlmr_rear_lamp_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_rlmr_rear_lamp_sts_t *src_p,
    size_t size);

/**
 * Unpack message RLMR_RearLampSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_rlmr_rear_lamp_sts_unpack(
    struct CanI1_noNM_rlmr_rear_lamp_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RLMR_RearLampSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_rlmr_rear_lamp_sts_init(struct CanI1_noNM_rlmr_rear_lamp_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_rlmr_rear_lamp_sts_crc_rlmr_rear_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlmr_rear_lamp_sts_crc_rlmr_rear_lamp_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlmr_rear_lamp_sts_crc_rlmr_rear_lamp_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlmr_rear_lamp_sts_alv_ctr_rlmr_rear_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlmr_rear_lamp_sts_alv_ctr_rlmr_rear_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlmr_rear_lamp_sts_alv_ctr_rlmr_rear_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlmr_rear_lamp_sts_relamp_ri_body_brk_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlmr_rear_lamp_sts_relamp_ri_body_brk_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlmr_rear_lamp_sts_relamp_ri_body_brk_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlmr_rear_lamp_sts_relamp_re_ri_body_posn_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlmr_rear_lamp_sts_relamp_re_ri_body_posn_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlmr_rear_lamp_sts_relamp_re_ri_body_posn_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlmr_rear_lamp_sts_relamp_re_ri_body_turn_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlmr_rear_lamp_sts_relamp_re_ri_body_turn_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlmr_rear_lamp_sts_relamp_re_ri_body_turn_indcr_sts_is_in_range(uint8_t value);

/**
 * Pack message TLML_RearLampSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_tlml_rear_lamp_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_tlml_rear_lamp_sts_t *src_p,
    size_t size);

/**
 * Unpack message TLML_RearLampSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_tlml_rear_lamp_sts_unpack(
    struct CanI1_noNM_tlml_rear_lamp_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TLML_RearLampSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_tlml_rear_lamp_sts_init(struct CanI1_noNM_tlml_rear_lamp_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_tlml_rear_lamp_sts_crc_tlml_rear_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlml_rear_lamp_sts_crc_tlml_rear_lamp_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlml_rear_lamp_sts_crc_tlml_rear_lamp_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlml_rear_lamp_sts_alv_ctr_tlml_rear_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlml_rear_lamp_sts_alv_ctr_tlml_rear_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlml_rear_lamp_sts_alv_ctr_tlml_rear_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlml_rear_lamp_sts_relamp_le_tlg_brk_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlml_rear_lamp_sts_relamp_le_tlg_brk_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlml_rear_lamp_sts_relamp_le_tlg_brk_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlml_rear_lamp_sts_relamp_re_le_tlg_posn_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlml_rear_lamp_sts_relamp_re_le_tlg_posn_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlml_rear_lamp_sts_relamp_re_le_tlg_posn_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlml_rear_lamp_sts_relamp_re_le_tlg_turn_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlml_rear_lamp_sts_relamp_re_le_tlg_turn_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlml_rear_lamp_sts_relamp_re_le_tlg_turn_indcr_sts_is_in_range(uint8_t value);

/**
 * Pack message SLMFC_LampSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_slmfc_lamp_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_slmfc_lamp_sts_t *src_p,
    size_t size);

/**
 * Unpack message SLMFC_LampSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_slmfc_lamp_sts_unpack(
    struct CanI1_noNM_slmfc_lamp_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SLMFC_LampSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_slmfc_lamp_sts_init(struct CanI1_noNM_slmfc_lamp_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_slmfc_lamp_sts_crc_slmfc_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfc_lamp_sts_crc_slmfc_lamp_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfc_lamp_sts_crc_slmfc_lamp_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfc_lamp_sts_alv_ctr_slmfc_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfc_lamp_sts_alv_ctr_slmfc_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfc_lamp_sts_alv_ctr_slmfc_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfc_lamp_sts_hdlamp_frnt_centr_le_sign_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfc_lamp_sts_hdlamp_frnt_centr_le_sign_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfc_lamp_sts_hdlamp_frnt_centr_le_sign_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfc_lamp_sts_hdlamp_frnt_centr_ri_sign_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfc_lamp_sts_hdlamp_frnt_centr_ri_sign_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfc_lamp_sts_hdlamp_frnt_centr_ri_sign_lamp_sts_is_in_range(uint8_t value);

/**
 * Pack message SLMRC_LampSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_slmrc_lamp_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_slmrc_lamp_sts_t *src_p,
    size_t size);

/**
 * Unpack message SLMRC_LampSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_slmrc_lamp_sts_unpack(
    struct CanI1_noNM_slmrc_lamp_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SLMRC_LampSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_slmrc_lamp_sts_init(struct CanI1_noNM_slmrc_lamp_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_slmrc_lamp_sts_crc_slmrc_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmrc_lamp_sts_crc_slmrc_lamp_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmrc_lamp_sts_crc_slmrc_lamp_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmrc_lamp_sts_alv_ctr_slmrc_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmrc_lamp_sts_alv_ctr_slmrc_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmrc_lamp_sts_alv_ctr_slmrc_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmrc_lamp_sts_relamp_frnt_centr_le_sign_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmrc_lamp_sts_relamp_frnt_centr_le_sign_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmrc_lamp_sts_relamp_frnt_centr_le_sign_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmrc_lamp_sts_relamp_frnt_centr_ri_sign_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmrc_lamp_sts_relamp_frnt_centr_ri_sign_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmrc_lamp_sts_relamp_frnt_centr_ri_sign_lamp_sts_is_in_range(uint8_t value);

/**
 * Pack message TLMR_RearLampSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_tlmr_rear_lamp_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_tlmr_rear_lamp_sts_t *src_p,
    size_t size);

/**
 * Unpack message TLMR_RearLampSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_tlmr_rear_lamp_sts_unpack(
    struct CanI1_noNM_tlmr_rear_lamp_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TLMR_RearLampSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_tlmr_rear_lamp_sts_init(struct CanI1_noNM_tlmr_rear_lamp_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_tlmr_rear_lamp_sts_crc_tlmr_rear_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlmr_rear_lamp_sts_crc_tlmr_rear_lamp_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlmr_rear_lamp_sts_crc_tlmr_rear_lamp_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlmr_rear_lamp_sts_alv_ctr_tlmr_rear_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlmr_rear_lamp_sts_alv_ctr_tlmr_rear_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlmr_rear_lamp_sts_alv_ctr_tlmr_rear_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlmr_rear_lamp_sts_relamp_ri_tlg_brk_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlmr_rear_lamp_sts_relamp_ri_tlg_brk_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlmr_rear_lamp_sts_relamp_ri_tlg_brk_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlmr_rear_lamp_sts_relamp_re_ri_tlg_posn_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlmr_rear_lamp_sts_relamp_re_ri_tlg_posn_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlmr_rear_lamp_sts_relamp_re_ri_tlg_posn_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlmr_rear_lamp_sts_relamp_re_ri_tlg_turn_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlmr_rear_lamp_sts_relamp_re_ri_tlg_turn_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlmr_rear_lamp_sts_relamp_re_ri_tlg_turn_indcr_sts_is_in_range(uint8_t value);

/**
 * Pack message CCU_CompPwr_Req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ccu_comp_pwr_req_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ccu_comp_pwr_req_t *src_p,
    size_t size);

/**
 * Unpack message CCU_CompPwr_Req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ccu_comp_pwr_req_unpack(
    struct CanI1_noNM_ccu_comp_pwr_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CCU_CompPwr_Req.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ccu_comp_pwr_req_init(struct CanI1_noNM_ccu_comp_pwr_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_comp_pwr_req_ccsf_ags_open_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_comp_pwr_req_ccsf_ags_open_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_comp_pwr_req_ccsf_ags_open_req_is_in_range(uint8_t value);

/**
 * Pack message CCU_TemperatureFbk.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ccu_temperature_fbk_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ccu_temperature_fbk_t *src_p,
    size_t size);

/**
 * Unpack message CCU_TemperatureFbk.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ccu_temperature_fbk_unpack(
    struct CanI1_noNM_ccu_temperature_fbk_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CCU_TemperatureFbk.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ccu_temperature_fbk_init(struct CanI1_noNM_ccu_temperature_fbk_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_temperature_fbk_crc_ccu_temperature_fbk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_temperature_fbk_crc_ccu_temperature_fbk_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_temperature_fbk_crc_ccu_temperature_fbk_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_temperature_fbk_alv_ctr_ccu_temperature_fbk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_temperature_fbk_alv_ctr_ccu_temperature_fbk_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_temperature_fbk_alv_ctr_ccu_temperature_fbk_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_temperature_fbk_caclh_amb_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_temperature_fbk_caclh_amb_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_temperature_fbk_caclh_amb_t_is_in_range(uint8_t value);

/**
 * Pack message ZCUF_RlhsRainHumidity_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_zcuf_rlhs_rain_humidity_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_zcuf_rlhs_rain_humidity_info_t *src_p,
    size_t size);

/**
 * Unpack message ZCUF_RlhsRainHumidity_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_zcuf_rlhs_rain_humidity_info_unpack(
    struct CanI1_noNM_zcuf_rlhs_rain_humidity_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ZCUF_RlhsRainHumidity_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_zcuf_rlhs_rain_humidity_info_init(struct CanI1_noNM_zcuf_rlhs_rain_humidity_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_rlhs_rain_humidity_info_crc_zcuf_rlhs_rain_humidity_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_rlhs_rain_humidity_info_crc_zcuf_rlhs_rain_humidity_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_rlhs_rain_humidity_info_crc_zcuf_rlhs_rain_humidity_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_rlhs_rain_humidity_info_alv_ctr_zcuf_rlhs_rain_humidity_inf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_rlhs_rain_humidity_info_alv_ctr_zcuf_rlhs_rain_humidity_inf_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_rlhs_rain_humidity_info_alv_ctr_zcuf_rlhs_rain_humidity_inf_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_rlhs_rain_humidity_info_rlhs_rain_fall_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_rlhs_rain_humidity_info_rlhs_rain_fall_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_rlhs_rain_humidity_info_rlhs_rain_fall_sts_is_in_range(uint8_t value);

/**
 * Pack message ADAS_Rvc_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_adas_rvc_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_adas_rvc_info_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_Rvc_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_adas_rvc_info_unpack(
    struct CanI1_noNM_adas_rvc_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_Rvc_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_adas_rvc_info_init(struct CanI1_noNM_adas_rvc_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_adas_rvc_info_crc_adas_rvc_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_adas_rvc_info_crc_adas_rvc_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_adas_rvc_info_crc_adas_rvc_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_adas_rvc_info_alv_ctr_adas_rvc_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_adas_rvc_info_alv_ctr_adas_rvc_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_adas_rvc_info_alv_ctr_adas_rvc_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_adas_rvc_info_rvc_re_blind_spot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_adas_rvc_info_rvc_re_blind_spot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_adas_rvc_info_rvc_re_blind_spot_sts_is_in_range(uint8_t value);

/**
 * Pack message IVI_Ept_Feature_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_ept_feature_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_ept_feature_info_t *src_p,
    size_t size);

/**
 * Unpack message IVI_Ept_Feature_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_ept_feature_info_unpack(
    struct CanI1_noNM_ivi_ept_feature_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_Ept_Feature_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_ept_feature_info_init(struct CanI1_noNM_ivi_ept_feature_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_ivi_acchr_chrggun_unlck_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_ivi_acchr_chrggun_unlck_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_ivi_acchr_chrggun_unlck_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_acchg_ivi_chg_stop_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_acchg_ivi_chg_stop_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_acchg_ivi_chg_stop_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_ept_feature_info_acchg_chrgn_sdle_ti_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_acchg_chrgn_sdle_ti_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_acchg_chrgn_sdle_ti_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_ept_feature_info_acchg_ivi_max_chg_i_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_acchg_ivi_max_chg_i_lim_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_acchg_ivi_max_chg_i_lim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_acchg_peak_hour_mngt_ena_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_acchg_peak_hour_mngt_ena_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_acchg_peak_hour_mngt_ena_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_acchg_ivi_ena_sdle_chrgn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_acchg_ivi_ena_sdle_chrgn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_acchg_ivi_ena_sdle_chrgn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_ept_feature_info_acchg_ivi_tgt_chg_soc_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_acchg_ivi_tgt_chg_soc_lvl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_acchg_ivi_tgt_chg_soc_lvl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_awd_whl_drv_mode_seln_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_awd_whl_drv_mode_seln_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_awd_whl_drv_mode_seln_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_eshift_tow_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_eshift_tow_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_eshift_tow_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_drvmc_valet_mode_acvn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_drvmc_valet_mode_acvn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_drvmc_valet_mode_acvn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_drvmc_wash_mode_acvn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_drvmc_wash_mode_acvn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_drvmc_wash_mode_acvn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_ept_feature_info_dtqmt_srv_mode_spd_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_dtqmt_srv_mode_spd_lim_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_dtqmt_srv_mode_spd_lim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_drvmc_showroom_mode_acvn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_drvmc_showroom_mode_acvn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_drvmc_showroom_mode_acvn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_dtqmt_srv_spd_ovrr_ena_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_dtqmt_srv_spd_ovrr_ena_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_dtqmt_srv_spd_ovrr_ena_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_drvmc_trspt_mode_acvn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_drvmc_trspt_mode_acvn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_drvmc_trspt_mode_acvn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_ept_feature_info_dtqmt_valet_mode_spd_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_dtqmt_valet_mode_spd_lim_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_dtqmt_valet_mode_spd_lim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_drvmc_drv_mode_seln_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_drvmc_drv_mode_seln_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_drvmc_drv_mode_seln_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_ept_feature_info_cregb_regen_lvl_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_ept_feature_info_cregb_regen_lvl_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_ept_feature_info_cregb_regen_lvl_req_is_in_range(uint8_t value);

/**
 * Pack message ZCUR_IVI_Sts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_zcur_ivi_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_zcur_ivi_sts_t *src_p,
    size_t size);

/**
 * Unpack message ZCUR_IVI_Sts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_zcur_ivi_sts_unpack(
    struct CanI1_noNM_zcur_ivi_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ZCUR_IVI_Sts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_zcur_ivi_sts_init(struct CanI1_noNM_zcur_ivi_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_zcur_ivi_sts_crc_zcur_ivi_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_crc_zcur_ivi_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_crc_zcur_ivi_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_alv_ctr_zcur_ivi_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_alv_ctr_zcur_ivi_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_alv_ctr_zcur_ivi_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_acttg_tail_gate_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_acttg_tail_gate_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_acttg_tail_gate_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_acttg_tail_gate_nmlzn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_acttg_tail_gate_nmlzn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_acttg_tail_gate_nmlzn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_acttg_tail_gate_ajar_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_acttg_tail_gate_ajar_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_acttg_tail_gate_ajar_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_acttg_act_posn_ag_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_acttg_act_posn_ag_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_acttg_act_posn_ag_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_le_ventn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_le_ventn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_le_ventn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_ri_ventn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_ri_ventn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_ri_ventn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_le_ventn_cshn_fan_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_le_ventn_cshn_fan_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_le_ventn_cshn_fan_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_le_ventn_squb_fan_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_le_ventn_squb_fan_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_le_ventn_squb_fan_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_ri_ventn_cshn_fan_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_ri_ventn_cshn_fan_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_ri_ventn_cshn_fan_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_ri_ventn_squb_fan_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_ri_ventn_squb_fan_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_seat_cfmt_re_ri_ventn_squb_fan_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_chrgr_port_lock_unlck_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_chrgr_port_lock_unlck_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_chrgr_port_lock_unlck_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_chrgr_port_ajar_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_chrgr_port_ajar_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_chrgr_port_ajar_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_relamp_ri_lice_plate_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_relamp_ri_lice_plate_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_relamp_ri_lice_plate_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_relamp_le_lice_plate_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_relamp_le_lice_plate_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_relamp_le_lice_plate_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_relamp_fog_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_relamp_fog_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_relamp_fog_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_relamp_chmsl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_relamp_chmsl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_relamp_chmsl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_ivi_sts_relamp_rev_lmp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_ivi_sts_relamp_rev_lmp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_ivi_sts_relamp_rev_lmp_sts_is_in_range(uint8_t value);

/**
 * Pack message CCU_FaultSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ccu_fault_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ccu_fault_sts_t *src_p,
    size_t size);

/**
 * Unpack message CCU_FaultSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ccu_fault_sts_unpack(
    struct CanI1_noNM_ccu_fault_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CCU_FaultSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ccu_fault_sts_init(struct CanI1_noNM_ccu_fault_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_fault_sts_crc_ccu_fault_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_fault_sts_crc_ccu_fault_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_fault_sts_crc_ccu_fault_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_fault_sts_alv_ctr_ccu_fault_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_fault_sts_alv_ctr_ccu_fault_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_fault_sts_alv_ctr_ccu_fault_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_fault_sts_ccsf_frnt_blowr_flt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_fault_sts_ccsf_frnt_blowr_flt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_fault_sts_ccsf_frnt_blowr_flt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_fault_sts_ccsr_re_blowr_flt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_fault_sts_ccsr_re_blowr_flt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_fault_sts_ccsr_re_blowr_flt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_fault_sts_ccsf_ioniser_flt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_fault_sts_ccsf_ioniser_flt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_fault_sts_ccsf_ioniser_flt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_fault_sts_ccsf_fragn_conn_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_fault_sts_ccsf_fragn_conn_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_fault_sts_ccsf_fragn_conn_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_fault_sts_ccsf_frgrnc_flt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_fault_sts_ccsf_frgrnc_flt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_fault_sts_ccsf_frgrnc_flt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_fault_sts_ccsf_ioniser_conn_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_fault_sts_ccsf_ioniser_conn_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_fault_sts_ccsf_ioniser_conn_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_fault_sts_ccsf_demist_flap_flt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_fault_sts_ccsf_demist_flap_flt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_fault_sts_ccsf_demist_flap_flt_sts_is_in_range(uint8_t value);

/**
 * Pack message CCU_ClimSys_Sts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ccu_clim_sys_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ccu_clim_sys_sts_t *src_p,
    size_t size);

/**
 * Unpack message CCU_ClimSys_Sts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ccu_clim_sys_sts_unpack(
    struct CanI1_noNM_ccu_clim_sys_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CCU_ClimSys_Sts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ccu_clim_sys_sts_init(struct CanI1_noNM_ccu_clim_sys_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_crc_ccu_clim_sys_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_crc_ccu_clim_sys_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_crc_ccu_clim_sys_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_alv_ctr_ccu_clim_sys_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_alv_ctr_ccu_clim_sys_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_alv_ctr_ccu_clim_sys_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsf_air_mode_seln_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsf_air_mode_seln_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsf_air_mode_seln_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsf_frnt_blowr_lvl_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsf_frnt_blowr_lvl_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsf_frnt_blowr_lvl_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsf_ioniser_on_off_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsf_ioniser_on_off_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsf_ioniser_on_off_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsf_drvr_demist_rcmn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsf_drvr_demist_rcmn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsf_drvr_demist_rcmn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsr_re_blowr_lvl_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsr_re_blowr_lvl_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsr_re_blowr_lvl_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsf_rcl_flap_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsf_rcl_flap_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsf_rcl_flap_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsf_co2_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsf_co2_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsf_co2_lvl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsf_cen_le_ven_dir_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsf_cen_le_ven_dir_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsf_cen_le_ven_dir_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsf_cen_ri_ven_dir_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsf_cen_ri_ven_dir_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsf_cen_ri_ven_dir_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsf_air_qly_idx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsf_air_qly_idx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsf_air_qly_idx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_sys_sts_ccsf_rcl_mod_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_sys_sts_ccsf_rcl_mod_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_sys_sts_ccsf_rcl_mod_fb_is_in_range(uint8_t value);

/**
 * Pack message CCU_AcOpMode_Sts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ccu_ac_op_mode_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ccu_ac_op_mode_sts_t *src_p,
    size_t size);

/**
 * Unpack message CCU_AcOpMode_Sts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ccu_ac_op_mode_sts_unpack(
    struct CanI1_noNM_ccu_ac_op_mode_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CCU_AcOpMode_Sts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ccu_ac_op_mode_sts_init(struct CanI1_noNM_ccu_ac_op_mode_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_ac_op_mode_sts_crc_ccu_ac_op_mode_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_ac_op_mode_sts_crc_ccu_ac_op_mode_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_ac_op_mode_sts_crc_ccu_ac_op_mode_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_ac_op_mode_sts_alv_ctr_ccu_ac_op_mode_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_ac_op_mode_sts_alv_ctr_ccu_ac_op_mode_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_ac_op_mode_sts_alv_ctr_ccu_ac_op_mode_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_ac_op_mode_sts_ccsr_halo_t_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_ac_op_mode_sts_ccsr_halo_t_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_ac_op_mode_sts_ccsr_halo_t_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_ac_op_mode_sts_ccsf_ac_auto_mode_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_ac_op_mode_sts_ccsf_ac_auto_mode_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_ac_op_mode_sts_ccsf_ac_auto_mode_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_ac_op_mode_sts_caclh_ac_low_pwr_mode_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_ac_op_mode_sts_caclh_ac_low_pwr_mode_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_ac_op_mode_sts_caclh_ac_low_pwr_mode_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_ac_op_mode_sts_ccsf_demist_defrst_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_ac_op_mode_sts_ccsf_demist_defrst_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_ac_op_mode_sts_ccsf_demist_defrst_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_ac_op_mode_sts_ccsf_frnt_ac_on_off_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_ac_op_mode_sts_ccsf_frnt_ac_on_off_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_ac_op_mode_sts_ccsf_frnt_ac_on_off_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_ac_op_mode_sts_caclh_frnt_ac_op_mode_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_ac_op_mode_sts_caclh_frnt_ac_op_mode_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_ac_op_mode_sts_caclh_frnt_ac_op_mode_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_ac_op_mode_sts_caclh_re_ac_op_mode_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_ac_op_mode_sts_caclh_re_ac_op_mode_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_ac_op_mode_sts_caclh_re_ac_op_mode_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_ac_op_mode_sts_ccsr_re_ac_on_off_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_ac_op_mode_sts_ccsr_re_ac_on_off_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_ac_op_mode_sts_ccsr_re_ac_on_off_sts_is_in_range(uint8_t value);

/**
 * Pack message CCU_ClimFrgrnc_Sts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ccu_clim_frgrnc_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ccu_clim_frgrnc_sts_t *src_p,
    size_t size);

/**
 * Unpack message CCU_ClimFrgrnc_Sts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ccu_clim_frgrnc_sts_unpack(
    struct CanI1_noNM_ccu_clim_frgrnc_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CCU_ClimFrgrnc_Sts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ccu_clim_frgrnc_sts_init(struct CanI1_noNM_ccu_clim_frgrnc_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_frgrnc_sts_crc_ccu_clim_frgrnc_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_frgrnc_sts_crc_ccu_clim_frgrnc_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_frgrnc_sts_crc_ccu_clim_frgrnc_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_frgrnc_sts_alv_ctr_ccu_clim_frgrnc_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_frgrnc_sts_alv_ctr_ccu_clim_frgrnc_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_frgrnc_sts_alv_ctr_ccu_clim_frgrnc_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc3level_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc3level_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc3level_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc_inten_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc_inten_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc_inten_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc_on_off_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc_on_off_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc_on_off_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc1level_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc1level_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc1level_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc_seln_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc_seln_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc_seln_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc2level_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc2level_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_clim_frgrnc_sts_ccsf_frgrnc2level_sts_is_in_range(uint16_t value);

/**
 * Pack message PSMD_SeatAdjustment_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_psmd_seat_adjustment_status_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_psmd_seat_adjustment_status_t *src_p,
    size_t size);

/**
 * Unpack message PSMD_SeatAdjustment_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_psmd_seat_adjustment_status_unpack(
    struct CanI1_noNM_psmd_seat_adjustment_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PSMD_SeatAdjustment_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_psmd_seat_adjustment_status_init(struct CanI1_noNM_psmd_seat_adjustment_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_adjustment_status_crc_psmd_seat_adjustment_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_adjustment_status_crc_psmd_seat_adjustment_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_adjustment_status_crc_psmd_seat_adjustment_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_adjustment_status_alv_ctr_psmd_seat_adjmt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_adjustment_status_alv_ctr_psmd_seat_adjmt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_adjustment_status_alv_ctr_psmd_seat_adjmt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_lum_in_out_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_lum_in_out_posn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_lum_in_out_posn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_lum_up_dwn_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_lum_up_dwn_posn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_lum_up_dwn_posn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_lum_sys_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_lum_sys_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_lum_sys_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_hei_up_dwn_mot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_hei_up_dwn_mot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_hei_up_dwn_mot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_recl_up_dwn_mot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_recl_up_dwn_mot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_recl_up_dwn_mot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_adjmt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_adjmt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_adjmt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_frnt_back_mot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_frnt_back_mot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_frnt_back_mot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_tilt_up_dwn_mot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_tilt_up_dwn_mot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_adjustment_status_seat_adjmt_drv_tilt_up_dwn_mot_sts_is_in_range(uint8_t value);

/**
 * Pack message PSMP_SeatAdjustment_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_psmp_seat_adjustment_status_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_psmp_seat_adjustment_status_t *src_p,
    size_t size);

/**
 * Unpack message PSMP_SeatAdjustment_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_psmp_seat_adjustment_status_unpack(
    struct CanI1_noNM_psmp_seat_adjustment_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PSMP_SeatAdjustment_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_psmp_seat_adjustment_status_init(struct CanI1_noNM_psmp_seat_adjustment_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_adjustment_status_crc_psmp_seat_adjustment_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_adjustment_status_crc_psmp_seat_adjustment_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_adjustment_status_crc_psmp_seat_adjustment_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_adjustment_status_alv_ctr_psmp_seat_adjmt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_adjustment_status_alv_ctr_psmp_seat_adjmt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_adjustment_status_alv_ctr_psmp_seat_adjmt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_lum_in_out_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_lum_in_out_posn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_lum_in_out_posn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_lum_up_down_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_lum_up_down_posn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_lum_up_down_posn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_lum_sys_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_lum_sys_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_lum_sys_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_recl_up_dwn_mot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_recl_up_dwn_mot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_recl_up_dwn_mot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_hei_up_dwn_mot_sts__encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_hei_up_dwn_mot_sts__decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_hei_up_dwn_mot_sts__is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_adjmt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_adjmt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_adjmt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_fowd_bawd_mot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_fowd_bawd_mot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_fowd_bawd_mot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_tilt_up_dwn_mot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_tilt_up_dwn_mot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_adjustment_status_seat_adjmt_pass_tilt_up_dwn_mot_sts_is_in_range(uint8_t value);

/**
 * Pack message PSMD_SeatPos_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_psmd_seat_pos_status_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_psmd_seat_pos_status_t *src_p,
    size_t size);

/**
 * Unpack message PSMD_SeatPos_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_psmd_seat_pos_status_unpack(
    struct CanI1_noNM_psmd_seat_pos_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PSMD_SeatPos_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_psmd_seat_pos_status_init(struct CanI1_noNM_psmd_seat_pos_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_pos_status_crc_psmd_seat_pos_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_pos_status_crc_psmd_seat_pos_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_pos_status_crc_psmd_seat_pos_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_pos_status_alv_ctr_psmd_seat_pos_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_pos_status_alv_ctr_psmd_seat_pos_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_pos_status_alv_ctr_psmd_seat_pos_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_fowd_bawd_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_fowd_bawd_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_fowd_bawd_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_hei_up_dwn_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_hei_up_dwn_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_hei_up_dwn_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_recl_up_dwn_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_recl_up_dwn_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_recl_up_dwn_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_tilt_up_dwn_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_tilt_up_dwn_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_pos_status_seat_adjmt_drv_tilt_up_dwn_posn_is_in_range(uint16_t value);

/**
 * Pack message PSMD_SeatCmfrt_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_psmd_seat_cmfrt_status_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_psmd_seat_cmfrt_status_t *src_p,
    size_t size);

/**
 * Unpack message PSMD_SeatCmfrt_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_psmd_seat_cmfrt_status_unpack(
    struct CanI1_noNM_psmd_seat_cmfrt_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PSMD_SeatCmfrt_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_psmd_seat_cmfrt_status_init(struct CanI1_noNM_psmd_seat_cmfrt_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_cmfrt_status_crc_psmd_seat_cmfrt_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_cmfrt_status_crc_psmd_seat_cmfrt_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_cmfrt_status_crc_psmd_seat_cmfrt_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_cmfrt_status_alv_ctr_psmd_seat_cmfrt_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_cmfrt_status_alv_ctr_psmd_seat_cmfrt_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_cmfrt_status_alv_ctr_psmd_seat_cmfrt_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_heatg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_heatg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_heatg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_ventn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_ventn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_ventn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_ventn_cshn_fan_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_ventn_cshn_fan_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_ventn_cshn_fan_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_heatg_back_pad_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_heatg_back_pad_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_heatg_back_pad_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_massg_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_massg_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_massg_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_heatg_cshn_pad_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_heatg_cshn_pad_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_heatg_cshn_pad_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_massg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_massg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_massg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_ventn_squb_fan_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_ventn_squb_fan_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_seat_cmfrt_status_seat_cfmt_drv_ventn_squb_fan_fail_sts_is_in_range(uint8_t value);

/**
 * Pack message PSMP_SeatCmfrt_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_psmp_seat_cmfrt_status_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_psmp_seat_cmfrt_status_t *src_p,
    size_t size);

/**
 * Unpack message PSMP_SeatCmfrt_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_psmp_seat_cmfrt_status_unpack(
    struct CanI1_noNM_psmp_seat_cmfrt_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PSMP_SeatCmfrt_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_psmp_seat_cmfrt_status_init(struct CanI1_noNM_psmp_seat_cmfrt_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_cmfrt_status_crc_psmp_seat_cmfrt_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_cmfrt_status_crc_psmp_seat_cmfrt_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_cmfrt_status_crc_psmp_seat_cmfrt_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_cmfrt_status_alv_ctr_psmp_seat_cmfrt_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_cmfrt_status_alv_ctr_psmp_seat_cmfrt_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_cmfrt_status_alv_ctr_psmp_seat_cmfrt_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_ventn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_ventn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_ventn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_heatg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_heatg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_heatg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_massg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_massg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_massg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_ventn_squb_fan_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_ventn_squb_fan_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_ventn_squb_fan_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_massg_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_massg_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_massg_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_ventn_cshn_fan_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_ventn_cshn_fan_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_ventn_cshn_fan_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_heatg_back_pad_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_heatg_back_pad_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_heatg_back_pad_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_heatg_cshn_pad_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_heatg_cshn_pad_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_cmfrt_status_seat_cfmt_pass_heatg_cshn_pad_fail_sts_is_in_range(uint8_t value);

/**
 * Pack message PSMP_SeatPos_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_psmp_seat_pos_status_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_psmp_seat_pos_status_t *src_p,
    size_t size);

/**
 * Unpack message PSMP_SeatPos_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_psmp_seat_pos_status_unpack(
    struct CanI1_noNM_psmp_seat_pos_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PSMP_SeatPos_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_psmp_seat_pos_status_init(struct CanI1_noNM_psmp_seat_pos_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_pos_status_crc_psmp_seat_pos_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_pos_status_crc_psmp_seat_pos_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_pos_status_crc_psmp_seat_pos_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_seat_pos_status_alv_ctr_psmp_seat_pos_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_pos_status_alv_ctr_psmp_seat_pos_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_pos_status_alv_ctr_psmp_seat_pos_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_fowd_bawd_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_fowd_bawd_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_fowd_bawd_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_hei_up_dwn_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_hei_up_dwn_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_hei_up_dwn_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_recl_up_dwn_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_recl_up_dwn_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_recl_up_dwn_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_tilt_up_dwn_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_tilt_up_dwn_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_seat_pos_status_seat_adjmt_pass_tilt_up_dwn_posn_is_in_range(uint16_t value);

/**
 * Pack message DCMD_ClosureSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_dcmd_closure_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_dcmd_closure_sts_t *src_p,
    size_t size);

/**
 * Unpack message DCMD_ClosureSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_dcmd_closure_sts_unpack(
    struct CanI1_noNM_dcmd_closure_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCMD_ClosureSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_dcmd_closure_sts_init(struct CanI1_noNM_dcmd_closure_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_closure_sts_crc_dcmd_closure_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_closure_sts_crc_dcmd_closure_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_closure_sts_crc_dcmd_closure_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_closure_sts_alv_ctr_dcmd_closure_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_closure_sts_alv_ctr_dcmd_closure_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_closure_sts_alv_ctr_dcmd_closure_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_closure_sts_pwd_drvr_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_closure_sts_pwd_drvr_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_closure_sts_pwd_drvr_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_closure_sts_cen_lock_drvr_door_lock_unlck_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_closure_sts_cen_lock_drvr_door_lock_unlck_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_closure_sts_cen_lock_drvr_door_lock_unlck_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_closure_sts_pwd_drvr_door_nmlzn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_closure_sts_pwd_drvr_door_nmlzn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_closure_sts_pwd_drvr_door_nmlzn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_closure_sts_cen_lock_drvr_door_ajar_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_closure_sts_cen_lock_drvr_door_ajar_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_closure_sts_cen_lock_drvr_door_ajar_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_closure_sts_pwind_drv_wndw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_closure_sts_pwind_drv_wndw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_closure_sts_pwind_drv_wndw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_closure_sts_pwd_drv_door_act_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_closure_sts_pwd_drv_door_act_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_closure_sts_pwd_drv_door_act_pos_is_in_range(uint8_t value);

/**
 * Pack message IVI_PssngrSeatStoredProfile.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_pssngr_seat_stored_profile_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_pssngr_seat_stored_profile_t *src_p,
    size_t size);

/**
 * Unpack message IVI_PssngrSeatStoredProfile.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_pssngr_seat_stored_profile_unpack(
    struct CanI1_noNM_ivi_pssngr_seat_stored_profile_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_PssngrSeatStoredProfile.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_pssngr_seat_stored_profile_init(struct CanI1_noNM_ivi_pssngr_seat_stored_profile_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_hei_stored_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_hei_stored_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_hei_stored_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_recl_stored_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_recl_stored_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_recl_stored_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_tilt_stored_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_tilt_stored_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_tilt_stored_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_fowd_bawd_stored_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_fowd_bawd_stored_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_pssngr_seat_stored_profile_seat_adjmt_pass_fowd_bawd_stored_posn_is_in_range(uint16_t value);

/**
 * Pack message VCU_Sts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_vcu_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_vcu_sts_t *src_p,
    size_t size);

/**
 * Unpack message VCU_Sts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_vcu_sts_unpack(
    struct CanI1_noNM_vcu_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_Sts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_vcu_sts_init(struct CanI1_noNM_vcu_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_sts_crc_vcu_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_sts_crc_vcu_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_sts_crc_vcu_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_sts_alv_ctr_vcu_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_sts_alv_ctr_vcu_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_sts_alv_ctr_vcu_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_sts_engmt_limphm_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_sts_engmt_limphm_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_sts_engmt_limphm_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_sts_fschg_chg_authen_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_sts_fschg_chg_authen_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_sts_fschg_chg_authen_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_sts_acchg_chg_authn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_sts_acchg_chg_authn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_sts_acchg_chg_authn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_sts_thmgt_therm_flt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_sts_thmgt_therm_flt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_sts_thmgt_therm_flt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_sts_cregb_coast_rgn_tq_pctg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_sts_cregb_coast_rgn_tq_pctg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_sts_cregb_coast_rgn_tq_pctg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_sts_hfdia_remd_actn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_sts_hfdia_remd_actn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_sts_hfdia_remd_actn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_sts_hvsco_hv_sys_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_sts_hvsco_hv_sys_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_sts_hvsco_hv_sys_sts_is_in_range(uint8_t value);

/**
 * Pack message DCMP_ClosureSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_dcmp_closure_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_dcmp_closure_sts_t *src_p,
    size_t size);

/**
 * Unpack message DCMP_ClosureSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_dcmp_closure_sts_unpack(
    struct CanI1_noNM_dcmp_closure_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCMP_ClosureSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_dcmp_closure_sts_init(struct CanI1_noNM_dcmp_closure_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_closure_sts_crc_dcmp_closure_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_closure_sts_crc_dcmp_closure_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_closure_sts_crc_dcmp_closure_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_closure_sts_alv_ctr_dcmp_closure_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_closure_sts_alv_ctr_dcmp_closure_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_closure_sts_alv_ctr_dcmp_closure_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_closure_sts_cen_lock_pass_door_ajar_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_closure_sts_cen_lock_pass_door_ajar_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_closure_sts_cen_lock_pass_door_ajar_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_closure_sts_cen_lock_pass_door_lock_unlck_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_closure_sts_cen_lock_pass_door_lock_unlck_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_closure_sts_cen_lock_pass_door_lock_unlck_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_closure_sts_pwd_pass_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_closure_sts_pwd_pass_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_closure_sts_pwd_pass_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_closure_sts_pwd_pass_door_act_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_closure_sts_pwd_pass_door_act_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_closure_sts_pwd_pass_door_act_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_closure_sts_pwind_pass_wndw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_closure_sts_pwind_pass_wndw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_closure_sts_pwind_pass_wndw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_closure_sts_pwd_pass_door_nmlzn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_closure_sts_pwd_pass_door_nmlzn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_closure_sts_pwd_pass_door_nmlzn_sts_is_in_range(uint8_t value);

/**
 * Pack message DCMRR_ClosureSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_dcmrr_closure_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_dcmrr_closure_sts_t *src_p,
    size_t size);

/**
 * Unpack message DCMRR_ClosureSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_dcmrr_closure_sts_unpack(
    struct CanI1_noNM_dcmrr_closure_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCMRR_ClosureSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_dcmrr_closure_sts_init(struct CanI1_noNM_dcmrr_closure_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrr_closure_sts_crc_dcmrr_closure_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrr_closure_sts_crc_dcmrr_closure_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrr_closure_sts_crc_dcmrr_closure_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrr_closure_sts_alv_ctr_dcmrr_closure_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrr_closure_sts_alv_ctr_dcmrr_closure_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrr_closure_sts_alv_ctr_dcmrr_closure_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrr_closure_sts_cen_lock_re_ri_door_lock_unlck_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrr_closure_sts_cen_lock_re_ri_door_lock_unlck_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrr_closure_sts_cen_lock_re_ri_door_lock_unlck_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrr_closure_sts_pwind_re_ri_wndw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrr_closure_sts_pwind_re_ri_wndw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrr_closure_sts_pwind_re_ri_wndw_sts_is_in_range(uint8_t value);

/**
 * Pack message DCMRL_ClosureSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_dcmrl_closure_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_dcmrl_closure_sts_t *src_p,
    size_t size);

/**
 * Unpack message DCMRL_ClosureSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_dcmrl_closure_sts_unpack(
    struct CanI1_noNM_dcmrl_closure_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCMRL_ClosureSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_dcmrl_closure_sts_init(struct CanI1_noNM_dcmrl_closure_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrl_closure_sts_crc_dcmrl_closure_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrl_closure_sts_crc_dcmrl_closure_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrl_closure_sts_crc_dcmrl_closure_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrl_closure_sts_alv_ctr_dcmrl_closure_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrl_closure_sts_alv_ctr_dcmrl_closure_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrl_closure_sts_alv_ctr_dcmrl_closure_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrl_closure_sts_cen_lock_re_le_door_lock_unlck_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrl_closure_sts_cen_lock_re_le_door_lock_unlck_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrl_closure_sts_cen_lock_re_le_door_lock_unlck_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrl_closure_sts_cen_lock_re_le_door_ajar_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrl_closure_sts_cen_lock_re_le_door_ajar_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrl_closure_sts_cen_lock_re_le_door_ajar_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrl_closure_sts_pwind_re_le_wndw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrl_closure_sts_pwind_re_le_wndw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrl_closure_sts_pwind_re_le_wndw_sts_is_in_range(uint8_t value);

/**
 * Pack message ZCUF_WiperSts.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_zcuf_wiper_sts_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_zcuf_wiper_sts_t *src_p,
    size_t size);

/**
 * Unpack message ZCUF_WiperSts.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_zcuf_wiper_sts_unpack(
    struct CanI1_noNM_zcuf_wiper_sts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ZCUF_WiperSts.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_zcuf_wiper_sts_init(struct CanI1_noNM_zcuf_wiper_sts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_zcuf_wiper_sts_crc_zcuf_wiper_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_crc_zcuf_wiper_sts_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_crc_zcuf_wiper_sts_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_alv_ctr_zcuf_wiper_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_alv_ctr_zcuf_wiper_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_alv_ctr_zcuf_wiper_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_park_pos_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_park_pos_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_park_pos_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_ser_pos_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_ser_pos_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_ser_pos_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_park_pos_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_park_pos_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_park_pos_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_ser_pos_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_ser_pos_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_ser_pos_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_wipr_wshr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_wipr_wshr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_wipr_wshr_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_wipr_wshr_fluid_level_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_wipr_wshr_fluid_level_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_wipr_wshr_fluid_level_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_faild_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_faild_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_wipr_frnt_ri_faild_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_faild_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_faild_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_wiper_sts_wipr_frnt_le_faild_sts_is_in_range(uint8_t value);

/**
 * Pack message ZCUF_ClimSttgTemperatureFbk.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_zcuf_clim_sttg_temperature_fbk_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_zcuf_clim_sttg_temperature_fbk_t *src_p,
    size_t size);

/**
 * Unpack message ZCUF_ClimSttgTemperatureFbk.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_zcuf_clim_sttg_temperature_fbk_unpack(
    struct CanI1_noNM_zcuf_clim_sttg_temperature_fbk_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ZCUF_ClimSttgTemperatureFbk.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_zcuf_clim_sttg_temperature_fbk_init(struct CanI1_noNM_zcuf_clim_sttg_temperature_fbk_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_drvr_side_set_t_val_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_drvr_side_set_t_val_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_drvr_side_set_t_val_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_pass_side_set_t_val_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_pass_side_set_t_val_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_pass_side_set_t_val_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_re_ri_side_set_t_val_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_re_ri_side_set_t_val_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_re_ri_side_set_t_val_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_re_le_side_set_t_val_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_re_le_side_set_t_val_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_re_le_side_set_t_val_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_halo_set_t_val_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_halo_set_t_val_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_clim_sttg_temperature_fbk_ccs_halo_set_t_val_sts_is_in_range(uint8_t value);

/**
 * Pack message ZCUF_CenLock_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_zcuf_cen_lock_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_zcuf_cen_lock_info_t *src_p,
    size_t size);

/**
 * Unpack message ZCUF_CenLock_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_zcuf_cen_lock_info_unpack(
    struct CanI1_noNM_zcuf_cen_lock_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ZCUF_CenLock_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_zcuf_cen_lock_info_init(struct CanI1_noNM_zcuf_cen_lock_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_cen_lock_info_crc_zcuf_cen_lock_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_cen_lock_info_crc_zcuf_cen_lock_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_cen_lock_info_crc_zcuf_cen_lock_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_cen_lock_info_alv_ctr_zcuf_cen_lock_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_cen_lock_info_alv_ctr_zcuf_cen_lock_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_cen_lock_info_alv_ctr_zcuf_cen_lock_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_cen_lock_info_cen_lock_c_app_lock_unlck_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_cen_lock_info_cen_lock_c_app_lock_unlck_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_cen_lock_info_cen_lock_c_app_lock_unlck_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_cen_lock_info_cen_lock_lock_unlck_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_cen_lock_info_cen_lock_lock_unlck_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_cen_lock_info_cen_lock_lock_unlck_sts_is_in_range(uint8_t value);

/**
 * Pack message ACM_ActvTrackingStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_acm_actv_tracking_status_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_acm_actv_tracking_status_t *src_p,
    size_t size);

/**
 * Unpack message ACM_ActvTrackingStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_acm_actv_tracking_status_unpack(
    struct CanI1_noNM_acm_actv_tracking_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACM_ActvTrackingStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_acm_actv_tracking_status_init(struct CanI1_noNM_acm_actv_tracking_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_actv_tracking_status_crc_acm_actv_tracking_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_actv_tracking_status_crc_acm_actv_tracking_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_actv_tracking_status_crc_acm_actv_tracking_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_actv_tracking_status_alv_ctr_acm_actv_tracking_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_actv_tracking_status_alv_ctr_acm_actv_tracking_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_actv_tracking_status_alv_ctr_acm_actv_tracking_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_actv_tracking_status_air_bg_seat_track_pos_pass_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_actv_tracking_status_air_bg_seat_track_pos_pass_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_actv_tracking_status_air_bg_seat_track_pos_pass_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_actv_tracking_status_air_bg_seat_track_pos_drvr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_actv_tracking_status_air_bg_seat_track_pos_drvr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_actv_tracking_status_air_bg_seat_track_pos_drvr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_actv_tracking_status_air_bg_pass_airbg_deac_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_actv_tracking_status_air_bg_pass_airbg_deac_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_actv_tracking_status_air_bg_pass_airbg_deac_sts_is_in_range(uint8_t value);

/**
 * Pack message IVI_DrWndw_Cntr.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_dr_wndw_cntr_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_dr_wndw_cntr_t *src_p,
    size_t size);

/**
 * Unpack message IVI_DrWndw_Cntr.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_dr_wndw_cntr_unpack(
    struct CanI1_noNM_ivi_dr_wndw_cntr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_DrWndw_Cntr.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_dr_wndw_cntr_init(struct CanI1_noNM_ivi_dr_wndw_cntr_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_dr_wndw_cntr_crc_ivi_dr_wndw_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_dr_wndw_cntr_crc_ivi_dr_wndw_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_dr_wndw_cntr_crc_ivi_dr_wndw_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_dr_wndw_cntr_alv_ctr_ivi_dr_wndw_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_dr_wndw_cntr_alv_ctr_ivi_dr_wndw_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_dr_wndw_cntr_alv_ctr_ivi_dr_wndw_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_dr_wndw_cntr_pwd_drv_door_usr_ag_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_dr_wndw_cntr_pwd_drv_door_usr_ag_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_dr_wndw_cntr_pwd_drv_door_usr_ag_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_dr_wndw_cntr_pwd_pass_door_usr_ag_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_dr_wndw_cntr_pwd_pass_door_usr_ag_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_dr_wndw_cntr_pwd_pass_door_usr_ag_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_dr_wndw_cntr_cen_lock_audio_visual_cfg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_dr_wndw_cntr_cen_lock_audio_visual_cfg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_dr_wndw_cntr_cen_lock_audio_visual_cfg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_dr_wndw_cntr_pwr_sd_st_le_extnd_rtract_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_dr_wndw_cntr_pwr_sd_st_le_extnd_rtract_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_dr_wndw_cntr_pwr_sd_st_le_extnd_rtract_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_dr_wndw_cntr_pwr_sd_st_ri_extnd_rtract_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_dr_wndw_cntr_pwr_sd_st_ri_extnd_rtract_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_dr_wndw_cntr_pwr_sd_st_ri_extnd_rtract_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_dr_wndw_cntr_pwind_wndw_up_dwn_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_dr_wndw_cntr_pwind_wndw_up_dwn_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_dr_wndw_cntr_pwind_wndw_up_dwn_usr_req_is_in_range(uint8_t value);

/**
 * Pack message MFS_SwitchReq.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_mfs_switch_req_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_mfs_switch_req_t *src_p,
    size_t size);

/**
 * Unpack message MFS_SwitchReq.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_mfs_switch_req_unpack(
    struct CanI1_noNM_mfs_switch_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MFS_SwitchReq.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_mfs_switch_req_init(struct CanI1_noNM_mfs_switch_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_crc_mfs_switch_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_crc_mfs_switch_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_crc_mfs_switch_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_alv_ctr_mfs_switch_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_alv_ctr_mfs_switch_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_alv_ctr_mfs_switch_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_adas_scrl_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_adas_scrl_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_adas_scrl_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_scrol_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_scrol_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_scrol_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_rim_swt_wiper_acvn_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_rim_swt_wiper_acvn_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_rim_swt_wiper_acvn_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_wiper_menu_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_wiper_menu_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_wiper_menu_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_padd_swt_favo_sel_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_padd_swt_favo_sel_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_padd_swt_favo_sel_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_padd_swt_gear_shift_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_padd_swt_gear_shift_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_padd_swt_gear_shift_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_adas_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_adas_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_adas_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_voice_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_voice_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_voice_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_rim_swt_hi_beam_acvn_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_rim_swt_hi_beam_acvn_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_rim_swt_hi_beam_acvn_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_drv_mod_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_drv_mod_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_drv_mod_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_park_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_park_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_park_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_switch_req_mfsw_favo_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_switch_req_mfsw_favo_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_switch_req_mfsw_favo_swt_req_is_in_range(uint8_t value);

/**
 * Pack message IVI_DrvrSeatStoredProfile.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_drvr_seat_stored_profile_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_drvr_seat_stored_profile_t *src_p,
    size_t size);

/**
 * Unpack message IVI_DrvrSeatStoredProfile.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_drvr_seat_stored_profile_unpack(
    struct CanI1_noNM_ivi_drvr_seat_stored_profile_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_DrvrSeatStoredProfile.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_drvr_seat_stored_profile_init(struct CanI1_noNM_ivi_drvr_seat_stored_profile_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_drvr_seat_stored_profile_crc_ivi_drvr_seat_stored_profile_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_drvr_seat_stored_profile_crc_ivi_drvr_seat_stored_profile_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_drvr_seat_stored_profile_crc_ivi_drvr_seat_stored_profile_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_drvr_seat_stored_profile_alv_ctr_ivi_drvr_seat_stored_profile_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_drvr_seat_stored_profile_alv_ctr_ivi_drvr_seat_stored_profile_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_drvr_seat_stored_profile_alv_ctr_ivi_drvr_seat_stored_profile_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_fowd_bawd_stored_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_fowd_bawd_stored_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_fowd_bawd_stored_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_reclnr_stored_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_reclnr_stored_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_reclnr_stored_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_hei_stored_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_hei_stored_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_hei_stored_posn_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_tilt_stored_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_tilt_stored_posn_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_drvr_seat_stored_profile_seat_adjmt_drv_tilt_stored_posn_is_in_range(uint16_t value);

/**
 * Pack message TBOX_DrvrId_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_tbox_drvr_id_info_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_tbox_drvr_id_info_t *src_p,
    size_t size);

/**
 * Unpack message TBOX_DrvrId_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_tbox_drvr_id_info_unpack(
    struct CanI1_noNM_tbox_drvr_id_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TBOX_DrvrId_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_tbox_drvr_id_info_init(struct CanI1_noNM_tbox_drvr_id_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_drvr_id_info_driver_id_byte16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_drvr_id_info_driver_id_byte16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_drvr_id_info_driver_id_byte16_is_in_range(uint8_t value);

/**
 * Pack message IVI_HvacCntrl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_hvac_cntrl_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_hvac_cntrl_t *src_p,
    size_t size);

/**
 * Unpack message IVI_HvacCntrl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_hvac_cntrl_unpack(
    struct CanI1_noNM_ivi_hvac_cntrl_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_HvacCntrl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_hvac_cntrl_init(struct CanI1_noNM_ivi_hvac_cntrl_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_cntrl_crc_ivi_hvac_cntrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_cntrl_crc_ivi_hvac_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_cntrl_crc_ivi_hvac_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_cntrl_alv_ctr_ivi_hvac_cntrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_cntrl_alv_ctr_ivi_hvac_cntrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_cntrl_alv_ctr_ivi_hvac_cntrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_cntrl_ccsf_vent_op_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_cntrl_ccsf_vent_op_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_cntrl_ccsf_vent_op_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_cntrl_ccs_re_ac_usr_i_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_cntrl_ccs_re_ac_usr_i_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_cntrl_ccs_re_ac_usr_i_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_cntrl_demir_heatg_svmc_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_cntrl_demir_heatg_svmc_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_cntrl_demir_heatg_svmc_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_cntrl_ccs_re_blowr_lv_usrl_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_cntrl_ccs_re_blowr_lv_usrl_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_cntrl_ccs_re_blowr_lv_usrl_req_is_in_range(uint8_t value);

/**
 * Pack message IVI_HvacSwt_Req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_hvac_swt_req_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_hvac_swt_req_t *src_p,
    size_t size);

/**
 * Unpack message IVI_HvacSwt_Req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_hvac_swt_req_unpack(
    struct CanI1_noNM_ivi_hvac_swt_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_HvacSwt_Req.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_hvac_swt_req_init(struct CanI1_noNM_ivi_hvac_swt_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_ac_min_t_usr_btn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_ac_min_t_usr_btn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_ac_min_t_usr_btn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_ac_max_t_usr_btn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_ac_max_t_usr_btn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_ac_max_t_usr_btn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_rcl_on_off_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_rcl_on_off_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_rcl_on_off_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_ac_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_ac_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_ac_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_re_le_t_usr_set_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_re_le_t_usr_set_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_re_le_t_usr_set_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_re_ri_t_usr_i_set_val_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_re_ri_t_usr_i_set_val_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_re_ri_t_usr_i_set_val_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_sync_t_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_sync_t_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_sync_t_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_ac_eco_mode_btn_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_ac_eco_mode_btn_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_ac_eco_mode_btn_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_ac_auto_mod_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_ac_auto_mod_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_ac_auto_mod_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_ioniser_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_ioniser_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_ioniser_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_frgrnc_acvn_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_frgrnc_acvn_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_frgrnc_acvn_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_demist_defrst_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_demist_defrst_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_demist_defrst_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_le_t_usr_set_val_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_le_t_usr_set_val_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_le_t_usr_set_val_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_frgrnc_inten_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_frgrnc_inten_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_frgrnc_inten_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_blowr_lvl_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_blowr_lvl_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_blowr_lvl_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_air_mode_seln_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_air_mode_seln_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_air_mode_seln_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_ri_t_usr_set_val_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_ri_t_usr_set_val_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_frnt_ri_t_usr_set_val_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_clim_prset_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_clim_prset_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_clim_prset_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_frgrnc_slen_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_frgrnc_slen_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_frgrnc_slen_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_hvac_swt_req_ccs_clim_prfl_seln_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_hvac_swt_req_ccs_clim_prfl_seln_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_hvac_swt_req_ccs_clim_prfl_seln_usr_req_is_in_range(uint8_t value);

/**
 * Pack message IVI_UsrBodyCntrl_Req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_usr_body_cntrl_req_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_usr_body_cntrl_req_t *src_p,
    size_t size);

/**
 * Unpack message IVI_UsrBodyCntrl_Req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_usr_body_cntrl_req_unpack(
    struct CanI1_noNM_ivi_usr_body_cntrl_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_UsrBodyCntrl_Req.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_usr_body_cntrl_req_init(struct CanI1_noNM_ivi_usr_body_cntrl_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_usr_body_cntrl_req_crc_ivi_usr_body_cntrl_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_crc_ivi_usr_body_cntrl_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_crc_ivi_usr_body_cntrl_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_alv_ctr_ivi_usr_body_cntrl_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_alv_ctr_ivi_usr_body_cntrl_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_alv_ctr_ivi_usr_body_cntrl_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_chrgr_port_chrg_port_lck_unlck_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_chrgr_port_chrg_port_lck_unlck_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_chrgr_port_chrg_port_lck_unlck_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_demir_fold_unfold_svmc_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_demir_fold_unfold_svmc_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_demir_fold_unfold_svmc_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_demir_fold_unfold_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_demir_fold_unfold_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_demir_fold_unfold_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_demir_heatg_svmc_ena_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_demir_heatg_svmc_ena_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_demir_heatg_svmc_ena_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_acttg_tail_gate_usr_ag_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_acttg_tail_gate_usr_ag_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_acttg_tail_gate_usr_ag_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_acttg_tail_gate_usr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_acttg_tail_gate_usr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_acttg_tail_gate_usr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_ssadl_auto_spd_lock_val_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_ssadl_auto_spd_lock_val_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_ssadl_auto_spd_lock_val_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_ssadl_auto_spd_lock_on_off_typ_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_ssadl_auto_spd_lock_on_off_typ_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_ssadl_auto_spd_lock_on_off_typ_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_relamp_re_fog_li_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_relamp_re_fog_li_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_relamp_re_fog_li_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_hdlamp_lamp_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_hdlamp_lamp_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_hdlamp_lamp_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_hdlamp_auto_mode_cfg_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_hdlamp_auto_mode_cfg_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_hdlamp_auto_mode_cfg_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_hdlamp_follow_me_cfg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_hdlamp_follow_me_cfg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_hdlamp_follow_me_cfg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_wipr_frnt_wipr_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_wipr_frnt_wipr_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_wipr_frnt_wipr_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_wipr_frnt_oper_park_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_wipr_frnt_oper_park_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_wipr_frnt_oper_park_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_body_cntrl_req_wipr_frnt_wipr_srv_pos_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_body_cntrl_req_wipr_frnt_wipr_srv_pos_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_body_cntrl_req_wipr_frnt_wipr_srv_pos_req_is_in_range(uint8_t value);

/**
 * Pack message IVI_UsrChassisCntrl_Req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_usr_chassis_cntrl_req_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_usr_chassis_cntrl_req_t *src_p,
    size_t size);

/**
 * Unpack message IVI_UsrChassisCntrl_Req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_usr_chassis_cntrl_req_unpack(
    struct CanI1_noNM_ivi_usr_chassis_cntrl_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_UsrChassisCntrl_Req.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_usr_chassis_cntrl_req_init(struct CanI1_noNM_ivi_usr_chassis_cntrl_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_usr_chassis_cntrl_req_crc_ivi_usr_chassis_cntrl_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_chassis_cntrl_req_crc_ivi_usr_chassis_cntrl_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_chassis_cntrl_req_crc_ivi_usr_chassis_cntrl_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_chassis_cntrl_req_alv_ctr_ivi_usr_chassis_cntrl_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_chassis_cntrl_req_alv_ctr_ivi_usr_chassis_cntrl_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_chassis_cntrl_req_alv_ctr_ivi_usr_chassis_cntrl_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_chassis_cntrl_req_hdc_swt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_chassis_cntrl_req_hdc_swt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_chassis_cntrl_req_hdc_swt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_chassis_cntrl_req_esc_tcs_swt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_chassis_cntrl_req_esc_tcs_swt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_chassis_cntrl_req_esc_tcs_swt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_chassis_cntrl_req_ivi_ingrs_mode_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_chassis_cntrl_req_ivi_ingrs_mode_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_chassis_cntrl_req_ivi_ingrs_mode_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_chassis_cntrl_req_avh_swt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_chassis_cntrl_req_avh_swt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_chassis_cntrl_req_avh_swt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_chassis_cntrl_req_ivi_susp_hei_adj_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_chassis_cntrl_req_ivi_susp_hei_adj_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_chassis_cntrl_req_ivi_susp_hei_adj_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_chassis_cntrl_req_ivi_srv_mod_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_chassis_cntrl_req_ivi_srv_mod_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_chassis_cntrl_req_ivi_srv_mod_cmd_is_in_range(uint8_t value);

/**
 * Pack message IVI_UsrSeatAdjComfrt_Req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_usr_seat_adj_comfrt_req_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_usr_seat_adj_comfrt_req_t *src_p,
    size_t size);

/**
 * Unpack message IVI_UsrSeatAdjComfrt_Req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_usr_seat_adj_comfrt_req_unpack(
    struct CanI1_noNM_ivi_usr_seat_adj_comfrt_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_UsrSeatAdjComfrt_Req.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_usr_seat_adj_comfrt_req_init(struct CanI1_noNM_ivi_usr_seat_adj_comfrt_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_crc_ivi_usr_seat_adj_comfrt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_crc_ivi_usr_seat_adj_comfrt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_crc_ivi_usr_seat_adj_comfrt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_alv_ctr_ivi_usr_seat_adj_comfrt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_alv_ctr_ivi_usr_seat_adj_comfrt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_alv_ctr_ivi_usr_seat_adj_comfrt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_fowd_bawd_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_fowd_bawd_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_fowd_bawd_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_hei_up_dwn_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_hei_up_dwn_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_hei_up_dwn_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_lum_in_out_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_lum_in_out_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_lum_in_out_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_lum_up_dwn_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_lum_up_dwn_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_lum_up_dwn_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_recl_up_down_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_recl_up_down_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_recl_up_down_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_drv_massg_inten_seln_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_drv_massg_inten_seln_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_drv_massg_inten_seln_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_drv_massg_pat_seln_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_drv_massg_pat_seln_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_drv_massg_pat_seln_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_fowd_bawd_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_fowd_bawd_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_fowd_bawd_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_hei_up_dwn_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_hei_up_dwn_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_hei_up_dwn_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_lum_in_out_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_lum_in_out_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_lum_in_out_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_lum_up_dwn_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_lum_up_dwn_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_lum_up_dwn_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_recl_up_down_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_recl_up_down_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_recl_up_down_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_tilt_up_dwn_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_tilt_up_dwn_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_pass_tilt_up_dwn_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_tilt_up_dwn_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_tilt_up_dwn_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_adjmt_drv_tilt_up_dwn_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_pass_massg_inten_seln_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_pass_massg_inten_seln_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_pass_massg_inten_seln_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_pass_massg_pat_seln_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_pass_massg_pat_seln_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_pass_massg_pat_seln_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_re_le_ventn_spd_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_re_le_ventn_spd_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_re_le_ventn_spd_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_re_ri_ventn_spd_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_re_ri_ventn_spd_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_usr_seat_adj_comfrt_req_seat_cfmt_re_ri_ventn_spd_req_is_in_range(uint8_t value);

/**
 * Pack message IVI_Vehicle_Mode_Ctrl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_vehicle_mode_ctrl_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_vehicle_mode_ctrl_t *src_p,
    size_t size);

/**
 * Unpack message IVI_Vehicle_Mode_Ctrl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_vehicle_mode_ctrl_unpack(
    struct CanI1_noNM_ivi_vehicle_mode_ctrl_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_Vehicle_Mode_Ctrl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_vehicle_mode_ctrl_init(struct CanI1_noNM_ivi_vehicle_mode_ctrl_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ivi_vehicle_mode_ctrl_crc_ivi_vehicle_mode_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_vehicle_mode_ctrl_crc_ivi_vehicle_mode_ctrl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_vehicle_mode_ctrl_crc_ivi_vehicle_mode_ctrl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_vehicle_mode_ctrl_alv_ctr_ivi_vehicle_mode_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_vehicle_mode_ctrl_alv_ctr_ivi_vehicle_mode_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_vehicle_mode_ctrl_alv_ctr_ivi_vehicle_mode_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_vehicle_mode_ctrl_klss_usr_veh_pwr_dn_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_vehicle_mode_ctrl_klss_usr_veh_pwr_dn_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_vehicle_mode_ctrl_klss_usr_veh_pwr_dn_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_vehicle_mode_ctrl_hmi_keep_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_vehicle_mode_ctrl_hmi_keep_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_vehicle_mode_ctrl_hmi_keep_alive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_vehicle_mode_ctrl_lvm_long_park_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_vehicle_mode_ctrl_lvm_long_park_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_vehicle_mode_ctrl_lvm_long_park_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_vehicle_mode_ctrl_lvm_storage_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_vehicle_mode_ctrl_lvm_storage_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_vehicle_mode_ctrl_lvm_storage_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_vehicle_mode_ctrl_drvmc_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_vehicle_mode_ctrl_drvmc_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_vehicle_mode_ctrl_drvmc_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_vehicle_mode_ctrl_eshift_tagt_gear_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_vehicle_mode_ctrl_eshift_tagt_gear_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_vehicle_mode_ctrl_eshift_tagt_gear_req_is_in_range(uint8_t value);

/**
 * Pack message TBOX_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_tbox_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_tbox_warning_t *src_p,
    size_t size);

/**
 * Unpack message TBOX_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_tbox_warning_unpack(
    struct CanI1_noNM_tbox_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TBOX_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_tbox_warning_init(struct CanI1_noNM_tbox_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_tbox_warning_crc_tbox_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_warning_crc_tbox_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_warning_crc_tbox_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_warning_alv_ctr_tbox_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_warning_alv_ctr_tbox_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_warning_alv_ctr_tbox_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tbox_warning_kle_nfc_cc_card_vldtn_st_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tbox_warning_kle_nfc_cc_card_vldtn_st_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tbox_warning_kle_nfc_cc_card_vldtn_st_warn_is_in_range(uint8_t value);

/**
 * Pack message VCU_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_vcu_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_vcu_warning_t *src_p,
    size_t size);

/**
 * Unpack message VCU_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_vcu_warning_unpack(
    struct CanI1_noNM_vcu_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_vcu_warning_init(struct CanI1_noNM_vcu_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_vcu_warning_crc_vcu_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_crc_vcu_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_crc_vcu_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_alv_ctr_vcu_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_alv_ctr_vcu_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_alv_ctr_vcu_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_acchg_chg_gun_unlck_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_acchg_chg_gun_unlck_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_acchg_chg_gun_unlck_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_hvsco_hv_sys_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_hvsco_hv_sys_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_hvsco_hv_sys_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_thmgt_coolt_over_t_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_thmgt_coolt_over_t_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_thmgt_coolt_over_t_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_eshift_psd_brk_to_enge_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_eshift_psd_brk_to_enge_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_eshift_psd_brk_to_enge_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_awd_whl_drv_mode_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_awd_whl_drv_mode_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_awd_whl_drv_mode_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_drvmc_drv_mode_chng_restr_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_drvmc_drv_mode_chng_restr_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_drvmc_drv_mode_chng_restr_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_eshift_hv_dcnct_no_gear_chng_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_eshift_hv_dcnct_no_gear_chng_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_eshift_hv_dcnct_no_gear_chng_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_eshift_gear_chng_epb_enge_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_eshift_gear_chng_epb_enge_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_eshift_gear_chng_epb_enge_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_thmgt_coolt_lvl_lo_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_thmgt_coolt_lvl_lo_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_thmgt_coolt_lvl_lo_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_eshift_stop_veh_to_move_fowd_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_eshift_stop_veh_to_move_fowd_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_eshift_stop_veh_to_move_fowd_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_hvsft_hvsft_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_hvsft_hvsft_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_hvsft_hvsft_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_vcu_limphm_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_vcu_limphm_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_vcu_limphm_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_eshift_epp_fai_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_eshift_epp_fai_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_eshift_epp_fai_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_thmgt_therm_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_thmgt_therm_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_thmgt_therm_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_acchr_chg_auth_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_acchr_chg_auth_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_acchr_chg_auth_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_eshift_act_gear_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_eshift_act_gear_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_eshift_act_gear_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_eshift_tagt_gear_vldtn_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_eshift_tagt_gear_vldtn_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_eshift_tagt_gear_vldtn_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_hvsft_hvil_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_hvsft_hvil_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_hvsft_hvil_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_eshift_stop_veh_to_move_rvs_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_eshift_stop_veh_to_move_rvs_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_eshift_stop_veh_to_move_rvs_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_vcu_hv_sys_flt_lvl1_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_vcu_hv_sys_flt_lvl1_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_vcu_hv_sys_flt_lvl1_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_vcu_hv_sys_flt_lvl2_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_vcu_hv_sys_flt_lvl2_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_vcu_hv_sys_flt_lvl2_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_vcu_hv_sys_flt_lvl3_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_vcu_hv_sys_flt_lvl3_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_vcu_hv_sys_flt_lvl3_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_vcu_warning_cregb_coast_rgn_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_vcu_warning_cregb_coast_rgn_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_vcu_warning_cregb_coast_rgn_warn_is_in_range(uint8_t value);

/**
 * Pack message ZCUF_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_zcuf_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_zcuf_warning_t *src_p,
    size_t size);

/**
 * Unpack message ZCUF_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_zcuf_warning_unpack(
    struct CanI1_noNM_zcuf_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ZCUF_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_zcuf_warning_init(struct CanI1_noNM_zcuf_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_zcuf_warning_crc_zcuf_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_crc_zcuf_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_crc_zcuf_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_alv_ctr_zcuf_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_alv_ctr_zcuf_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_alv_ctr_zcuf_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_cen_lock_lock_unlck_sts_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_cen_lock_lock_unlck_sts_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_cen_lock_lock_unlck_sts_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_wipr_frnt_ri_faild_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_wipr_frnt_ri_faild_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_wipr_frnt_ri_faild_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_swt_ctl_pass_seat_heating_sw_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_swt_ctl_pass_seat_heating_sw_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_swt_ctl_pass_seat_heating_sw_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_swt_ctl_vol_swt_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_swt_ctl_vol_swt_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_swt_ctl_vol_swt_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_wipr_frnt_le_faild_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_wipr_frnt_le_faild_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_wipr_frnt_le_faild_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_swtt_ctl_drvr_st_heatng_swt_flt_wrn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_swtt_ctl_drvr_st_heatng_swt_flt_wrn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_swtt_ctl_drvr_st_heatng_swt_flt_wrn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_relamp_rev_lmp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_relamp_rev_lmp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_relamp_rev_lmp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_rlml_fog_lmp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_rlml_fog_lmp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_rlml_fog_lmp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_swt_ctl_chd_lock_swt_fault_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_swt_ctl_chd_lock_swt_fault_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_swt_ctl_chd_lock_swt_fault_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_swtt_ctl_reclrn_mod_on_off_swt_flt_wrn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_swtt_ctl_reclrn_mod_on_off_swt_flt_wrn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_swtt_ctl_reclrn_mod_on_off_swt_flt_wrn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_rlmr_fog_lmp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_rlmr_fog_lmp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_rlmr_fog_lmp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_relamp_chmsl_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_relamp_chmsl_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_relamp_chmsl_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_swt_ctl_hzrd_swt_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_swt_ctl_hzrd_swt_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_swt_ctl_hzrd_swt_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_ssadl_door_act_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_ssadl_door_act_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_ssadl_door_act_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_ssadl_door_ajar_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_ssadl_door_ajar_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_ssadl_door_ajar_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcuf_warning_ccs_srv_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcuf_warning_ccs_srv_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcuf_warning_ccs_srv_warn_is_in_range(uint8_t value);

/**
 * Pack message ACM_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_acm_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_acm_warning_t *src_p,
    size_t size);

/**
 * Unpack message ACM_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_acm_warning_unpack(
    struct CanI1_noNM_acm_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACM_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_acm_warning_init(struct CanI1_noNM_acm_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_crc_acm_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_crc_acm_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_crc_acm_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_alv_ctr_acm_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_alv_ctr_acm_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_alv_ctr_acm_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_blinking_rmn_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_blinking_rmn_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_blinking_rmn_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_air_bg_warn_lamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_air_bg_warn_lamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_air_bg_warn_lamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_air_bg_pass_airbg_deac_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_air_bg_pass_airbg_deac_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_air_bg_pass_airbg_deac_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_drvr_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_drvr_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_drvr_indcr_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_pass_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_pass_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_pass_indcr_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_re_centr_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_re_centr_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_re_centr_indcr_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_re_ri_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_re_ri_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_re_ri_indcr_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_re_le_indcr_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_re_le_indcr_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_re_le_indcr_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_drvr_bkl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_drvr_bkl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_drvr_bkl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_pass_bkl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_pass_bkl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_pass_bkl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_re_centr_bkl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_re_centr_bkl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_re_centr_bkl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_re_ri_bkl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_re_ri_bkl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_re_ri_bkl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_re_le_bkl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_re_le_bkl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_re_le_bkl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_acm_warning_sblt_warn_chime_rmn_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_acm_warning_sblt_warn_chime_rmn_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_acm_warning_sblt_warn_chime_rmn_req_is_in_range(uint8_t value);

/**
 * Pack message DCMRL_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_dcmrl_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_dcmrl_warning_t *src_p,
    size_t size);

/**
 * Unpack message DCMRL_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_dcmrl_warning_unpack(
    struct CanI1_noNM_dcmrl_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCMRL_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_dcmrl_warning_init(struct CanI1_noNM_dcmrl_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrl_warning_crc_dcmrl_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrl_warning_crc_dcmrl_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrl_warning_crc_dcmrl_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrl_warning_alv_ctr_dcmrl_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrl_warning_alv_ctr_dcmrl_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrl_warning_alv_ctr_dcmrl_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrl_warning_pwind_re_le_wndw_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrl_warning_pwind_re_le_wndw_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrl_warning_pwind_re_le_wndw_warn_is_in_range(uint8_t value);

/**
 * Pack message DCMRR_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_dcmrr_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_dcmrr_warning_t *src_p,
    size_t size);

/**
 * Unpack message DCMRR_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_dcmrr_warning_unpack(
    struct CanI1_noNM_dcmrr_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCMRR_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_dcmrr_warning_init(struct CanI1_noNM_dcmrr_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrr_warning_crc_dcmrr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrr_warning_crc_dcmrr_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrr_warning_crc_dcmrr_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrr_warning_alv_ctr_dcmrr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrr_warning_alv_ctr_dcmrr_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrr_warning_alv_ctr_dcmrr_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrr_warning_cen_lock_re_ri_door_ajar_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrr_warning_cen_lock_re_ri_door_ajar_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrr_warning_cen_lock_re_ri_door_ajar_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmrr_warning_pwind_re_ri_wndw_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmrr_warning_pwind_re_ri_wndw_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmrr_warning_pwind_re_ri_wndw_warn_is_in_range(uint8_t value);

/**
 * Pack message ASU_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_asu_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_asu_warning_t *src_p,
    size_t size);

/**
 * Unpack message ASU_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_asu_warning_unpack(
    struct CanI1_noNM_asu_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ASU_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_asu_warning_init(struct CanI1_noNM_asu_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_asu_warning_crc_asu_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_warning_crc_asu_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_warning_crc_asu_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_warning_alv_ctr_asu_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_warning_alv_ctr_asu_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_warning_alv_ctr_asu_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_warning_air_susp_unit_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_warning_air_susp_unit_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_warning_air_susp_unit_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_asu_warning_air_susp_unit_srv_mode_not_actvd_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_asu_warning_air_susp_unit_srv_mode_not_actvd_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_asu_warning_air_susp_unit_srv_mode_not_actvd_warn_is_in_range(uint8_t value);

/**
 * Pack message DCMP_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_dcmp_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_dcmp_warning_t *src_p,
    size_t size);

/**
 * Unpack message DCMP_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_dcmp_warning_unpack(
    struct CanI1_noNM_dcmp_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCMP_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_dcmp_warning_init(struct CanI1_noNM_dcmp_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_warning_crc_dcmp_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_warning_crc_dcmp_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_warning_crc_dcmp_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_warning_alv_ctr_dcmp_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_warning_alv_ctr_dcmp_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_warning_alv_ctr_dcmp_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_warning_cen_lock_pass_door_ajar_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_warning_cen_lock_pass_door_ajar_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_warning_cen_lock_pass_door_ajar_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmp_warning_pwind_pass_wndw_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmp_warning_pwind_pass_wndw_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmp_warning_pwind_pass_wndw_warn_is_in_range(uint8_t value);

/**
 * Pack message BMS_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_bms_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_bms_warning_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_bms_warning_unpack(
    struct CanI1_noNM_bms_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_bms_warning_init(struct CanI1_noNM_bms_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_bms_warning_crc_bms_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_crc_bms_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_crc_bms_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_alv_ctr_bms_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_alv_ctr_bms_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_alv_ctr_bms_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_cell_u_dif_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_cell_u_dif_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_cell_u_dif_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_coolt_inlet_t_snsr_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_coolt_inlet_t_snsr_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_coolt_inlet_t_snsr_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_coolt_outl_t_snsr_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_coolt_outl_t_snsr_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_coolt_outl_t_snsr_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_dcfc_neg_rly_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_dcfc_neg_rly_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_dcfc_neg_rly_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_dcfc_pos_rly_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_dcfc_pos_rly_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_dcfc_pos_rly_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_ctctr_dcnct_rsn_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_ctctr_dcnct_rsn_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_ctctr_dcnct_rsn_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_err_lev_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_err_lev_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_err_lev_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_fuse_sts_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_fuse_sts_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_fuse_sts_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_hvil_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_hvil_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_hvil_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_lo_bat_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_lo_bat_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_lo_bat_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_main_pos_rly_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_main_pos_rly_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_main_pos_rly_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_pack_hv_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_pack_hv_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_pack_hv_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_pack_insu_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_pack_insu_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_pack_insu_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_pack_lv_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_pack_lv_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_pack_lv_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_pack_ovcur_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_pack_ovcur_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_pack_ovcur_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_pack_t_sts_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_pack_t_sts_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_pack_t_sts_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_pre_ch_rly_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_pre_ch_rly_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_pre_ch_rly_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_cell_over_t_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_cell_over_t_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_cell_over_t_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_cell_under_t_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_cell_under_t_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_cell_under_t_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_rvs_i_det_chg_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_rvs_i_det_chg_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_rvs_i_det_chg_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_sc_i_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_sc_i_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_sc_i_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_soc_chng_fast_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_soc_chng_fast_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_soc_chng_fast_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_srv_due_detn_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_srv_due_detn_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_srv_due_detn_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_therm_runaway_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_therm_runaway_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_therm_runaway_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_tot_neg_rly_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_tot_neg_rly_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_tot_neg_rly_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_bat_bal_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_bat_bal_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_bat_bal_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_bat_repl_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_bat_repl_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_bat_repl_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_cell_hv_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_cell_hv_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_cell_hv_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_bms_warning_bms_cell_lv_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_bms_warning_bms_cell_lv_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_bms_warning_bms_cell_lv_err_warn_is_in_range(uint8_t value);

/**
 * Pack message DCMD_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_dcmd_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_dcmd_warning_t *src_p,
    size_t size);

/**
 * Unpack message DCMD_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_dcmd_warning_unpack(
    struct CanI1_noNM_dcmd_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCMD_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_dcmd_warning_init(struct CanI1_noNM_dcmd_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_warning_crc_dcmd_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_warning_crc_dcmd_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_warning_crc_dcmd_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_warning_alv_ctr_dcmd_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_warning_alv_ctr_dcmd_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_warning_alv_ctr_dcmd_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_warning_pwind_drv_wndw_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_warning_pwind_drv_wndw_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_warning_pwind_drv_wndw_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_warning_cen_lock_drvr_door_ajar_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_warning_cen_lock_drvr_door_ajar_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_warning_cen_lock_drvr_door_ajar_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcmd_warning_pwd_drvr_door_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcmd_warning_pwd_drvr_door_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcmd_warning_pwd_drvr_door_warn_is_in_range(uint8_t value);

/**
 * Pack message EBCM_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ebcm_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ebcm_warning_t *src_p,
    size_t size);

/**
 * Unpack message EBCM_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ebcm_warning_unpack(
    struct CanI1_noNM_ebcm_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EBCM_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ebcm_warning_init(struct CanI1_noNM_ebcm_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_ebcm_warning_crc_ebcm_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_crc_ebcm_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_crc_ebcm_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_alv_ctr_ebcm_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_alv_ctr_ebcm_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_alv_ctr_ebcm_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_swt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_swt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_swt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_inclnd_veh_park_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_inclnd_veh_park_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_inclnd_veh_park_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_brk_f_not_en_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_brk_f_not_en_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_brk_f_not_en_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_brb_rgn_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_brb_rgn_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_brb_rgn_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_not_appld_door_open_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_not_appld_door_open_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_not_appld_door_open_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_rollr_bench_mode_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_rollr_bench_mode_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_rollr_bench_mode_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_auto_rels_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_auto_rels_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_auto_rels_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_rlsd_mntn_mode_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_rlsd_mntn_mode_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_rlsd_mntn_mode_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_rlsd_tw_mode_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_rlsd_tw_mode_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_rlsd_tw_mode_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_auto_appld_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_auto_appld_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_auto_appld_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_drvac_hill_strt_assi_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_drvac_hill_strt_assi_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_drvac_hill_strt_assi_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ebd_sys_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ebd_sys_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ebd_sys_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_drvac_cornering_brk_ctl_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_drvac_cornering_brk_ctl_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_drvac_cornering_brk_ctl_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_drvac_hdc_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_drvac_hdc_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_drvac_hdc_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_drvac_fld_lvl_indcr_brk_fld_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_drvac_fld_lvl_indcr_brk_fld_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_drvac_fld_lvl_indcr_brk_fld_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_drvac_tcs_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_drvac_tcs_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_drvac_tcs_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_psd_brk_pedl_to_rels_epb_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_psd_brk_pedl_to_rels_epb_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_psd_brk_pedl_to_rels_epb_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_warn_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_warn_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_warn_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_park_brk_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_park_brk_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_park_brk_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_degraded_mode_to_be_rlsd_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_degraded_mode_to_be_rlsd_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_degraded_mode_to_be_rlsd_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_ecpbk_degraded_mode_rlsd_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_ecpbk_degraded_mode_rlsd_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_ecpbk_degraded_mode_rlsd_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ebcm_warning_abs_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ebcm_warning_abs_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ebcm_warning_abs_flt_warn_is_in_range(uint8_t value);

/**
 * Pack message OBC_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_obc_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_obc_warning_t *src_p,
    size_t size);

/**
 * Unpack message OBC_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_obc_warning_unpack(
    struct CanI1_noNM_obc_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from OBC_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_obc_warning_init(struct CanI1_noNM_obc_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_obc_warning_crc_obc_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obc_warning_crc_obc_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obc_warning_crc_obc_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obc_warning_alv_ctr_obc_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obc_warning_alv_ctr_obc_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obc_warning_alv_ctr_obc_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obc_warning_acchg_obc_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obc_warning_acchg_obc_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obc_warning_acchg_obc_err_warn_is_in_range(uint8_t value);

/**
 * Pack message EPS_RWA1_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_eps_rwa1_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_eps_rwa1_warning_t *src_p,
    size_t size);

/**
 * Unpack message EPS_RWA1_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_eps_rwa1_warning_unpack(
    struct CanI1_noNM_eps_rwa1_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPS_RWA1_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_eps_rwa1_warning_init(struct CanI1_noNM_eps_rwa1_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_eps_rwa1_warning_crc_eps_rwa1_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa1_warning_crc_eps_rwa1_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa1_warning_crc_eps_rwa1_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_rwa1_warning_alv_ctr_eps_rwa1_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa1_warning_alv_ctr_eps_rwa1_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa1_warning_alv_ctr_eps_rwa1_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_rwa1_warning_stbwr_rdndt_mode_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa1_warning_stbwr_rdndt_mode_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa1_warning_stbwr_rdndt_mode_warn_is_in_range(uint8_t value);

/**
 * Pack message EPS_SFA1_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_eps_sfa1_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_eps_sfa1_warning_t *src_p,
    size_t size);

/**
 * Unpack message EPS_SFA1_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_eps_sfa1_warning_unpack(
    struct CanI1_noNM_eps_sfa1_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPS_SFA1_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_eps_sfa1_warning_init(struct CanI1_noNM_eps_sfa1_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_eps_sfa1_warning_crc_eps_sfa1_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa1_warning_crc_eps_sfa1_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa1_warning_crc_eps_sfa1_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa1_warning_alv_ctr_eps_sfa1_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa1_warning_alv_ctr_eps_sfa1_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa1_warning_alv_ctr_eps_sfa1_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa1_warning_stbwr_hptc_warn_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa1_warning_stbwr_hptc_warn_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa1_warning_stbwr_hptc_warn_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa1_warning_stbwr_sfa_clu_warn_lamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa1_warning_stbwr_sfa_clu_warn_lamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa1_warning_stbwr_sfa_clu_warn_lamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa1_warning_stbwr_steer_algnmt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa1_warning_stbwr_steer_algnmt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa1_warning_stbwr_steer_algnmt_warn_is_in_range(uint8_t value);

/**
 * Pack message EPS_RWA2_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_eps_rwa2_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_eps_rwa2_warning_t *src_p,
    size_t size);

/**
 * Unpack message EPS_RWA2_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_eps_rwa2_warning_unpack(
    struct CanI1_noNM_eps_rwa2_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPS_RWA2_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_eps_rwa2_warning_init(struct CanI1_noNM_eps_rwa2_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_eps_rwa2_warning_crc_eps_rwa2_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa2_warning_crc_eps_rwa2_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa2_warning_crc_eps_rwa2_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_rwa2_warning_alv_ctr_eps_rwa2_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa2_warning_alv_ctr_eps_rwa2_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa2_warning_alv_ctr_eps_rwa2_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_rwa2_warning_stbwr_rdndt_mode_warn_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_rwa2_warning_stbwr_rdndt_mode_warn_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_rwa2_warning_stbwr_rdndt_mode_warn_r_is_in_range(uint8_t value);

/**
 * Pack message EPS_SFA2_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_eps_sfa2_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_eps_sfa2_warning_t *src_p,
    size_t size);

/**
 * Unpack message EPS_SFA2_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_eps_sfa2_warning_unpack(
    struct CanI1_noNM_eps_sfa2_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPS_SFA2_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_eps_sfa2_warning_init(struct CanI1_noNM_eps_sfa2_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_eps_sfa2_warning_crc_eps_sfa2_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa2_warning_crc_eps_sfa2_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa2_warning_crc_eps_sfa2_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa2_warning_alv_ctr_eps_sfa2_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa2_warning_alv_ctr_eps_sfa2_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa2_warning_alv_ctr_eps_sfa2_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa2_warning_stbwr_hptc_warn_sts_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa2_warning_stbwr_hptc_warn_sts_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa2_warning_stbwr_hptc_warn_sts_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa2_warning_stbwr_sfa_clu_warn_lamp_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa2_warning_stbwr_sfa_clu_warn_lamp_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa2_warning_stbwr_sfa_clu_warn_lamp_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_eps_sfa2_warning_stbwr_steer_algnmt_warn_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_eps_sfa2_warning_stbwr_steer_algnmt_warn_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_eps_sfa2_warning_stbwr_steer_algnmt_warn_r_is_in_range(uint8_t value);

/**
 * Pack message HDLML_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_hdlml_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_hdlml_warning_t *src_p,
    size_t size);

/**
 * Unpack message HDLML_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_hdlml_warning_unpack(
    struct CanI1_noNM_hdlml_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HDLML_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_hdlml_warning_init(struct CanI1_noNM_hdlml_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_hdlml_warning_crc_hdlml_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlml_warning_crc_hdlml_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlml_warning_crc_hdlml_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlml_warning_alv_ctr_hdlml_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlml_warning_alv_ctr_hdlml_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlml_warning_alv_ctr_hdlml_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlml_warning_hdlamp_le_lo_beam_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlml_warning_hdlamp_le_lo_beam_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlml_warning_hdlamp_le_lo_beam_lamp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlml_warning_hdlamp_le_hi_beam_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlml_warning_hdlamp_le_hi_beam_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlml_warning_hdlamp_le_hi_beam_lamp_warn_is_in_range(uint8_t value);

/**
 * Pack message HDLMR_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_hdlmr_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_hdlmr_warning_t *src_p,
    size_t size);

/**
 * Unpack message HDLMR_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_hdlmr_warning_unpack(
    struct CanI1_noNM_hdlmr_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HDLMR_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_hdlmr_warning_init(struct CanI1_noNM_hdlmr_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_hdlmr_warning_crc_hdlmr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlmr_warning_crc_hdlmr_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlmr_warning_crc_hdlmr_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlmr_warning_alv_ctr_hdlmr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlmr_warning_alv_ctr_hdlmr_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlmr_warning_alv_ctr_hdlmr_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlmr_warning_hdlamp_ri_lo_beam_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlmr_warning_hdlamp_ri_lo_beam_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlmr_warning_hdlamp_ri_lo_beam_lamp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_hdlmr_warning_hdlamp_ri_hi_beam_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_hdlmr_warning_hdlamp_ri_hi_beam_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_hdlmr_warning_hdlamp_ri_hi_beam_lamp_warn_is_in_range(uint8_t value);

/**
 * Pack message SBM_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_sbm_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_sbm_warning_t *src_p,
    size_t size);

/**
 * Unpack message SBM_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_sbm_warning_unpack(
    struct CanI1_noNM_sbm_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SBM_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_sbm_warning_init(struct CanI1_noNM_sbm_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_sbm_warning_crc_sbm_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_warning_crc_sbm_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_warning_crc_sbm_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_warning_alv_ctr_sbm_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_warning_alv_ctr_sbm_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_warning_alv_ctr_sbm_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_warning_sbm_critical_so_c_alert_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_warning_sbm_critical_so_c_alert_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_warning_sbm_critical_so_c_alert_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_warning_sbm_health_st_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_warning_sbm_health_st_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_warning_sbm_health_st_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_sbm_warning_sbm_lv_bat_t_snsr_flt_sts_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_sbm_warning_sbm_lv_bat_t_snsr_flt_sts_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_sbm_warning_sbm_lv_bat_t_snsr_flt_sts_warn_is_in_range(uint8_t value);

/**
 * Pack message CCU_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ccu_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ccu_warning_t *src_p,
    size_t size);

/**
 * Unpack message CCU_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ccu_warning_unpack(
    struct CanI1_noNM_ccu_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CCU_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ccu_warning_init(struct CanI1_noNM_ccu_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_crc_ccu_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_crc_ccu_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_crc_ccu_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_alv_ctr_ccu_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_alv_ctr_ccu_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_alv_ctr_ccu_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_ccsf_ioniser_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_ccsf_ioniser_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_ccsf_ioniser_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_ccsf_frnt_le_duct_flap_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_ccsf_frnt_le_duct_flap_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_ccsf_frnt_le_duct_flap_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_ccsf_re_ri_temp_mix_flap_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_ccsf_re_ri_temp_mix_flap_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_ccsf_re_ri_temp_mix_flap_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_ccsf_re_le_temp_mix_flap_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_ccsf_re_le_temp_mix_flap_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_ccsf_re_le_temp_mix_flap_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_ccsf_frnt_le_temp_mix_flap_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_ccsf_frnt_le_temp_mix_flap_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_ccsf_frnt_le_temp_mix_flap_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_ccsf_re_le_vent_duct_flap_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_ccsf_re_le_vent_duct_flap_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_ccsf_re_le_vent_duct_flap_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_ccsf_frnt_ri_duct_flap_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_ccsf_frnt_ri_duct_flap_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_ccsf_frnt_ri_duct_flap_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_ccsf_re_le_foot_duct_flap_flt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_ccsf_re_le_foot_duct_flap_flt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_ccsf_re_le_foot_duct_flap_flt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_ccsf_frnt_le_ven_dir_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_ccsf_frnt_le_ven_dir_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_ccsf_frnt_le_ven_dir_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ccu_warning_ccsf_frnt_ri_temp_mix_flap_flt_w_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ccu_warning_ccsf_frnt_ri_temp_mix_flap_flt_w_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ccu_warning_ccsf_frnt_ri_temp_mix_flap_flt_w_warn_is_in_range(uint8_t value);

/**
 * Pack message MCU_F_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_mcu_f_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_mcu_f_warning_t *src_p,
    size_t size);

/**
 * Unpack message MCU_F_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_mcu_f_warning_unpack(
    struct CanI1_noNM_mcu_f_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_F_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_mcu_f_warning_init(struct CanI1_noNM_mcu_f_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_mcu_f_warning_crc_mcu_f_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mcu_f_warning_crc_mcu_f_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mcu_f_warning_crc_mcu_f_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mcu_f_warning_alv_ctr_mcu_f_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mcu_f_warning_alv_ctr_mcu_f_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mcu_f_warning_alv_ctr_mcu_f_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mcu_f_warning_eds_frnt_derat_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mcu_f_warning_eds_frnt_derat_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mcu_f_warning_eds_frnt_derat_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mcu_f_warning_eds_frnt_er_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mcu_f_warning_eds_frnt_er_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mcu_f_warning_eds_frnt_er_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mcu_f_warning_eds_frnt_park_lock_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mcu_f_warning_eds_frnt_park_lock_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mcu_f_warning_eds_frnt_park_lock_err_warn_is_in_range(uint8_t value);

/**
 * Pack message MCU_R_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_mcu_r_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_mcu_r_warning_t *src_p,
    size_t size);

/**
 * Unpack message MCU_R_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_mcu_r_warning_unpack(
    struct CanI1_noNM_mcu_r_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_R_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_mcu_r_warning_init(struct CanI1_noNM_mcu_r_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_mcu_r_warning_crc_mcu_r_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mcu_r_warning_crc_mcu_r_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mcu_r_warning_crc_mcu_r_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mcu_r_warning_alv_ctr_mcu_r_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mcu_r_warning_alv_ctr_mcu_r_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mcu_r_warning_alv_ctr_mcu_r_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mcu_r_warning_eds_re_park_lock_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mcu_r_warning_eds_re_park_lock_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mcu_r_warning_eds_re_park_lock_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mcu_r_warning_eds_re_err_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mcu_r_warning_eds_re_err_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mcu_r_warning_eds_re_err_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mcu_r_warning_eds_re_derat_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mcu_r_warning_eds_re_derat_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mcu_r_warning_eds_re_derat_warn_is_in_range(uint8_t value);

/**
 * Pack message MFS_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_mfs_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_mfs_warning_t *src_p,
    size_t size);

/**
 * Unpack message MFS_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_mfs_warning_unpack(
    struct CanI1_noNM_mfs_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MFS_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_mfs_warning_init(struct CanI1_noNM_mfs_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_warning_crc_mfs_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_warning_crc_mfs_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_warning_crc_mfs_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_warning_alv_ctr_mfs_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_warning_alv_ctr_mfs_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_warning_alv_ctr_mfs_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_warning_mfsw_drv_mod_swt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_warning_mfsw_drv_mod_swt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_warning_mfsw_drv_mod_swt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_warning_mfs_adas_swt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_warning_mfs_adas_swt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_warning_mfs_adas_swt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_warning_mfs_favorite_swt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_warning_mfs_favorite_swt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_warning_mfs_favorite_swt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_warning_mfs_rim_swt_hi_beam_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_warning_mfs_rim_swt_hi_beam_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_warning_mfs_rim_swt_hi_beam_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_mfs_warning_mfs_rim_swt_wiper_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_mfs_warning_mfs_rim_swt_wiper_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_mfs_warning_mfs_rim_swt_wiper_warn_is_in_range(uint8_t value);

/**
 * Pack message DCDC_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_dcdc_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_dcdc_warning_t *src_p,
    size_t size);

/**
 * Unpack message DCDC_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_dcdc_warning_unpack(
    struct CanI1_noNM_dcdc_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCDC_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_dcdc_warning_init(struct CanI1_noNM_dcdc_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_dcdc_warning_crc_dcdc_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcdc_warning_crc_dcdc_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcdc_warning_crc_dcdc_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcdc_warning_alv_ctr_dcdc_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcdc_warning_alv_ctr_dcdc_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcdc_warning_alv_ctr_dcdc_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_dcdc_warning_hvsco_dcdc_oper_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_dcdc_warning_hvsco_dcdc_oper_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_dcdc_warning_hvsco_dcdc_oper_warn_is_in_range(uint8_t value);

/**
 * Pack message PSMD_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_psmd_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_psmd_warning_t *src_p,
    size_t size);

/**
 * Unpack message PSMD_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_psmd_warning_unpack(
    struct CanI1_noNM_psmd_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PSMD_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_psmd_warning_init(struct CanI1_noNM_psmd_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_crc_psmd_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_crc_psmd_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_crc_psmd_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_alv_ctr_psmd_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_alv_ctr_psmd_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_alv_ctr_psmd_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_seat_adjmt_drv_frnt_back_mot_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_seat_adjmt_drv_frnt_back_mot_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_seat_adjmt_drv_frnt_back_mot_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_seat_cfmt_drv_heatg_back_pad_fail_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_seat_cfmt_drv_heatg_back_pad_fail_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_seat_cfmt_drv_heatg_back_pad_fail_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_seat_cfmt_drv_ventn_squb_fan_fail_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_seat_cfmt_drv_ventn_squb_fan_fail_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_seat_cfmt_drv_ventn_squb_fan_fail_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_seat_adjmt_drv_hei_up_dwn_mot_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_seat_adjmt_drv_hei_up_dwn_mot_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_seat_adjmt_drv_hei_up_dwn_mot_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_seat_adjmt_drv_tilt_up_dwn_mot_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_seat_adjmt_drv_tilt_up_dwn_mot_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_seat_adjmt_drv_tilt_up_dwn_mot_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_seat_cfmt_drv_ventn_cshn_fan_fail_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_seat_cfmt_drv_ventn_cshn_fan_fail_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_seat_cfmt_drv_ventn_cshn_fan_fail_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_seat_adjmt_drv_adjmt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_seat_adjmt_drv_adjmt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_seat_adjmt_drv_adjmt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_seat_adjmt_drv_recl_up_dwn_mot_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_seat_adjmt_drv_recl_up_dwn_mot_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_seat_adjmt_drv_recl_up_dwn_mot_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmd_warning_seat_cfmt_drv_massg_fail_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmd_warning_seat_cfmt_drv_massg_fail_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmd_warning_seat_cfmt_drv_massg_fail_warn_is_in_range(uint8_t value);

/**
 * Pack message PSMP_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_psmp_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_psmp_warning_t *src_p,
    size_t size);

/**
 * Unpack message PSMP_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_psmp_warning_unpack(
    struct CanI1_noNM_psmp_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PSMP_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_psmp_warning_init(struct CanI1_noNM_psmp_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_warning_crc_psmp_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_warning_crc_psmp_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_warning_crc_psmp_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_warning_alv_ctr_psmp_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_warning_alv_ctr_psmp_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_warning_alv_ctr_psmp_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_warning_seat_adjmt_pass_tilt_up_dwn_mot_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_warning_seat_adjmt_pass_tilt_up_dwn_mot_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_warning_seat_adjmt_pass_tilt_up_dwn_mot_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_warning_seat_adjmt_pass_adjmt_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_warning_seat_adjmt_pass_adjmt_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_warning_seat_adjmt_pass_adjmt_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_warning_seat_cfmt_pass_ventn_cshn_fan_fail_wrn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_warning_seat_cfmt_pass_ventn_cshn_fan_fail_wrn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_warning_seat_cfmt_pass_ventn_cshn_fan_fail_wrn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_warning_seat_adjmt_pass_recl_up_dwn_mot_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_warning_seat_adjmt_pass_recl_up_dwn_mot_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_warning_seat_adjmt_pass_recl_up_dwn_mot_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_warning_seat_adjmt_pass_hei_up_dwn_mot_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_warning_seat_adjmt_pass_hei_up_dwn_mot_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_warning_seat_adjmt_pass_hei_up_dwn_mot_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_warning_seat_cfmt_pass_ventn_squb_fan_fail_wrn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_warning_seat_cfmt_pass_ventn_squb_fan_fail_wrn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_warning_seat_cfmt_pass_ventn_squb_fan_fail_wrn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_warning_seat_cfmt_pass_massg_fail_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_warning_seat_cfmt_pass_massg_fail_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_warning_seat_cfmt_pass_massg_fail_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_psmp_warning_seat_adjmt_pass_fowd_bawd_mot_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_psmp_warning_seat_adjmt_pass_fowd_bawd_mot_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_psmp_warning_seat_adjmt_pass_fowd_bawd_mot_warn_is_in_range(uint8_t value);

/**
 * Pack message RWSM_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_rwsm_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_rwsm_warning_t *src_p,
    size_t size);

/**
 * Unpack message RWSM_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_rwsm_warning_unpack(
    struct CanI1_noNM_rwsm_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RWSM_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_rwsm_warning_init(struct CanI1_noNM_rwsm_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_rwsm_warning_crc_rwsm_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rwsm_warning_crc_rwsm_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rwsm_warning_crc_rwsm_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rwsm_warning_alv_ctr_rwsm_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rwsm_warning_alv_ctr_rwsm_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rwsm_warning_alv_ctr_rwsm_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rwsm_warning_re_whl_steer_warn_lamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rwsm_warning_re_whl_steer_warn_lamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rwsm_warning_re_whl_steer_warn_lamp_is_in_range(uint8_t value);

/**
 * Pack message ZCUR_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_zcur_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_zcur_warning_t *src_p,
    size_t size);

/**
 * Unpack message ZCUR_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_zcur_warning_unpack(
    struct CanI1_noNM_zcur_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ZCUR_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_zcur_warning_init(struct CanI1_noNM_zcur_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_zcur_warning_crc_zcur_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_warning_crc_zcur_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_warning_crc_zcur_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_warning_alv_ctr_zcur_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_warning_alv_ctr_zcur_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_warning_alv_ctr_zcur_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_warning_seat_cfmt_re_le_ventn_cshn_fan_fail_wrn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_warning_seat_cfmt_re_le_ventn_cshn_fan_fail_wrn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_warning_seat_cfmt_re_le_ventn_cshn_fan_fail_wrn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_warning_seat_cfmt_re_le_ventn_squb_fan_fail_wrn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_warning_seat_cfmt_re_le_ventn_squb_fan_fail_wrn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_warning_seat_cfmt_re_le_ventn_squb_fan_fail_wrn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_warning_seat_cfmt_re_ri_ventn_cshn_fan_fail_wrn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_warning_seat_cfmt_re_ri_ventn_cshn_fan_fail_wrn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_warning_seat_cfmt_re_ri_ventn_cshn_fan_fail_wrn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_warning_seat_cfmt_re_ri_ventn_squb_fan_fail_wrn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_warning_seat_cfmt_re_ri_ventn_squb_fan_fail_wrn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_warning_seat_cfmt_re_ri_ventn_squb_fan_fail_wrn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_warning_acttg_tail_gate_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_warning_acttg_tail_gate_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_warning_acttg_tail_gate_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_zcur_warning_chrgr_port_ilmn_lamp_w_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_zcur_warning_chrgr_port_ilmn_lamp_w_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_zcur_warning_chrgr_port_ilmn_lamp_w_warn_is_in_range(uint8_t value);

/**
 * Pack message TLML_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_tlml_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_tlml_warning_t *src_p,
    size_t size);

/**
 * Unpack message TLML_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_tlml_warning_unpack(
    struct CanI1_noNM_tlml_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TLML_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_tlml_warning_init(struct CanI1_noNM_tlml_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_tlml_warning_crc_tlml_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlml_warning_crc_tlml_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlml_warning_crc_tlml_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlml_warning_alv_ctr_tlml_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlml_warning_alv_ctr_tlml_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlml_warning_alv_ctr_tlml_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlml_warning_relamp_re_le_tlg_turn_indcr_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlml_warning_relamp_re_le_tlg_turn_indcr_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlml_warning_relamp_re_le_tlg_turn_indcr_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlml_warning_relamp_re_le_tlg_posn_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlml_warning_relamp_re_le_tlg_posn_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlml_warning_relamp_re_le_tlg_posn_lamp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlml_warning_relamp_le_tlg_brk_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlml_warning_relamp_le_tlg_brk_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlml_warning_relamp_le_tlg_brk_lamp_warn_is_in_range(uint8_t value);

/**
 * Pack message TLMR_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_tlmr_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_tlmr_warning_t *src_p,
    size_t size);

/**
 * Unpack message TLMR_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_tlmr_warning_unpack(
    struct CanI1_noNM_tlmr_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TLMR_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_tlmr_warning_init(struct CanI1_noNM_tlmr_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_tlmr_warning_crc_tlmr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlmr_warning_crc_tlmr_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlmr_warning_crc_tlmr_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlmr_warning_alv_ctr_tlmr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlmr_warning_alv_ctr_tlmr_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlmr_warning_alv_ctr_tlmr_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlmr_warning_relamp_ri_tlg_brk_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlmr_warning_relamp_ri_tlg_brk_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlmr_warning_relamp_ri_tlg_brk_lamp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlmr_warning_relamp_re_ri_tlg_turn_indcr_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlmr_warning_relamp_re_ri_tlg_turn_indcr_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlmr_warning_relamp_re_ri_tlg_turn_indcr_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_tlmr_warning_relamp_re_ri_tlg_posn_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_tlmr_warning_relamp_re_ri_tlg_posn_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_tlmr_warning_relamp_re_ri_tlg_posn_lamp_warn_is_in_range(uint8_t value);

/**
 * Pack message RLML_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_rlml_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_rlml_warning_t *src_p,
    size_t size);

/**
 * Unpack message RLML_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_rlml_warning_unpack(
    struct CanI1_noNM_rlml_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RLML_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_rlml_warning_init(struct CanI1_noNM_rlml_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_rlml_warning_crc_rlml_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlml_warning_crc_rlml_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlml_warning_crc_rlml_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlml_warning_alv_ctr_rlml_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlml_warning_alv_ctr_rlml_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlml_warning_alv_ctr_rlml_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlml_warning_relamp_le_body_brk_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlml_warning_relamp_le_body_brk_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlml_warning_relamp_le_body_brk_lamp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlml_warning_relamp_re_le_body_turn_indcr_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlml_warning_relamp_re_le_body_turn_indcr_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlml_warning_relamp_re_le_body_turn_indcr_warn_is_in_range(uint8_t value);

/**
 * Pack message RLMR_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_rlmr_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_rlmr_warning_t *src_p,
    size_t size);

/**
 * Unpack message RLMR_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_rlmr_warning_unpack(
    struct CanI1_noNM_rlmr_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RLMR_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_rlmr_warning_init(struct CanI1_noNM_rlmr_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_rlmr_warning_crc_rlmr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlmr_warning_crc_rlmr_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlmr_warning_crc_rlmr_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlmr_warning_alv_ctr_rlmr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlmr_warning_alv_ctr_rlmr_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlmr_warning_alv_ctr_rlmr_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlmr_warning_relamp_re_ri_body_turn_indcr_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlmr_warning_relamp_re_ri_body_turn_indcr_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlmr_warning_relamp_re_ri_body_turn_indcr_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_rlmr_warning_relamp_ri_body_brk_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_rlmr_warning_relamp_ri_body_brk_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_rlmr_warning_relamp_ri_body_brk_lamp_warn_is_in_range(uint8_t value);

/**
 * Pack message SLMFC_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_slmfc_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_slmfc_warning_t *src_p,
    size_t size);

/**
 * Unpack message SLMFC_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_slmfc_warning_unpack(
    struct CanI1_noNM_slmfc_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SLMFC_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_slmfc_warning_init(struct CanI1_noNM_slmfc_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_slmfc_warning_crc_slmfc_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfc_warning_crc_slmfc_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfc_warning_crc_slmfc_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfc_warning_alv_ctr_slmfc_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfc_warning_alv_ctr_slmfc_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfc_warning_alv_ctr_slmfc_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfc_warning_hdlamp_frnt_centr_le_sign_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfc_warning_hdlamp_frnt_centr_le_sign_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfc_warning_hdlamp_frnt_centr_le_sign_lamp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfc_warning_hdlamp_frnt_centr_ri_sign_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfc_warning_hdlamp_frnt_centr_ri_sign_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfc_warning_hdlamp_frnt_centr_ri_sign_lamp_warn_is_in_range(uint8_t value);

/**
 * Pack message SLMFL_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_slmfl_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_slmfl_warning_t *src_p,
    size_t size);

/**
 * Unpack message SLMFL_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_slmfl_warning_unpack(
    struct CanI1_noNM_slmfl_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SLMFL_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_slmfl_warning_init(struct CanI1_noNM_slmfl_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_slmfl_warning_crc_slmfl_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfl_warning_crc_slmfl_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfl_warning_crc_slmfl_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfl_warning_alv_ctr_slmfl_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfl_warning_alv_ctr_slmfl_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfl_warning_alv_ctr_slmfl_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfl_warning_hdlamp_frnt_le_body_turn_indcr_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfl_warning_hdlamp_frnt_le_body_turn_indcr_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfl_warning_hdlamp_frnt_le_body_turn_indcr_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfl_warning_hdlamp_le_drl_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfl_warning_hdlamp_le_drl_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfl_warning_hdlamp_le_drl_lamp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfl_warning_hdlamp_le_frnt_posn_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfl_warning_hdlamp_le_frnt_posn_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfl_warning_hdlamp_le_frnt_posn_lamp_warn_is_in_range(uint8_t value);

/**
 * Pack message SLMFR_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_slmfr_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_slmfr_warning_t *src_p,
    size_t size);

/**
 * Unpack message SLMFR_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_slmfr_warning_unpack(
    struct CanI1_noNM_slmfr_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SLMFR_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_slmfr_warning_init(struct CanI1_noNM_slmfr_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_slmfr_warning_crc_slmfr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfr_warning_crc_slmfr_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfr_warning_crc_slmfr_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfr_warning_alv_ctr_slmfr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfr_warning_alv_ctr_slmfr_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfr_warning_alv_ctr_slmfr_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfr_warning_hdlamp_frnt_ri_body_turn_indcr_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfr_warning_hdlamp_frnt_ri_body_turn_indcr_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfr_warning_hdlamp_frnt_ri_body_turn_indcr_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfr_warning_hdlamp_ri_drl_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfr_warning_hdlamp_ri_drl_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfr_warning_hdlamp_ri_drl_lamp_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmfr_warning_hdlamp_ri_frnt_posn_lamp_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmfr_warning_hdlamp_ri_frnt_posn_lamp_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmfr_warning_hdlamp_ri_frnt_posn_lamp_warn_is_in_range(uint8_t value);

/**
 * Pack message SLMRC_Warning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_slmrc_warning_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_slmrc_warning_t *src_p,
    size_t size);

/**
 * Unpack message SLMRC_Warning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_slmrc_warning_unpack(
    struct CanI1_noNM_slmrc_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SLMRC_Warning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_slmrc_warning_init(struct CanI1_noNM_slmrc_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CanI1_noNM_slmrc_warning_crc_slmrc_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmrc_warning_crc_slmrc_warning_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmrc_warning_crc_slmrc_warning_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmrc_warning_alv_ctr_slmrc_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmrc_warning_alv_ctr_slmrc_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmrc_warning_alv_ctr_slmrc_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmrc_warning_relamp_centr_ri_sign_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmrc_warning_relamp_centr_ri_sign_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmrc_warning_relamp_centr_ri_sign_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_slmrc_warning_relamp_centr_le_sign_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_slmrc_warning_relamp_centr_le_sign_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_slmrc_warning_relamp_centr_le_sign_lamp_sts_is_in_range(uint8_t value);

/**
 * Pack message IVI_DiagResp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_diag_resp_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_diag_resp_t *src_p,
    size_t size);

/**
 * Unpack message IVI_DiagResp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_diag_resp_unpack(
    struct CanI1_noNM_ivi_diag_resp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_DiagResp.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_diag_resp_init(struct CanI1_noNM_ivi_diag_resp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte32_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte40_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte48_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte49_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte50_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte51_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte52_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte53_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte54_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte55_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte56_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte57_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte58_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte59_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte60_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte61_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte62_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_resp_ivi_diag_resp_byte63_is_in_range(uint8_t value);

/**
 * Pack message WLC_DiagResp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_wlc_diag_resp_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_wlc_diag_resp_t *src_p,
    size_t size);

/**
 * Unpack message WLC_DiagResp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_wlc_diag_resp_unpack(
    struct CanI1_noNM_wlc_diag_resp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WLC_DiagResp.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_wlc_diag_resp_init(struct CanI1_noNM_wlc_diag_resp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_resp_wlc_diag_resp_byte7_is_in_range(uint8_t value);

/**
 * Pack message IVI_DiagReq.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_ivi_diag_req_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_ivi_diag_req_t *src_p,
    size_t size);

/**
 * Unpack message IVI_DiagReq.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_ivi_diag_req_unpack(
    struct CanI1_noNM_ivi_diag_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IVI_DiagReq.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_ivi_diag_req_init(struct CanI1_noNM_ivi_diag_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte28_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte29_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte29_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte30_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte30_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte31_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte31_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte32_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte33_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte33_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte34_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte34_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte35_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte35_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte36_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte36_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte37_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte37_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte38_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte38_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte39_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte39_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte40_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte40_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte41_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte41_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte42_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte42_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte43_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte43_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte44_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte44_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte45_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte45_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte46_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte46_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte47_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte47_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte48_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte48_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte49_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte49_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte50_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte51_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte51_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte52_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte52_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte53_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte53_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte54_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte54_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte55_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte55_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte56_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte56_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte57_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte57_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte58_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte58_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte59_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte59_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte60_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte60_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte61_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte61_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte62_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte62_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_ivi_diag_req_ivi_diag_req_byte63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_ivi_diag_req_ivi_diag_req_byte63_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_ivi_diag_req_ivi_diag_req_byte63_is_in_range(uint8_t value);

/**
 * Pack message WLC_DiagReq.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_wlc_diag_req_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_wlc_diag_req_t *src_p,
    size_t size);

/**
 * Unpack message WLC_DiagReq.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_wlc_diag_req_unpack(
    struct CanI1_noNM_wlc_diag_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WLC_DiagReq.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_wlc_diag_req_init(struct CanI1_noNM_wlc_diag_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_req_wlc_diag_req_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_req_wlc_diag_req_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_req_wlc_diag_req_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_req_wlc_diag_req_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_req_wlc_diag_req_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_req_wlc_diag_req_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_req_wlc_diag_req_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_req_wlc_diag_req_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_req_wlc_diag_req_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_req_wlc_diag_req_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_req_wlc_diag_req_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_req_wlc_diag_req_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_req_wlc_diag_req_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_req_wlc_diag_req_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_req_wlc_diag_req_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_req_wlc_diag_req_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_req_wlc_diag_req_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_req_wlc_diag_req_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_req_wlc_diag_req_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_req_wlc_diag_req_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_req_wlc_diag_req_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_wlc_diag_req_wlc_diag_req_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_wlc_diag_req_wlc_diag_req_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_wlc_diag_req_wlc_diag_req_byte7_is_in_range(uint8_t value);

/**
 * Pack message OBD_FuncDiagReq.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanI1_noNM_obd_func_diag_req_pack(
    uint8_t *dst_p,
    const struct CanI1_noNM_obd_func_diag_req_t *src_p,
    size_t size);

/**
 * Unpack message OBD_FuncDiagReq.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanI1_noNM_obd_func_diag_req_unpack(
    struct CanI1_noNM_obd_func_diag_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from OBD_FuncDiagReq.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CanI1_noNM_obd_func_diag_req_init(struct CanI1_noNM_obd_func_diag_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanI1_noNM_obd_func_diag_req_obd_func_diag_req_byte7_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
